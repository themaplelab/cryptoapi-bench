root@da97c7adcfe0:~/eval# emacs runCogniCryptoGuardBmk.sh
root@da97c7adcfe0:~/eval# emacs runCogniCryptoGuardBmk.sh^C
root@da97c7adcfe0:~/eval# emacs analyse
analyseAll.sh         analyseDragon.sh~     analyseNetty.sh~      analyseSmart.sh       
analyseAllFixes.sh    analyseJeesuite.sh    analyseOne.sh         analyseWhatsmars.sh   
analyseDragon.sh      analyseNetty.sh       analyseOnefixes.sh    analyseWhatsmars.sh~  
root@da97c7adcfe0:~/eval# emacs analyseDragon.sh
root@da97c7adcfe0:~/eval# emacs runCogniCryptoGuardBmk.sh
root@da97c7adcfe0:~/eval# ./runCogniCryptoGuardBmk.sh
mkdir: cannot create directory '/root/eval/cryptoGuardAnalysisOriginal': File exists
############################
Headless scanner options does not have arg-class
Using call graph algorithm CHA
Setup as follows: 
HeadlessCryptoScanner: 
	SoftwareIdentifier: null
	ApplicationClassPath: /root/eval/cryptoapi-bench/build/classes/java/main
	SootClassPath: /root/openj9-openjdk-jdk8/build/linux-x86_64-normal-server-release/images/j2sdk-image/jre/lib/rt.jar:/root/openj9-openjdk-jdk8/build/linux-x86_64-normal-server-release/images/j2sdk-image/jre/lib/jce.jar:/root/eval/cryptoapi-bench/build/classes/java/main


Using the class with default source provider chain.
Finished initializing soot
Analysis soot setup done after 1 seconds
Ruleset: 
	java.security.AlgorithmParameters
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.Cipher
	javax.crypto.CipherInputStream
	javax.crypto.CipherOutputStream
	javax.crypto.spec.DHGenParameterSpec
	javax.crypto.spec.DHParameterSpec
	java.security.DigestInputStream
	java.security.DigestOutputStream
	java.security.spec.DSAGenParameterSpec
	java.security.spec.DSAParameterSpec
	javax.crypto.spec.GCMParameterSpec
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.crypto.spec.IvParameterSpec
	java.security.Key
	javax.crypto.KeyGenerator
	javax.net.ssl.KeyManagerFactory
	java.security.KeyPair
	java.security.KeyPairGenerator
	java.security.KeyStore
	javax.net.ssl.KeyStoreBuilderParameters
	javax.crypto.Mac
	java.security.MessageDigest
	javax.crypto.spec.PBEKeySpec
	javax.crypto.spec.PBEParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.cert.PKIXParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.SecretKey
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	java.security.SecureRandom
	java.security.Signature
	javax.net.ssl.SSLContext
	javax.net.ssl.SSLEngine
	javax.net.ssl.SSLParameters
	java.security.cert.TrustAnchor
	javax.net.ssl.TrustManagerFactory

Analyzed Objects: 
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase2: void key2()>
		SHA-256: 932f8894aeaf714daaf4c4090d2461bbf41ee75f7d70f741bd6adc0b5e589134
		Secure: true
	Object:
		Variable: r2
		Type: java.security.KeyPair
		Statement: r2 = virtualinvoke r1.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1: void go()>
		SHA-256: a0cc7fffec5e3c09dd02019dcae91a1650da3bd889302380a369ff0942f47279
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto3: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 5abc24a5dbf0d490d88af14b187b2398492270b81b33719462f3bb5a1fa65352
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoCorrected: void go()>
		SHA-256: d804cd5d0d9563bd594faec00b6ed2b922f76b23bffbb03204a14939107d842e
		Secure: true
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase2: void key2()>
		SHA-256: e81dc5f4616ffe918950c1761b824c872343dbcf55212e892ca1103150b6b4a
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase13: void method1(java.lang.String)>
		SHA-256: 7bbf54fe3b70dff9792e072d211c1737a08cf4485af7fa2b32daa9681ab50997
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABMC1: void go(java.lang.String)>
		SHA-256: 320df2947714009b8019d094abb4c3d4c9624a49cdc296e63874c3cfd23f254a
		Secure: true
	Object:
		Variable: r3
		Type: java.security.KeyStore
		Statement: r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r2)
		Method: <org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase3: void method2(java.lang.String)>
		SHA-256: a1b8d0a1103ff0a85fe4c5e315cf4d5b085ee5e6246b5db193cb771a730f2beb
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase1: void go(java.lang.String,java.lang.String)>
		SHA-256: 29fca946d269838169b66251793d41846084a62f15b653d62ec7dff77a4dea75
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer277)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1: void go()>
		SHA-256: 96e3424c1f920565d388b8d9904ed63143e93dc4824165dc69921433ac07a6c6
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMC1: void key(java.lang.String)>
		SHA-256: a59dca38173f6ecc3111a544c67f05b6a36562f20de4be01a4220996a44fcb28
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r5)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7: void go()>
		SHA-256: 91c7248cf857abee526a6f227afc51bb844beeb4a7ade6c935a8a874159c3ab9
		Secure: false
	Object:
		Variable: r6
		Type: javax.crypto.Cipher
		Statement: r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer124)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1: void go()>
		SHA-256: 13337ec7a1f73ba96f1788bb6bf2ce97c5cf2fd9c79c441d5a21ad46211c8389
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase11: void method1(java.lang.String,java.lang.String)>
		SHA-256: bd6e6d55c9ab6f39eb34bc19c3d636fb463f2d3417e0ade57e863846cc792c54
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer260)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1: void go(byte[])>
		SHA-256: b51c651fa77c62212a57289448eadd1dfa5331af243a03a4693decb8fbb0f595
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase13: void method1(java.lang.String)>
		SHA-256: e857a5609d1d3f2a986974179aafdba353cc6e373b2b18a3596912947224e6e8
		Secure: false
	Object:
		Variable: $r11
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r11.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer283)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsABHCase1: void key2()>
		SHA-256: 406ee1362cd1d2a42cdf2a54aaf3c38f85328ca9aaa47ca4329a52925f6968de
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase3: void go(java.lang.String,java.lang.String)>
		SHA-256: b14fcbc765262f9622aa2b3e90745734dc573d63e4c40c85ab0166da258ce73e
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.pbeiteration.CryptoPBEIteration1: void method1(int)>
		SHA-256: b8127d5ae3423aa284f054ddcd4035de19a97ec593963601857d0382a7288298
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, varReplacer156)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase2: void go()>
		SHA-256: da0faed6a34352bd2bf33c84f7b95bf79782b9e4c7a2c015545f8b2a8f2f7132
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase10: void method1(java.lang.String,java.lang.String)>
		SHA-256: dc4b5a093a0f32a5ee652c8da84944c7c9fbdc63484a8612d03cf95b6a02b6a0
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1: void go()>
		SHA-256: 240a6ee210536b4a789b9d00f5a6f076d166a93bc840fa2531f9ed4099bb59a9
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase4: void go(java.lang.String)>
		SHA-256: aa2fdf200b557da422c713d175386f96e9ff837c1f0c7cb4e704d7227abc6623
		Secure: false
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase3: void go(java.lang.String,java.lang.String)>
		SHA-256: 1ed3d8e9a04ea480932a3e553d20871700141c8ae8a342175db2717451ff7a2a
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMC1: void key(java.lang.String)>
		SHA-256: 65ed837f5efd942441433043146512510ebed572c3c259d5cfd5f35fb2cd2edc
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase3: void go(java.lang.String)>
		SHA-256: 8e30f07816abfd972780a34e9fba653d3e82a13c9f36f76b5c8d2813b52a9dc7
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, r1, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.CryptoPredictablePBE: void method1(java.lang.String)>
		SHA-256: 749f1e6e3954eaa6dea817670a969d170e4c0cec69fcc0129871d32cdcf6e2d8
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer263)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2: void go()>
		SHA-256: 6029a2525c828d190cc8356aa08ffff6a2292165abe23d1eca869e92859276e7
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase3: void method2(java.lang.String)>
		SHA-256: f967b334fd4e010e88126d20bc8d9192cefe6b9f685fc63058f44d629c4fa1c8
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer92)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoCorrected: void go()>
		SHA-256: 66f729ec33abb30a3be8767d47649aa5d9ec27ac92c5a3a75bdf409647a7fc17
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.SecureRandom
		Statement: specialinvoke $r6.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected: void go()>
		SHA-256: ccbcee9e59c0aa87ca2ae138480fd7fd79efbce4e6acc699cb4932bf2173b71
		Secure: true
	Object:
		Variable: r3
		Type: java.security.KeyStore
		Statement: r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r2)
		Method: <org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABMC1: void go(java.lang.String)>
		SHA-256: 7e327c9cd5bb42a417c650f8ead3817a43a13d7e2e2c3f4122bbea3d3b4d686a
		Secure: false
	Object:
		Variable: r5
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto4: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 9b6f075fcd66575e9f0612c34cf9387b944c4b6f73b5ebf0f742bb1f8c63b7a7
		Secure: false
	Object:
		Variable: r3
		Type: java.security.MessageDigest
		Statement: r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r2)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABMC1: void go(java.lang.String,java.lang.String)>
		SHA-256: 28684f6d1c8f62a41752f3c3cff0750627c565c7e295b55db249f68ce9dbdae
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r3.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2: void key()>
		SHA-256: e2adec780edb59f5595a9555d06a4237e42e3c7fd3ec43581e2d3e46b3156165
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase9: void go(java.lang.String)>
		SHA-256: c3d3adb15f175e7a91de1c3732a831cc5589f71685c32f0d076ec844c008668f
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer83)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase3: void method1(java.lang.String)>
		SHA-256: 1f1672eb8eac1e9b1627900821755fc463791d95e589b9e58425b686b2c89708
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.KeyGenerator
		Statement: r3 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer268)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1: void go(byte[])>
		SHA-256: 7751cccc65989c3c4a37cc6e6485cb44eceb32d7942cd39c872b834cd11ada8e
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase3: void method1(java.lang.String)>
		SHA-256: 82f3907da64978a5fee5bf105d91dfad596516d0502c88c05e3ca2a96553f0e8
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12: void method1(java.lang.String)>
		SHA-256: a70bf9b3aaac20af6da5b572dcef276ee373a0657081e1524afe2f061f6a605
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2: void go(java.lang.String)>
		SHA-256: 1989b357dd164067bd19fac966838d7d133299e7239804e0ded600ed6d24e4f3
		Secure: false
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)
		Method: <org.cryptoapi.bench.brokenhash.CryptoHash3: void encrypt(java.lang.String,java.lang.String)>
		SHA-256: de58d5f196a0c1987f71a62be8427c9ac8da25e6a10d50a636fd13dd993fbc43
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.CryptoPredictableSeed1: void method1(byte[])>
		SHA-256: a5151aaf92ec07766de7026472eaa8b2bd6f2cf5b13f0e060ca131254532d666
		Secure: true
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer73)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashBBCase4: void main(java.lang.String[])>
		SHA-256: 2909f3be959da3f4826d6b495b2636ebb66a6ed24ca276174095288d03932205
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoCorrected: void go()>
		SHA-256: ae9b9920076d0e43412b6a37805fa4a27c0f803ab4d09885023a562b1efff6c2
		Secure: true
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r3.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1: void key()>
		SHA-256: ee2f155c24b91978bff0d100e0c561c24698e590f1744d26c0e3f4cbc66e00db
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.SecretKey
		Statement: r4 = virtualinvoke r3.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC1: void go(java.lang.String,java.lang.String)>
		SHA-256: 1af98b052a55fa56b7915081f6b06c4ada8e5201bdb23ac5222f41090afb6e4
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7: void go()>
		SHA-256: 1549bd2c079f16d79981ac7e559c5e5b4ad759c145bc12692bd7c47cf9811907
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBECorrected: void key2()>
		SHA-256: efc1b7a3b259ae95e2d72bb57e8bbe088d5858bbf8ad344de88ceebb90679c8
		Secure: true
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer71)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashBBCase2: void main(java.lang.String[])>
		SHA-256: 672b88ba6bb6f9c54e29e58baf21e94dfe9e514759c67dec5737615b13e06b79
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase3: void go(java.lang.String)>
		SHA-256: ba3e2ebda176cc74f85b5431f6d9d63a2e0804cecd1aa84c48976d211b36d998
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, r2, varReplacer208, varReplacer209)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2: void go()>
		SHA-256: cb580ccea24fb71e8e2216b8e98a2c5c4bd9354435a9b5f173dafa83359c2485
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase3: void method1(java.lang.String)>
		SHA-256: cc7e964dd4e1505100fb77507e499e708814f6c1fa01973ac7cb71e6d55ca32
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.Crypto6: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 7bff5b9065c6cc204083a762c90fe177fec4aabaa8a126b75a08474b781824ef
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordCorrected: void key()>
		SHA-256: 97e578d87b6c7bbf5f29eb06b94c8d85b116d8e2d001983d03e879d2e854804c
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, i0)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABMC1: void go(int)>
		SHA-256: cdbd86e3700e94d9100808af649c2726ea441996039189794686b8bd04cfa3ca
		Secure: false
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r6.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r7, r3, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordCorrected: void key()>
		SHA-256: 3676f7757902290c834e20cfa4672f21e70cc623d0e2f4925440bd137e3be3b9
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, i0)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase1: void go(int)>
		SHA-256: d99d5eecbfc3910f2c9094cd1fce0731f1ea6cafb38f7cbecc46f3d5ff16025b
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase3: void method2(java.lang.String)>
		SHA-256: b3f4222a7301e5898d4e12950bbc1fb2e8107ced1a2e1d5e480e87921fdbb960
		Secure: false
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1: void key()>
		SHA-256: aab58ed242826001b90b7d08ca0f3e3692fb5f7110e1030b0888adea0fe99af
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10: void go()>
		SHA-256: 1f76c97b9668b9cf4f3ee4a8702ef748fbd8371e8f4fe5b936603d50724b7cfa
		Secure: false
	Object:
		Variable: r5
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto5: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 8db15b098bb1bfcea13a0e7e2e1433058297a516c6aa780c7a1ac0a3e94e01fa
		Secure: true
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase1: void go(java.lang.String)>
		SHA-256: b5af75f595be28873045515472875db3b6a047359476f0f21402b3948aa338e3
		Secure: false
	Object:
		Variable: $r16
		Type: java.security.SecureRandom
		Statement: specialinvoke $r16.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABHCase2: void main(java.lang.String[])>
		SHA-256: e23c932213e30fb7ada5c3bf3bb31458a8cd7e957834b32f805c19b23aa6433a
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase1: void go(java.lang.String)>
		SHA-256: 99ecdcd4bb0afd093d1e24b54144fec34542fd23c247d8e8cbcb73bac74b5432
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12: void method1(java.lang.String)>
		SHA-256: 6fe66c3ac1dc3673f7a344c0120a8d1d1d9488c3d69a1004f625a3d98c453b07
		Secure: false
	Object:
		Variable: r2
		Type: java.security.KeyStore
		Statement: r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordBBCase1: void go()>
		SHA-256: 6fa14c1b2d77a6ed4df2030455d5ba3927a930f8cc6a99ab62025f358df190b2
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto4: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 160c8faa35c01a055a0957c71a7cbe53267171d0e80f5bc12a3da34f49fbc85b
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase5: void go(java.lang.String)>
		SHA-256: ed016d56b71570c1981e61855d63ba8c3e088ee0998fee777a885380e23ec2d0
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>(byte[])>($r2)
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase6: void method2(byte)>
		SHA-256: 1a44ec38b7bf2bed164a2d57f1c5f4af8698b928d040584519c67d3d955cfeaf
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC4: void go(java.lang.String)>
		SHA-256: 1204ad30860ca7583f2bb80606c3e4d2c65a3f46a9cc45702539cfd17a697f2d
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer253)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2: void go()>
		SHA-256: 5777a16c6417ce8a8a746f242beb38e14e14f12be9e5dd67bdf226370cc60091
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashBBCase4: void main(java.lang.String[])>
		SHA-256: af0e64ee8cd33633bf7eb9e888100a0ce2ce5530113c347e14f834e8b5bc574f
		Secure: false
	Object:
		Variable: r3
		Type: byte[]
		Statement: virtualinvoke r2.<java.security.SecureRandom: void nextBytes(byte[])>(r3)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABHCase1: void key2()>
		SHA-256: eea684ae258238ff44edb8230b68112d398bc7175f0896c3658365d675d486ee
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.SecretKey
		Statement: r4 = virtualinvoke r3.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1: void go(byte[])>
		SHA-256: f06034710fbaac89fecd8d926c72416b48893868256b9e10b0fd2c9418b597f1
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r5)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8: void go()>
		SHA-256: 1982b6807336268711a81bca75b90c9b22cc1107b9ac0588137405977ee6a1f6
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABMC3: void go(java.lang.String,java.lang.String)>
		SHA-256: be6c8078f81471c361646bb2eea739653f18b3248d7c01b1f489d05c0b27002d
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, i0)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsABMC1: void key2(byte[],int)>
		SHA-256: 63f8864b5402036b1218d2d45733e2c5dc738e26b955fcb7ed25e21e91d3f681
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2: void go()>
		SHA-256: 919541ad0932fd56e46c81bb79243231ebb163db467e8550d5f22870855620d5
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer52)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5: void go()>
		SHA-256: 1b1bec487d53b4a858629baecac597ba5fe7d9bd1c5e7558917933054eb14118
		Secure: false
	Object:
		Variable: r3
		Type: java.security.MessageDigest
		Statement: r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r2)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABMC4: void go(java.lang.String,java.lang.String)>
		SHA-256: 52ef79045d9bd51c63d54546be7a2fec9e8d7c45559bca6bfe132258d2555660
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer171)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected: void main(java.lang.String[])>
		SHA-256: 98f4041c44ee1b89bda761ac6544e93f892c73111e7827c565fb469ea6ecbe1
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>(byte[])>($r2)
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase4: void go()>
		SHA-256: 74d5b5d053a74570194449f1215bac713aa2bbc5f4b7427074cf35c4320a671c
		Secure: true
	Object:
		Variable: r6
		Type: javax.crypto.Cipher
		Statement: r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer105)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2: void go(java.security.KeyPairGenerator,java.security.KeyPair)>
		SHA-256: d12719374750219cd1133274d1c0013920920bbf7dc6b852b9d8e30bfd948646
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto4: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: bb7af6811388eb730de6e882176e3dfc26eb35493cf2e58522c579eb27b1a52f
		Secure: false
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer70)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashBBCase1: void main(java.lang.String[])>
		SHA-256: 7dd39b7b8c8c00939c99a897fdf514a27e127fa504d3d65f219d9150bfb00694
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer280)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected: void go()>
		SHA-256: e80236fdc0623f2c999705a6a94b829791b1e4e07ec34951c533e8dabb4c8b0e
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase5: void go(java.lang.String)>
		SHA-256: 574837f63ad0a4489c99f7e35dcb19865a388bee22176099dd69f2dbfce236b0
		Secure: true
	Object:
		Variable: r3
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r3)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordCorrected: void key()>
		SHA-256: 88886ce0bfbde68da5e1fe5c27b01462961e4f379c2d035e51590dba5b81d683
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer276)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1: void go()>
		SHA-256: b44472010539f8fcf820d8d383d8bae1c0d390bfb30f953f67147082d9e485f2
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase4: void go(java.lang.String)>
		SHA-256: c5e3aa69ae4cd3f16d4796c6fee0a1f8f0a079bad6fe591508aa288f5a308c37
		Secure: false
	Object:
		Variable: $r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r15, varReplacer173)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected: void main(java.lang.String[])>
		SHA-256: ae3793b1ffc1ca886a4c54b97d3e7be4423309d7d65e72490e58368d42a02667
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2: void go(java.lang.String)>
		SHA-256: a5d67583084dce74794fa3b631aeb26f19d69f42c86dcbe517ee5faeae7c8bef
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase9: void go(java.lang.String)>
		SHA-256: b9a86b5876c5bb1ae88033c32970c7c395882a7ea3df45d31419eb3d5631c3b3
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsCorrected: void key2()>
		SHA-256: 79e135764d352eac28353d77df764918f82b307797296f933e4802a474ba5693
		Secure: true
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r3.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase1: void go(java.lang.String)>
		SHA-256: 8692c452993544c751efc6db8d429230d146d861e85bd2b6cd1d00003da4f98e
		Secure: true
	Object:
		Variable: r5
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto6: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: ee9ddd4f9c505009815c9d3bec599f73f3bfbcaa52a6ef4c4c5775c11a558e61
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer91)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1: void go()>
		SHA-256: 38973b3056d47597d19861032d1293e1b832c191dd905b29bbed193026127188
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r7.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r4)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1: void go()>
		SHA-256: fd83cd57fff222224b7bdec64c8c5363369581e6f1456c6ed9eaf1e44561255d
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2: void go(java.lang.String)>
		SHA-256: 41fb3cce4d950008bb832f8c0574fd58bb4e76bb2ca852a4f88002b0416250d5
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.Crypto3: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 615ccd58ca5f1e2f2b4a737069c0901ac2ff67ea310aafcb5456a3abefc22a4d
		Secure: true
	Object:
		Variable: r1
		Type: java.security.KeyPairGenerator
		Statement: r1 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer100)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1: void go(int)>
		SHA-256: e6d62cb383caefafb6f17e644b76ec29a145f9137c3c03b8477095edea296ebd
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r3.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, varReplacer293)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsBBCase1: void key2()>
		SHA-256: 4ffffdb6e799b87eeb13fece737fbe8d35cb5cde4a0ed9b7727d082882575707
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1: void go()>
		SHA-256: e81308e0e480b5061d843d6b06e9973f48740784196f7ed9ad645307683f5110
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)
>		Method: <org.cryptoapi.bench.brokencrypto.Crypto3: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 26ccc3e65886ceb1cb94c164ae7eb27a02232b74411ba7ff13cd93408ca3af1
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEBBCase1: void key2()>
		SHA-256: 3154eeef73e95930a5c837ef3024bbfa779892da89633d31e52bfb344834550d
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer84)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABMC1: void go(java.lang.String)>
		SHA-256: 7035d7242a6c0c124a07e770f82e550502a66eade23901068aa65d13f592320e
		Secure: true
	Object:
		Variable: varReplacer148
		Type: java.lang.String
		Statement: specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r12, varReplacer148)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABHCase2: void main(java.lang.String[])>
		SHA-256: b06a9ac2d62560530b98737cbe8bf6419d2fdfafce417789af58b4a7f73e6ae3
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3: void method2(byte[])>
		SHA-256: eb41bb7cf96dc9dc0a5de3f03634a1d7148b8f53c34f0796c81cedd070dc3f46
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABHCase1: void main(java.lang.String[])>
		SHA-256: 5b587fc5aa004dda3dab172c69f6d7193e5ea06c5e24e63a6c298a7e213cf8d1
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase5: void method2(byte[])>
		SHA-256: 2d98f100b33227ee91247a3de8e61e67d73a81303e4068b0f3e10fcb3f9dcc80
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1: void go()>
		SHA-256: 86c415856de86486c4197a473864f71b538179106747c25992e64aa1e42e9aa2
		Secure: true
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1: void go(java.lang.String,java.lang.String)>
		SHA-256: 330ecd50e2614391a443b11a27dbcf63af24512bf9be60e4f1a4801ebaba2a1f
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer274)
		Method: <org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1: void method1(byte[])>
		SHA-256: 1aa9805c8d6592fe58a6d94ff57be408cf60387096b06432e26d9a31320daf6e
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.ecbcrypto.CryptoECB1: void method1(java.lang.String)>
		SHA-256: f28a6239d7a273690630abffcf7f97d1347e795c6e2a3fbac0b8bebefeb94283
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.CryptoPBEIteration1: void method1(int)>
		SHA-256: 8b753168109c3ed4e7d7385203b082ad8d7bff9a9ac9338ebe0b8cd360910914
		Secure: true
	Object:
		Variable: r4
		Type: java.security.KeyStore
		Statement: r4 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABHCase2: void go()>
		SHA-256: 67bb1cee4f77e3c10c06272c25388a161696016e89a865c1e7e55fcf3d9bd0e1
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.CryptoHash1: void encrypt(java.lang.String,java.lang.String)>
		SHA-256: 78bf7afbfac368012a2b639675e07836bb1193dd8098ccda17791145b81fabd7
		Secure: true
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase8: void go(java.lang.String)>
		SHA-256: e86c9089b6daf94f60e87d9ace22c89e2f68c9c2d9b20aabf337e92b188b481f
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase2: void go(java.lang.String,java.lang.String)>
		SHA-256: 9ce9703fad4a6f13488fbbc6237ae97535b0b0cef7df32830a6044f2f776ea0f
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer90)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1: void go()>
		SHA-256: ba4cc7c4de38036f34af34608599cf49e1816b2dd1f1e4ee17170e2eddd4a51b
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer47)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3: void go()>
		SHA-256: 2ac39065ed4e515411306549148c7fa2bb0beac3d015a2ab0f53bc5509505de8
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase14: void method1(java.lang.String)>
		SHA-256: 1a06fdae3c5e34581f287856170543a8f13bafb8fb4cc6880004bd801479294c
		Secure: false
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase2: void key(java.lang.String)>
		SHA-256: 37a4b354308799bcdab9afe973e8c1cee3c5964872bd93a55485baa69f4c9da4
		Secure: false
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase4: void go(java.lang.String,java.lang.String)>
		SHA-256: 333b02871b7ebd839efdadc83e43cf1354aa74e71fc499396bcabf7231b06da1
		Secure: false
	Object:
		Variable: varReplacer141
		Type: java.lang.String
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r8, varReplacer141)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABHCase1: void main(java.lang.String[])>
		SHA-256: df229908b811b3d8482c388c90ceb72ffa15fafe0e906da2dcbcc92962b6a24c
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase8: void go(java.lang.String)>
		SHA-256: 106b0752f66186711422d34ae08561c9286bda1651e32d0577b58d1c42160335
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase1: void go(java.lang.String)>
		SHA-256: c9d80f1f46c888f9b25311309c74358d3f60a9beab9fede15e93e95735fcb462
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer87)
		Method: <org.cryptoapi.bench.ecbcrypto.CryptoECB1: void method1(java.lang.String)>
		SHA-256: 154c5b87180c079bad9743c8ffcb7ca57b1c1e3a74b7700809da9983b1e879a6
		Secure: true
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer269)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1: void go(byte[])>
		SHA-256: 19e213d2bde30eae87245c8a90267a083275a0d085c7c09a6e2369a6b9e3d0d0
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC5: void go(java.lang.String)>
		SHA-256: 751c0ac49cd460e33d5426e0f2f6d4256669e6d4bef13b23a5b5fae41e921bc4
		Secure: false
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase7: void go(java.lang.String)>
		SHA-256: a24755b85bd565744b9398fb39516fe6d875e7acd726fee49216385ede1901c0
		Secure: false
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase9: void method1(java.lang.String,java.lang.String)>
		SHA-256: caba7bc86c27bc9daa07b28f5bddcc68664ee9722333b1fd4612fd5faf16e585
		Secure: false
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer74)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashCorrected: void main(java.lang.String[])>
		SHA-256: 86fe128afb9d0f123a8f3dbcf5caa2b1acbac76243b181f79964586dd77c2bde
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1: void key()>
		SHA-256: d2825b80dbbafcd7b84749aac1abeb98ea5b65cba771382cf882243fb8f7a3c7
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer44)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2: void go()>
		SHA-256: ee4852810902579a4a05631052fad683609029890ab74ee00dbdf106bf341166
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer50)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4: void go()>
		SHA-256: 73a923f7d9f1504b3a6ca5a42f6fd7b0662ac47eeb7ff5823b71f0979a9873c4
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3: void go()>
		SHA-256: 57aebccb0250ab3bead8a38cb6139a9ae4a9c601f149e15df2e5dab8eab803cd
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r4, varReplacer158)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase3: void method2(java.lang.String)>
		SHA-256: c550512b371f13800f60a934175ede331b61f2d91e9bd9471088faab3badec64
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABMC2: void go(java.lang.String,java.lang.String)>
		SHA-256: 3d4180ca50b37d2564895f77881932d07c48bf662e0f6fea0584a2a395f407c6
		Secure: false
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, r1, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.CryptoPredictablePBE: void method1(java.lang.String)>
		SHA-256: 9f1d0fec2605ca6f139855c7a8b6d6c46ac09312c0c746fda23416fa551f095c
		Secure: false
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase2: void go(java.lang.String,java.lang.String)>
		SHA-256: 9a201b557bcfdf2be22ff2ef73eb4224b305a858ea44a7b611e4da1b698c253b
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected: void go()>
		SHA-256: 4c3d7e8446c02a124da638fc9b809431552d9a5406bfe31a7d2b7071705f2e46
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase14: void method1(java.lang.String)>
		SHA-256: e151465ac7a8adf2d9c3f2afac7bd662c4518bfacb4f2a685f35f0f5952b4c8
		Secure: false
	Object:
		Variable: $r10
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r10.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r3, i0)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABHCase1: void key2()>
		SHA-256: 45a6b6306b3365c9fbace4881b2ce08c1f9ffb28716fb2f9e38a01a8c8f6d40
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase2: void key(java.lang.String)>
		SHA-256: 7320a9b4c8839493586616888ff19f6e7248db405da27f81fddae63211779cff
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto2: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 5b0b7e43f2ba3ddd93f354b7730c7756243e814eb498cab62914a019a052ff00
		Secure: false
	Object:
		Variable: r3
		Type: java.security.MessageDigest
		Statement: r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r2)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABMC2: void go(java.lang.String,java.lang.String)>
		SHA-256: dfa20d81a9eaebd9b18ffaf6b17b52f979abff10a2e564501874137605b9c212
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashBBCase1: void main(java.lang.String[])>
		SHA-256: a5a9df0929d35ab86257e463bf7e81824e4bf6a99f949d7e31e32121f4d27494
		Secure: false
	Object:
		Variable: r5
		Type: byte[]
		Statement: virtualinvoke r4.<java.security.SecureRandom: void nextBytes(byte[])>(r5)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected: void go()>
		SHA-256: 190b1eba08aa675bab008bbc01771d2494a76413faea06b2755ab8a4d5ace780
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer262)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2: void go()>
		SHA-256: 3b14a1facb73f7663adc5b7bfaba03c713fc0b686b1a840cda6a7f5499648299
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8: void go()>
		SHA-256: f8dd9a0ab426bc3b3164cd72f373af09258078363d531fc9bfa57a26a07bfebb
		Secure: true
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)
		Method: <org.cryptoapi.bench.brokenhash.CryptoHash4: void encrypt(java.lang.String,java.lang.String)>
		SHA-256: d57652cce652dbdd0f26cf285332d0220cc96049d1cb2a13c2b8ce7a07382dfd
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2: void go()>
		SHA-256: ad8fba0910f5981961039a8ae0ddd9ca4688d23e56c6cc2edec97076cfee108b
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.KeyGenerator
		Statement: r3 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r2)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1: void go(java.lang.String,java.lang.String)>
		SHA-256: ad407472dc08503be26a36ecdc2b0a1913b6ee6bd08e55e5959f05c3650c7db0
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashBBCase3: void main(java.lang.String[])>
		SHA-256: 6379af8e4c15f3f5f131d625ae330ece4dc03509d9b1eb022bebfc4bf7fdd3d8
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5: void go()>
		SHA-256: d12a1c6b4d4245706ff9813011202d50c302a16d6207f0a6e651e1fd984a9ced
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase4: void go(java.lang.String)>
		SHA-256: 3489218b9fe3ba9cfa2e685e0c6c65554e4d9f59ad1f2e35dc24722a3355d093
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC4: void go(java.lang.String)>
		SHA-256: bd89107993143482ada2bd1366daa67d2d7ea79e056e4c660be9c965eefe5fb1
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer51)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4: void go()>
		SHA-256: 104d873dd65a6fdd086ea521b43fe6affae5657025795454b33c7b030be8b910
		Secure: false
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase1: void go(java.lang.String,java.lang.String)>
		SHA-256: 3df7a52b9ccdbc9cab1e6be7d2574e865431a048c19778b1361975761593a0e7
		Secure: false
	Object:
		Variable: $r15
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r15.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r7)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2: void go()>
		SHA-256: a2da4f6548be812bb6d4fcf70dcfff15fc4f61c4222f6e8d6e650db746723252
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto2: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 189419399682cc63a5d5d7def9a888b119ebff67f8efe33a2bf208bf0a816671
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC3: void go(java.lang.String)>
		SHA-256: 7c716e53fb7bf5a62f8a658df8ec6f7623b612d372c23784daf5647427938eb6
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, varReplacer160)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABMC1: void go(java.lang.String)>
		SHA-256: b20841934fdb576a2b4d1199738df4b4912c608e356134cd3ec1596680688af7
		Secure: false
	Object:
		Variable: $r10
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r12, varReplacer148)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABHCase2: void main(java.lang.String[])>
		SHA-256: aa8b2f5a93b30218364b6f8a4a598b5db2b7e04369203a28123ed0f8321515d
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsCorrected: void main(java.lang.String[])>
		SHA-256: ec0145b82d6dfeb10bcd1e2c84cbf3ed9abcf23c87ad61ecd5e0911acddfd016
		Secure: true
	Object:
		Variable: r3
		Type: java.security.MessageDigest
		Statement: r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r2)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABMC3: void go(java.lang.String,java.lang.String)>
		SHA-256: 694890cf44285a2515ddd522d3393d6f6bf373626b9c9f208a46f670eea5b8a5
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase15: void method1(java.lang.String)>
		SHA-256: fdb89adef7e820b83a69c948bc53388cc792b1285cb00c88d4fd2cfe933be607
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer278)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected: void go()>
		SHA-256: 7612fdedb0ad2a9286f700b20917fccd1864364d88d0f770821f89ae37fb6cd8
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer294)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsCorrected: void key2()>
		SHA-256: 709c90383729a5052d4c51dc6115453ce4994eb7b4e66c6cdc1611d5bf5ebe50
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12: void method1(java.lang.String)>
		SHA-256: a19a90a9212d0467bc89fc0b3c1af96e5ea1b38147d20c18a312d0dd23fc55c
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r5)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10: void go()>
		SHA-256: f172617c0766f076fdb99129e24cc867f2abffa66c598f0c7623596313ac7df2
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.KeyGenerator
		Statement: r3 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r2)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC1: void go(java.lang.String,java.lang.String)>
		SHA-256: e3717262e8cc33b22a62f64b73f689a5795606a6aa619febe4da4c17db613bc5
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r2, i0)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsABICase2: void key2(int)>
		SHA-256: df87c2dd95d2d6ba3719672aff51ab8a6e2da33f8a097aa351267f2a5333aa02
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.SecretKey
		Statement: r4 = virtualinvoke r3.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1: void go(byte[])>
		SHA-256: f8464f84b3cc7c78a20c1ca638ee38271b1b5063c0fd4c1d745f6746dc5cfad3
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase4: void go(java.lang.String,java.lang.String)>
		SHA-256: 5c6dcce3eab4c7288bd6310f8e9bfe5cefca0656f78b9da8ecb562299476f499
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r2)
		Method: <org.cryptoapi.bench.predictablecryptographickey.Crypto: void <init>(java.lang.String)>
		SHA-256: 51384c72f0bac54a80f3f29c25ed17c1549cdc79ec5ce427651c67fd8ca9061d
		Secure: false
	Object:
		Variable: $r11
		Type: byte[]
		Statement: $r12 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r11)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected: void main(java.lang.String[])>
		SHA-256: 98615894e91439a8a3d6669e3f6e7583a20ed11800d550056b6a735aeb44a5dd
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r7.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r4)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1: void go()>
		SHA-256: ec884ba9c09fedcb23d855214a417ae4d79f71f14642947b2cc7da0cdf6a5dc4
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase9: void go(java.lang.String)>
		SHA-256: e2c00539aadd3a7c381215c7192d9ad1bc14e2dd51afdeb3433250815d141470
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase3: void go(java.lang.String)>
		SHA-256: 374fdfd8c775168c8300042599570bdb73b552b73ddfa9b3342544897c00a2be
		Secure: false
	Object:
		Variable: varReplacer169
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, varReplacer169)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyBBCase1: void main(java.lang.String[])>
		SHA-256: ccf300a5b975af784c48a388db224317efae8fa6f1da1bdfc63862ff83fd4b30
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC5: void go(java.lang.String)>
		SHA-256: 770cc402937a1c661c03c2dc91aa89e39c5e7b695bdc7c44885d227106ac56d0
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer45)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2: void go()>
		SHA-256: ac1130f5b5bf2b1a296a35fa655bb0e5f07a61204c6962545bb6e6b26c513d55
		Secure: false
	Object:
		Variable: r1
		Type: java.security.KeyPair
		Statement: r1 = virtualinvoke r0.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3: void method1(int)>
		SHA-256: 460d11ebdf6684fef0abd11ee9d3bec6330ed31afe6c1dee6c0affedae3a94a
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase1: void go(int)>
		SHA-256: 1a81c025705cd8c210fda52dca97e804acd5bcf7f73fdb7d3743f471453fa47e
		Secure: true
	Object:
		Variable: r1
		Type: java.security.KeyPairGenerator
		Statement: r1 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer117)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1: void go(int)>
		SHA-256: e03d856acf3c06a31977fa0ad51050455051da86893943cd85f6d06a2389ee37
		Secure: false
	Object:
		Variable: r3
		Type: java.security.KeyPair
		Statement: r3 = virtualinvoke r2.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2: void main(java.lang.String[])>
		SHA-256: e905a33652e104f8784e36f5468f00eefb0dd65399146c9e0cd5599a2088ea3d
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto5: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: dadddcde4307577c46c99c85486a40b4fac43ccb7a7e44787a4cf3068900b0a3
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r5)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5: void go()>
		SHA-256: 51772b7eb5650ef30a94191eadbbdecd022bd74a66d2131d39a74e8e76201121
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1: void method1(byte[])>
		SHA-256: 989b0ea18fe024cbcd96d97292be1eda777ba46fc4220a4a44fe7a9095caad1b
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11: void method1(java.lang.String,java.lang.String)>
		SHA-256: 8cc98e92fcb6c1185a8ab1bb0f51b8562bfba2624d2ff75eec67711fd212f6ba
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC3: void go(java.lang.String)>
		SHA-256: f1614cd3d7e11aadadf23e16a76ce34d523ffa8594ecfe6f93bc8a365023a7db
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r5)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6: void go()>
		SHA-256: 9d0a4923d2c81c1e239a0ddc216c98fc6d829f55706d22d67ac8a4c09d6a9f41
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.SecretKey
		Statement: r4 = virtualinvoke r3.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1: void go(java.lang.String,java.lang.String)>
		SHA-256: 742829c13bb26e9f2917be9bc69f6b9d5a961bbbbbded181ccc4c12c3fcd2e07
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6: void go()>
		SHA-256: ae0a92d07fc658725f702740ac9a86ecc2c2fb83f6fa65bcc278598d47c7a697
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto3: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: cda5fd47ab495598045c54405b5c33800b0423fcd30ad12be790409963f4dc7b
		Secure: false
	Object:
		Variable: $r5
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r11, $r5)
		Method: <org.cryptoapi.bench.predictablecryptographickey.Crypto: byte[] method1(java.lang.String,java.lang.String)>
		SHA-256: f4363715d9512e8134472d80c02951acb8d80dd0e6ebbeb7e3d3a2ab859c968a
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4: void go()>
		SHA-256: 12709fab2e6ef67b1b9970e0a618b72d41ae35e135025a37eb9729a294226c2d
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto6: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 577883757a8d66417e747be38445492fe1d015ee7bedff697eafd2634c1de98f
		Secure: false
	Object:
		Variable: r5
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto3: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: b1377f01c3b3a0c1786978e359ac599c97359e6043cf1f005a6855430600ee5f
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase12: void method1(java.lang.String,java.lang.String)>
		SHA-256: e64cadeafd2fc36763b796d250d9f50679bbf0b313c80680e7d8ec0047c43a8d
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBECorrected: void key2()>
		SHA-256: 9db8e09f36c50f1fb7edfb1a54d204400569830e90ece88afaf93134dff70643
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer40)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1: void go()>
		SHA-256: 4d2087109551299ff886e741bd5f21b386f31a296e7929afaf6ec8a7029dcf05
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r5)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected: void go()>
		SHA-256: 20caaa7fc368a59964dc95ef17fc4611d769e09bd94edba796c34d7e83fe95c7
		Secure: true
	Object:
		Variable: r2
		Type: java.security.KeyPair
		Statement: r2 = virtualinvoke r1.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1: void go(int)>
		SHA-256: 518924391f624e65104d19f4bfa2b0d0c9d0784ae33fa86c4dbbf5b1070ff9af
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r4)
		Method: <org.cryptoapi.bench.ecbcrypto.CryptoECB1: void method1(java.lang.String)>
		SHA-256: 93b7326c92ffbd8fb66c7c6fe6181f45304c766fa9c06f7ad64fc349c7c53c05
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer272)
		Method: <org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1: void method1(byte[])>
		SHA-256: bbb8458228018f1c676c931a07dc641bfa3c60c1b0e3a5718e40c8ea25899d67
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase1: void go(java.lang.String)>
		SHA-256: 8a6790b3d5baccdcd925f0727cc62d3112e21072984cb70cc598c64a704624c3
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEBBCase1: void key2()>
		SHA-256: 9f46a22e2a1fb5a12978a9afb012de05f3a63c1b466f285221a06a675b1c2212
		Secure: true
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer114)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3: void method1(int)>
		SHA-256: 9f6067a7eee098b8f4b0db0fface33111f6ca374a3ff3c03d4b31f8f99fb7a51
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, varReplacer169)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyBBCase1: void main(java.lang.String[])>
		SHA-256: 77cbff4e61bb0e5e17794c40eb04d195c6bcf8e34a73c20db2d52f951793dec3
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase3: void go()>
		SHA-256: 89695aefa29faac6137b49a929d1650e0209d6d4187181e8c0f30d5aed46fefa
		Secure: true
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABMC1: void go(java.lang.String,java.lang.String)>
		SHA-256: 972903bf40f0518ba4231c30b8c4256bf39003ae2c684f74f2f106e4a93bb3e2
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5: void go()>
		SHA-256: be2a9895d6c8cdbcb7a6494295c64eff618d41ac8117c81d54c7f8d764c50d5
		Secure: false
	Object:
		Variable: r2
		Type: java.security.KeyPairGenerator
		Statement: r2 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer110)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2: void main(java.lang.String[])>
		SHA-256: 3b556aa7356fafe3904cf3e35d4690fdef8eab459b1fe06b015a6d1d53547c93
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: virtualinvoke r2.<java.security.SecureRandom: void nextBytes(byte[])>(r1)
		Method: <org.cryptoapi.bench.predictablepbepassword.CryptoPredictablePBE: void method1(java.lang.String)>
		SHA-256: 640a40a7a36b7ae61e01d55ca618ca529cd702be796d8c9968fb0cc9164c7cdf
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase1: void go(byte[])>
		SHA-256: da272843cd966e34289df6bd997cc3274b8f655e96e434528fbdc5589245906
		Secure: true
	Object:
		Variable: r2
		Type: java.security.KeyPair
		Statement: r2 = virtualinvoke r1.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1: void go(int)>
		SHA-256: 8032a9b25863d71ae5b001173d23562c3b22be4d70e83ab1c20a6e61d11c48ea
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABMC4: void go(java.lang.String,java.lang.String)>
		SHA-256: f5d45e118ca87cd21c8978c755359fa22cbc51e887aed6c3bd552f714b42628c
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer127)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1: void go()>
		SHA-256: 30ddb901b36fef11853edbfd066a45281a55d18e5259f9a9328ff2102eaa443
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, i0)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase3: void method1(int,java.security.SecureRandom,javax.crypto.spec.PBEParameterSpec)>
		SHA-256: 47a05889a4990a69142258b598334e49d1fe2e602f19ea60d1174f4be2f92ee
		Secure: false
	Object:
		Variable: r2
		Type: java.security.KeyStore
		Statement: r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.predictablekeystorepassword.CryptoPredictableKeyStorePassword1: void method1(java.lang.String)>
		SHA-256: 2cb48526ac1735e89af5fd5b9e6ef6ffdba47d11f58949e308873bd29e5f7f9e
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.CryptoHash3: void encrypt(java.lang.String,java.lang.String)>
		SHA-256: 26f0582f9c3cbd58a6817d98c971c7f8c888f6badc164713cf3b16703e099451
		Secure: false
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMC1: void key(java.lang.String)>
		SHA-256: 44bf40596994c6e74796d8ceb937de632bb242cbce0743e55a844b551a3f1955
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, i1)
		Method: <org.cryptoapi.bench.pbeiteration.CryptoPBEIteration1: void method1(int)>
		SHA-256: ce15797ad4211f62cba9ad5d30a964f9bf385ece7723e0f2e2e7666beaa59ca
		Secure: true
	Object:
		Variable: varReplacer209
		Type: int
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, r2, varReplacer208, varReplacer209)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2: void go()>
		SHA-256: eafcf036e8419509b2e6839b1867a26d53d55f3dd857ce5248724c5ff74b92de
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: specialinvoke $r5.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2: void key()>
		SHA-256: 11faa4f55d5e54bcf8a38ebd78e92fdfb2c34484c979eb80010eeeac743c043c
		Secure: true
	Object:
		Variable: varReplacer173
		Type: java.lang.String
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r15, varReplacer173)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected: void main(java.lang.String[])>
		SHA-256: 6ccf7631ec9526ce823599917fcebbfc5ccadbfe13a98c856363223a3cf122cb
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase7: void go(java.lang.String)>
		SHA-256: 9ba875f29322e02e43122bbbf03f75a2e035f283b083d6c47eccc3b72b1ad3d
		Secure: true
	Object:
		Variable: varReplacer158
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r4, varReplacer158)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase3: void method2(java.lang.String)>
		SHA-256: ab85efbddcb5c5a483f36b4de9ac1994a5e4b4148b724efa1fde72ff45e61af4
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer57)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoCorrected: void go()>
		SHA-256: 201be496a99d256309998137f76b3f5afe934997421c78b91e8cecbbce56b4d5
		Secure: true
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto2: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: afa6097b7d35f1805bf48bffc5716f1c292271d15865e668d0c45348ca64cd22
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r3, varReplacer292)
		Method: <org.cryptoapi.bench.staticsalts.CryptoStaticSalt1: void method1(byte[])>
		SHA-256: 1798d1550bf5860a0d3be1062d2ec459f41e7c8161cce413fd44fd7173110b51
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase1: void go(int)>
		SHA-256: b30b4877ea42581d823bd46b0b36eec2964d66cfc9b33c9e821b0d908b5e6cbc
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r6.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>(r1, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2: void key()>
		SHA-256: 4de65d487850098a69f08f9baf36bb39d2e31bb1cf114d7c5f39f552f6bb8de1
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto5: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 297b643091bc1b1b9fca8d2a69820f9883ddf294a440823e96179210f45c151f
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer252)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2: void go()>
		SHA-256: cef3b929f04164ccdd5e1c6f783f00efbc3d98cf851cb90282d75bf283247b6f
		Secure: true
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase3: void method2(java.lang.String)>
		SHA-256: d76c9661fb2344d731da6f40b073c93ee557590a0043ffdc1bcb8e8eda429343
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r1)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1: void go(byte[])>
		SHA-256: 67b4c0129f639509eb652c140065500dcd6188ceea7697126d473978300f62de
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase15: void method1(java.lang.String)>
		SHA-256: c60184b26682b6511441d8460452f8120c7c6fe7d13df0b0f684b82be2ebbc4b
		Secure: false
	Object:
		Variable: varReplacer160
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, varReplacer160)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABMC1: void go(java.lang.String)>
		SHA-256: 7143d76e956342f15400a7829a34ff872c114fe4954260bf84d777b4d7a1be4a
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r6)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2: void go()>
		SHA-256: c4904876af1a3cc38f5434bb2ad3b48f77c4aa37cd92e58c507486328d1c1071
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABMC1: void go(java.lang.String)>
		SHA-256: db9e0cf32d4a6472fb5dbe079ef18c4c680d86f38814866a7e0f59cad751c140
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer138)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBECorrected: void key2()>
		SHA-256: 208b83d97c4db7dd8df4d7b59a0d7e999ea66462f3a9ce6d2445ab7a627d834a
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer54)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5: void go()>
		SHA-256: 1f2117c5311d2a89a1fbe400ccc2cc5eb4fc932371453db2b83862481c39b474
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsCorrected: void key2()>
		SHA-256: a2d36e20b64d7cc1881d592115b2a2a8c050039da95ce90e33125e53e148af0
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r4, varReplacer153)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase1: void go(java.lang.String)>
		SHA-256: d4b15fc739d9aa4f6b3977282ff171473c7e84527db160e30af5dc82c1eb284e
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC2: void go(java.lang.String)>
		SHA-256: ac8796ee2bdda3977f9beeea167ed87f2f4d272135546dcdaaef1a478ec9cef6
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashBBCase2: void main(java.lang.String[])>
		SHA-256: 60efe3af835909a683dd036889e40d3bff0500faca34215937ca5044a302f740
		Secure: false
	Object:
		Variable: varReplacer156
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, varReplacer156)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase2: void go()>
		SHA-256: aca570d924afe467826e3470dc5affd03eb4c5890a84f3a3a86f4f0216cd170a
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r3.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMC1: void key(java.lang.String)>
		SHA-256: 50b4405286b48634ef065cd2ba6cda95037c59e1f2ec6c7957b63e4f1c487094
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer81)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2: void go()>
		SHA-256: 77fd9f0434fbe6b168b249e371002df1e210f593b2d182f31d92efd880d84e68
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer265)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3: void method2(byte[])>
		SHA-256: bf0b12c86f7be39d7e82761547924f19ea5b6ec4c68e760f4f68b2f123833cff
		Secure: true
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)
		Method: <org.cryptoapi.bench.brokenhash.CryptoHash1: void encrypt(java.lang.String,java.lang.String)>
		SHA-256: 41813d5a7dcb1743ef01882d4b0710439e10fecd52f121da500f3e2b26956431
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11: void method1(java.lang.String,java.lang.String)>
		SHA-256: 625497398a38bc4095b05517d85aae39d55853ef5b69c8dc58f8034796450e0a
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r11, $r5)
		Method: <org.cryptoapi.bench.predictablecryptographickey.Crypto: byte[] method1(java.lang.String,java.lang.String)>
		SHA-256: a4f30c445a9b325a29c10bbf9dd31ee8ecd675f53d6c9238009290400710d92
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r3.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase3: void method2(java.lang.String)>
		SHA-256: 4d69bc2a7ebde438f856dbf364872c8876f61b829cc66a8985bcf569a4ea3388
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABMC1: void go(int)>
		SHA-256: 3e258c082aa1b7409c3b568044abd8582dfb2a7cf1780d8e88baa7d6d46a1fbb
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10: void go()>
		SHA-256: a256fe5d7ce698762016af0f738f8e7568a3d9010b23d77c56dda2d6d0dc6fd5
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer41)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1: void go()>
		SHA-256: 82b094d1ea97cdb0b36dd07dd21797083352cbda022e1ffce5f0eb121257ec17
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase15: void method1(java.lang.String)>
		SHA-256: 30cac82c09bfce9be60cab9cd17e735a8e4726e0751b135cc9e8df0bd130b2bc
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, i0)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsABICase1: void key2(byte[],int)>
		SHA-256: 9b5fedb206dbed783695687351f7ac0e266051fcfdb22d6d47d33b1c6bbaa1c
		Secure: false
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer72)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashBBCase3: void main(java.lang.String[])>
		SHA-256: 1da9377a68772bdd95649b98a721397834a3659ac257f763a82f1d610896fe1b
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase1: void go(java.lang.String)>
		SHA-256: dd873e096518be79d94ba5f884f81eaf047aeffdcf0a2df24cbb0496c74f5b48
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto5: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 69364014d084d474d2bfe5068a4228344bf5cd5a014eb1dd64a46c82334acfc4
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>(byte[])>($r3)
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABMC2: void go(byte)>
		SHA-256: 35c6015fcf7989feeccadddee1380015468d34c7673c7556a5353b61533c0296
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.Crypto4: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 9f856f72fc60dfd973ef2b5966212bb4164ee4e4245f80df552453ee83eb402e
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1: void go()>
		SHA-256: d12cdb51f6190a47a8537a350ab71a00756d866e49a292889bc09521951f421b
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1: void key()>
		SHA-256: 96f4a296a8feb626321bff096e168e7e6dfb3a60936562631875987710ee81d1
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase3: void main(java.lang.String[])>
		SHA-256: 21a636579d4ca6d181053f1c1d677d2ecee9f0c58025d1dfa5993d3d6d8497f9
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.Cipher
		Statement: r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer112)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3: void method1(int)>
		SHA-256: 96bec4646674ffab51ae11a35dc2f986257e3862ec6e0ce58ce0978c1ed69dfd
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer137)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEBBCase1: void key2()>
		SHA-256: fc30006eb72211e0e7dbf08bdd3d6609c88cba4abaf5a6be78f7f9b5a5bae4dc
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>(byte[])>($r3)
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsBBCase2: void main(java.lang.String[])>
		SHA-256: 9324d02a0e1ebd005f164ad62319266994b62570999cabeceea6bebecac66e02
		Secure: true
	Object:
		Variable: r0
		Type: java.security.KeyPairGenerator
		Statement: r0 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer115)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3: void method1(int)>
		SHA-256: e12dc0fcbd2fa1bf29250f9d32094eb2f71488a6b4b460b4546ff8a41eb255c9
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer122)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1: void go(int)>
		SHA-256: 92069af181b8f48c0ac9501d1838c5880cb873a349cc795b3434fa510fe6b7ab
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r8, varReplacer141)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABHCase1: void main(java.lang.String[])>
		SHA-256: b7ffcbc5fdc4a635f1ec51ea008a7822a9c186025c564b3800fd6a1c4eaec944
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer246)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1: void go()>
		SHA-256: 9d1ddee9297b403488216ded5711d83732a0bc180accc2c7863159fee4726e6e
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.Crypto5: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 26bd6fd541cb791dd264e5671b3ac7fe9d9f8d9026f0f2d5df4818dae7692a13
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer55)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoCorrected: void go()>
		SHA-256: 3cc240c6906bf45feb3e1e3027b9c52f46a76069bdb120449ea117cbcddae190
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r1)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1: void go(byte[])>
		SHA-256: d1a5932a726b32af5966ca9d054677850c292e5e4fec6ec3896b2cd382455b3d
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.CryptoHash4: void encrypt(java.lang.String,java.lang.String)>
		SHA-256: 7a19c82c8741ce2173caab67bb6c4446be05951b58df9ad35c16d20aefc55ff0
		Secure: true
	Object:
		Variable: r5
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto2: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 87c833965ca91d8f8dc0741540b78ea35bd6e436bc342d726ba70c6619d1530e
		Secure: false
	Object:
		Variable: r1
		Type: java.security.KeyPairGenerator
		Statement: r1 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer126)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1: void go()>
		SHA-256: 186108a5a0242f896ee11470e0dc52f48981fe2004860f9a8769a1f12fcb1ac9
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto4: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 23ad87df13727298e24388a0191c05383eb7f2b00d1ec24f5b1dd8de7575d977
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer267)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3: void method2(byte[])>
		SHA-256: 7b6b0ef8a2405d53a7d818c9a9e16de2ac6a4ea3762592063d36798a19332d8d
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer46)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3: void go()>
		SHA-256: af7b731fd9fde292e1faf769955837bfc61b5189c1e3a4559fc6e58e3b7279e0
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.CryptoPredictablePBE: void method1(java.lang.String)>
		SHA-256: 3bea3f0c8897bb905972daaa82154c954287a357c0aa8fa073aeb936c443b77a
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r0)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3: void method2(byte[])>
		SHA-256: cb51c56857b073cf10541471c7b42aa800e1d95c1e9f4bf62133e97325592ee6
		Secure: false
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase10: void method1(java.lang.String,java.lang.String)>
		SHA-256: 159f8d584b1c83dfe5bcbf4f24b9ff6c7fa2b544277e16c67e1cc778deba7307
		Secure: false
	Object:
		Variable: r6
		Type: javax.crypto.Cipher
		Statement: r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer102)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1: void go(int)>
		SHA-256: c4d5c4d190b78b73ece771c4d19a8c2c1aeaf15a74196729dda85408c9345f67
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer243)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1: void go()>
		SHA-256: cd3309fc281d5fd140f4faec5b93f651f0f0408daa323f856da02d40f47aff25
		Secure: true
	Object:
		Variable: varReplacer153
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r4, varReplacer153)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase1: void go(java.lang.String)>
		SHA-256: 2554da2bdd35f46ce3478a7c1d638c810a73ef6a3ee7625601580e54021839fb
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC2: void go(java.lang.String)>
		SHA-256: 65a1e22783e76d26782a961ef944ea60603670e8f2fab0fabeeb7364ee5e59ef
		Secure: false
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase11: void method1(java.lang.String,java.lang.String)>
		SHA-256: 19a28e63ce653bd515c65685b7b571924f12673afb8e4aa6e786d416d94d2470
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r5)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2: void go()>
		SHA-256: 51cfe795f2ddf3c0626768238bad1e9113f037c9237159456c09d35a5b84d861
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.SecureRandom
		Statement: specialinvoke $r7.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected: void go()>
		SHA-256: e71c8383b1ab5a54a718eca099f37ef053aa98837e103854d0fd5f29c5370238
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2: void go()>
		SHA-256: da772c54c0bef5ebfa197dfa5c7a8067efc59b21c8f4bb8be23ca9f2a5e47535
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase9: void method1(java.lang.String,java.lang.String)>
		SHA-256: d6d4eea4f0aaac22b91935d040a2f1fb8666d9968a8df31354555b2409d5f49b
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase14: void method1(java.lang.String)>
		SHA-256: 2c1561a91f22b09c7b4d1cf5233ef276faed92b12dbb0c63c5cfcddb765d9737
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5: void go()>
		SHA-256: f5f5ea78ffffb5057baf5c515295dd4669182159afeade6fdf213794a3e730a9
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer106)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2: void go(java.security.KeyPairGenerator,java.security.KeyPair)>
		SHA-256: 954030c8908779065ef1cbba21922b5b56143026d7e9abc02035ae5cfd76b0b0
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2: void go()>
		SHA-256: 8d6820ae08a54ac0d7db0fa12ea2bddfe096a2a0305e036b78a0668a6bfefcd1
		Secure: true
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABMC1: void go(int)>
		SHA-256: e5e912fed5e44feaa6366a613c185da83c20f378ba5eaa78eea1709a034b853e
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC5: void go(java.lang.String)>
		SHA-256: 522788bd58e2cfa18ada629f01b6e36090842d7c7325d9411025c23b17e4d95d
		Secure: false
	Object:
		Variable: $r9
		Type: java.security.SecureRandom
		Statement: specialinvoke $r9.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABHCase1: void key2()>
		SHA-256: 13b194c1942f4893563d9d30b846ed186493fa4ed75c1d6ef4aa1d31da4a38b8
		Secure: true
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2: void go()>
		SHA-256: dd9fb115651b728f52ef37369a4bf3d2077c361537df3d6468d704bea5b41670
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, $i0)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase2: void key2()>
		SHA-256: 788f9173d1d53a948da75aba0a9c08a9ea055e659aa6ae191d57a9c1f13cd47a
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.KeyGenerator
		Statement: r3 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer259)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1: void go(byte[])>
		SHA-256: f67d882e1ba8092dbad81ce818f4e4b132020bcb45d092098d866ed4a34aec02
		Secure: true
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r6.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>(r1, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2: void key()>
		SHA-256: 8cf5ee04e4dfa186368182244bf72063525f7090646fbc6a21aa751cab2eab68
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase13: void method1(java.lang.String)>
		SHA-256: 165e5e74c3a780737221b2e5efad079f03d56e4586891fe960582ef8f8493c9e
		Secure: false
	Object:
		Variable: r2
		Type: java.security.KeyStore
		Statement: r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase2: void go()>
		SHA-256: 683a3619f2d13a9ad642ce603e5e410bab89bad872c0a43a2b878c42d5d94b7c
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.untrustedprng.UntrustedPRNGCorrected: void main(java.lang.String[])>
		SHA-256: 93dfcd4c98650eefa05fc422b0cdc9917dc6055f9703c5a61f5f1c2ef5c9c1fb
		Secure: true
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.CryptoHash2: void encrypt(java.lang.String,java.lang.String)>
		SHA-256: 2413bbeab51ea4a52e5db44ca4b59138915da1b937cb628eaec1ed60ed7a2ad6
		Secure: false
	Object:
		Variable: $r12
		Type: byte[]
		Statement: $r12 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r11)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected: void main(java.lang.String[])>
		SHA-256: c21f895fbc997bfbac99c446a8dd7cc7e6d1edc4dde08e9671b3ccaa1e4d16ae
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto6: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 32f6cb3fc75d3956e5458e94d94365dcd63620865b3a25e0ad2ca731f5defa78
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer119)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1: void go(int)>
		SHA-256: 8bccb3ef966a34357dd217cfd2837170cd0f51391ee1abd3e1ce572c9ac548ad
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC2: void go(java.lang.String)>
		SHA-256: eac6c5bdafc6c83cb635909a35f13f05751e9a28c0f0dae1124ee329d4bad553
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>(byte[])>($r2)
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase2: void go(byte)>
		SHA-256: 4c33537b613e926a802bda2443c4f34eb7343c3c6ced820c9549850bd0f1138d
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11: void method1(java.lang.String,java.lang.String)>
		SHA-256: a846a2a5d57fca62999eb659612bcc5bcf5a026f2ca0400c2cc3e258a7e580e3
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r7)
		Method: <org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1: void method1(byte[])>
		SHA-256: 54e503892202fcf21fc353dd239d4c8b715ec5dfbcc455cff41d4b1859e58309
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer78)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase1: void go(java.lang.String)>
		SHA-256: b78a3030c98c96497970698cd64f2dde99e41f8b584d97db5d99c1ccbf33b472
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r0, i0)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsABICase3: void method2(byte[],int)>
		SHA-256: 702c648f9c5a93a639a90dd31c079a98314716da7f31cde5a1029b296b0f3dce
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8: void go()>
		SHA-256: 6fda858dba412ea871f0a4aa693b979c73781d759e8c70686816d9b14f786d78
		Secure: false
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase12: void method1(java.lang.String,java.lang.String)>
		SHA-256: c582e65e282664bff6ef6af954e1609f7395a5f49b54ec17adc975c3a3c8242f
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC4: void go(java.lang.String)>
		SHA-256: c1b3e569e93a62744f9fc0394abe9b06b2838abe5d5f5edca51213180e42890e
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.Crypto2: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: f8be885fc0a410cf573eb1a7cf21ac17074b6f08abfa1b60b3366ac25916e884
		Secure: true
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r3.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase2: void key(java.lang.String)>
		SHA-256: e7e521fbcb864ed896f330202d6e93baa6de10f0fc96bec139023251c037d451
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2: void go()>
		SHA-256: 11a4f83c7dae57a5f053df722c1971c65f8ebde15f69fa3908b3bbb197a9f68f
		Secure: true
	Object:
		Variable: $r6
		Type: java.security.SecureRandom
		Statement: specialinvoke $r6.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABHCase4: void main(java.lang.String[])>
		SHA-256: b0755e4399b523e138ee7cd3f865f243c0c994f35acbf90831264bbf7348f5ff
		Secure: true
	Object:
		Variable: $r7
		Type: java.security.SecureRandom
		Statement: specialinvoke $r7.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected: void main(java.lang.String[])>
		SHA-256: 9f093d0e4c7190726b90b367edad8bd65cd0d1ba0898bb6347c67b798964e1ca
		Secure: true
	Object:
		Variable: r2
		Type: java.security.MessageDigest
		Statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)
		Method: <org.cryptoapi.bench.brokenhash.CryptoHash2: void encrypt(java.lang.String,java.lang.String)>
		SHA-256: 90e50838fe4f86532a91fac203c247232799f422d7749b824bca72e949162037
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7: void go()>
		SHA-256: 32a6725f1fe4bf00485e34017d8a55685e6b9575b6354a4bab0ede70c8f588e5
		Secure: true
	Object:
		Variable: r1
		Type: byte[]
		Statement: virtualinvoke r0.<java.security.SecureRandom: void nextBytes(byte[])>(r1)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase3: void method1(int,java.security.SecureRandom,javax.crypto.spec.PBEParameterSpec)>
		SHA-256: 9b6c890ba07f41789cc04d96026257b416528025a0954807a91126d09575d564
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABMC1: void go(byte[])>
		SHA-256: bb98df5714e0c145771d806ac91fdb9b9dc229129c545d073306dbaa94e8ef06
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase2: void key(java.lang.String)>
		SHA-256: 5a010fd7fb3895e4d29665a0c79ed963012928dcba152511d312fe3273b7a7c2
		Secure: true
	Object:
		Variable: r1
		Type: java.security.MessageDigest
		Statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase6: void go(java.lang.String)>
		SHA-256: d356ad4c8056180ad9b6be5f563e02c58ca5851eb2cd573eb57dd083510a6af2
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer99)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1: void go(int)>
		SHA-256: 84d51aff742b2bc20ed3ff2a7cf421ad0bb07de00f69c23c217cc26bf49cee6a
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC1: void go(java.lang.String,java.lang.String)>
		SHA-256: 22826956e7bb07cbb7fe276e02b67699c942ec0a2c5c0691424b2affbf7fb58b
		Secure: false
	Object:
		Variable: r2
		Type: java.security.KeyStore
		Statement: r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected: void go()>
		SHA-256: 332861808220e666674768fe8bf48f1369490191f3e545840b2f96f94ba0a86e
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsBBCase1: void main(java.lang.String[])>
		SHA-256: 3d087f2b518b420bcaf0abfe4819346b0bb6d09ff7ce4be249d4315d94a1d8e6
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r6.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r7, r3, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordCorrected: void key()>
		SHA-256: 95e027092fe51368570e192820c5e71e38897a5366717ab0cd792297086803de
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <org.cryptoapi.bench.brokenhash.BrokenHashABICase6: void go(java.lang.String)>
		SHA-256: 97e8bf3ace970b5cf60516959ce1589bc3cba874531aa375f2a2f6f69c5662e7
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer93)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoCorrected: void go()>
		SHA-256: a4db765d86708098a7ffc4193c9ac02843798d3a5ba26616370f9e1b986e59ef
		Secure: true
	Object:
		Variable: $r19
		Type: java.security.SecureRandom
		Statement: specialinvoke $r19.<java.security.SecureRandom: void <init>(byte[])>($r20)
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABHCase4: void main(java.lang.String[])>
		SHA-256: c17691313414e2499abb8b1cdfea67b3f9b055c5bd104776ef63d7e96b7c3365
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6: void go()>
		SHA-256: baaafa67a1b59f1b4bf6f9419a2b89a6134d169ade8e128d5918ed2cd85301b
		Secure: true
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto6: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: fd67dfcc334961d218874be2dee9f8e6d528bf5126e34491a496a2c60318bd90
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC3: void go(java.lang.String)>
		SHA-256: e3117455aec4a49150b5802ef37f1c629adab383eea1daa561c359776e97016e
		Secure: false
	Object:
		Variable: r3
		Type: java.security.KeyStore
		Statement: r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r2)
		Method: <org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABICase1: void go(java.lang.String)>
		SHA-256: 765554a8af8fb873ba5705fc66618bcd781a98f1f8b3b64d97ab0d54dc93c014
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>(byte[])>($r3)
		Method: <org.cryptoapi.bench.predictableseeds.CryptoPredictableSeed2: void method1(byte)>
		SHA-256: 71398f39e05f9fd1871c9d26cb33aa4c663111756c023b8fcca3e445a728ffac
		Secure: true



Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #af7b731fd9fde292e1faf769955837bfc61b5189c1e3a4559fc6e58e3b7279e0)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer48, r2)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #5777a16c6417ce8a8a746f242beb38e14e14f12be9e5dd67bdf226370cc60091)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer247, r2, r8)



Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC1

	 in Method: void go(java.lang.String,java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #22826956e7bb07cbb7fe276e02b67699c942ec0a2c5c0691424b2affbf7fb58b)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer15, r4)


Findings in Java Class: org.cryptoapi.bench.brokenhash.CryptoHash4

	 in Method: void encrypt(java.lang.String,java.lang.String)
		ImpreciseValueExtractionError violating CrySL rule for java.security.MessageDigest
			Constraint VC:digestAlg - SHA-256,SHA-384,SHA-512, could not be evaluted due to insufficient information.
			at statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #be2a9895d6c8cdbcb7a6494295c64eff618d41ac8117c81d54c7f8d764c50d5)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer10, r2)

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.Cipher
			Constraint VC:transformation( Split with / at index 0) - AES,PBEWithHmacSHA224AndAES_128,PBEWithHmacSHA256AndAES_128,PBEWithHmacSHA384AndAES_128,PBEWithHmacSHA512AndAES_128,PBEWithHmacSHA224AndAES_256,PBEWithHmacSHA256AndAES_256,PBEWithHmacSHA384AndAES_256,PBEWithHmacSHA512AndAES_256,RSA, could not be evaluted due to insufficient information.
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.KeyGenerator
			Constraint VC:alg - AES,HmacSHA224,HmacSHA256,HmacSHA384,HmacSHA512, could not be evaluted due to insufficient information.
			at statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r5)


Findings in Java Class: org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1

	 in Method: void go(int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #92069af181b8f48c0ac9501d1838c5880cb873a349cc795b3434fa510fe6b7ab)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init, update, wrap, doFinal
			at statement: $r12 = virtualinvoke r6.<javax.crypto.SealedObject: java.lang.Object getObject(javax.crypto.Cipher)>(r4)


		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #8bccb3ef966a34357dd217cfd2837170cd0f51391ee1abd3e1ce572c9ac548ad)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init, update, wrap, doFinal
			at statement: specialinvoke $r10.<javax.crypto.SealedObject: void <init>(java.io.Serializable,javax.crypto.Cipher)>(r5, r3)


Findings in Java Class: org.cryptoapi.bench.brokenhash.CryptoHash3

	 in Method: void encrypt(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #de58d5f196a0c1987f71a62be8427c9ac8da25e6a10d50a636fd13dd993fbc43)
			First parameter (with value "MD4") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)

		ImpreciseValueExtractionError violating CrySL rule for java.security.MessageDigest
			Constraint VC:digestAlg - SHA-256,SHA-384,SHA-512, could not be evaluted due to insufficient information.
			at statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)


Findings in Java Class: org.cryptoapi.bench.brokenhash.BrokenHashABICase6

	 in Method: void go(java.lang.String)
		ImpreciseValueExtractionError violating CrySL rule for java.security.MessageDigest
			Constraint VC:digestAlg - SHA-256,SHA-384,SHA-512, could not be evaluted due to insufficient information.
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4

	 in Method: void go()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #104d873dd65a6fdd086ea521b43fe6affae5657025795454b33c7b030be8b910)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer49, r2)


Findings in Java Class: org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase1

	 in Method: void go(java.lang.String)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #c9d80f1f46c888f9b25311309c74358d3f60a9beab9fede15e93e95735fcb462)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer79, r3)






Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1

	 in Method: void go()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #96e3424c1f920565d388b8d9904ed63143e93dc4824165dc69921433ac07a6c6)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer275, r2, r5)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #e80236fdc0623f2c999705a6a94b829791b1e4e07ec34951c533e8dabb4c8b0e)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer279, r2, r6)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #ac1130f5b5bf2b1a296a35fa655bb0e5f07a61204c6962545bb6e6b26c513d55)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer43, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6

	 in Method: void go()
		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.KeyGenerator
			Constraint VC:alg - AES,HmacSHA224,HmacSHA256,HmacSHA384,HmacSHA512, could not be evaluted due to insufficient information.
			at statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r5)

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.Cipher
			Constraint VC:transformation( Split with / at index 0) - AES,PBEWithHmacSHA224AndAES_128,PBEWithHmacSHA256AndAES_128,PBEWithHmacSHA384AndAES_128,PBEWithHmacSHA512AndAES_128,PBEWithHmacSHA224AndAES_256,PBEWithHmacSHA256AndAES_256,PBEWithHmacSHA384AndAES_256,PBEWithHmacSHA512AndAES_256,RSA, could not be evaluted due to insufficient information.
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #ae0a92d07fc658725f702740ac9a86ecc2c2fb83f6fa65bcc278598d47c7a697)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer11, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.Crypto2

	 in Method: byte[] encrypt(java.lang.String,java.lang.String)
		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.KeyGenerator
			Constraint VC:alg - AES,HmacSHA224,HmacSHA256,HmacSHA384,HmacSHA512, could not be evaluted due to insufficient information.
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #189419399682cc63a5d5d7def9a888b119ebff67f8efe33a2bf208bf0a816671)
			First parameter (with value "DES/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256, RSA}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.Cipher
			Constraint VC:transformation( Split with / at index 0) - AES,PBEWithHmacSHA224AndAES_128,PBEWithHmacSHA256AndAES_128,PBEWithHmacSHA384AndAES_128,PBEWithHmacSHA512AndAES_128,PBEWithHmacSHA224AndAES_256,PBEWithHmacSHA256AndAES_256,PBEWithHmacSHA384AndAES_256,PBEWithHmacSHA512AndAES_256,RSA, could not be evaluted due to insufficient information.
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer23, r3)






Findings in Java Class: org.cryptoapi.bench.brokenhash.CryptoHash2

	 in Method: void encrypt(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #90e50838fe4f86532a91fac203c247232799f422d7749b824bca72e949162037)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)

		ImpreciseValueExtractionError violating CrySL rule for java.security.MessageDigest
			Constraint VC:digestAlg - SHA-256,SHA-384,SHA-512, could not be evaluted due to insufficient information.
			at statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)


Findings in Java Class: org.cryptoapi.bench.ecbcrypto.CryptoECB1

	 in Method: void method1(java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #93b7326c92ffbd8fb66c7c6fe6181f45304c766fa9c06f7ad64fc349c7c53c05)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer88, r2)

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.Cipher
			Constraint VC:transformation( Split with / at index 0) - AES,PBEWithHmacSHA224AndAES_128,PBEWithHmacSHA256AndAES_128,PBEWithHmacSHA384AndAES_128,PBEWithHmacSHA512AndAES_128,PBEWithHmacSHA224AndAES_256,PBEWithHmacSHA256AndAES_256,PBEWithHmacSHA384AndAES_256,PBEWithHmacSHA512AndAES_256,RSA, could not be evaluted due to insufficient information.
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r4)


Findings in Java Class: org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #51cfe795f2ddf3c0626768238bad1e9113f037c9237159456c09d35a5b84d861)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer80, r2)

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.Cipher
			Constraint VC:transformation( Split with / at index 0) - AES,PBEWithHmacSHA224AndAES_128,PBEWithHmacSHA256AndAES_128,PBEWithHmacSHA384AndAES_128,PBEWithHmacSHA512AndAES_128,PBEWithHmacSHA224AndAES_256,PBEWithHmacSHA256AndAES_256,PBEWithHmacSHA384AndAES_256,PBEWithHmacSHA512AndAES_256,RSA, could not be evaluted due to insufficient information.
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r5)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC2


		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #eac6c5bdafc6c83cb635909a35f13f05751e9a28c0f0dae1124ee329d4bad553)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer16, r3)


Findings in Java Class: org.cryptoapi.bench.brokenhash.BrokenHashABICase8

	 in Method: void go(java.lang.String)
		ImpreciseValueExtractionError violating CrySL rule for java.security.MessageDigest
			Constraint VC:digestAlg - SHA-256,SHA-384,SHA-512, could not be evaluted due to insufficient information.
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)


Findings in Java Class: org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordCorrected

	 in Method: void main(java.lang.String[])
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #95e027092fe51368570e192820c5e71e38897a5366717ab0cd792297086803de)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: virtualinvoke r1.<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordCorrected: void key()>()


	 in Method: void key()
		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #95e027092fe51368570e192820c5e71e38897a5366717ab0cd792297086803de)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r6.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r7, r3, s0, b1)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase4

	 in Method: void go(java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #c5e3aa69ae4cd3f16d4796c6fee0a1f8f0a079bad6fe591508aa288f5a308c37)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer9, r3)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1

	 in Method: void method1(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r7)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #1aa9805c8d6592fe58a6d94ff57be408cf60387096b06432e26d9a31320daf6e)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer273, r3, r1)


Findings in Java Class: org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1

	 in Method: void go(int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #84d51aff742b2bc20ed3ff2a7cf421ad0bb07de00f69c23c217cc26bf49cee6a)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init, update, wrap, doFinal
			at statement: specialinvoke $r10.<javax.crypto.SealedObject: void <init>(java.io.Serializable,javax.crypto.Cipher)>(r4, r3)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #c4d5c4d190b78b73ece771c4d19a8c2c1aeaf15a74196729dda85408c9345f67)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init, update, wrap, doFinal
			at statement: $r12 = virtualinvoke r5.<javax.crypto.SealedObject: java.lang.Object getObject(javax.crypto.Cipher)>(r6)

Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12

	 in Method: void method1(java.lang.String)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #a19a90a9212d0467bc89fc0b3c1af96e5ea1b38147d20c18a312d0dd23fc55c)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer3, r2)


Findings in Java Class: org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2

	 in Method: void main(java.lang.String[])


	 in Method: void go(java.security.KeyPairGenerator,java.security.KeyPair)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #d12719374750219cd1133274d1c0013920920bbf7dc6b852b9d8e30bfd948646)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init, update, wrap, doFinal
			at statement: $r12 = virtualinvoke r5.<javax.crypto.SealedObject: java.lang.Object getObject(javax.crypto.Cipher)>(r6)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #954030c8908779065ef1cbba21922b5b56143026d7e9abc02035ae5cfd76b0b0)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init, update, wrap, doFinal
			at statement: specialinvoke $r10.<javax.crypto.SealedObject: void <init>(java.io.Serializable,javax.crypto.Cipher)>(r4, r3)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1

	 in Method: void go()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #9d1ddee9297b403488216ded5711d83732a0bc180accc2c7863159fee4726e6e)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer245, r2, r5)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase15

	 in Method: void method1(java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #c60184b26682b6511441d8460452f8120c7c6fe7d13df0b0f684b82be2ebbc4b)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer6, r2)

Findings in Java Class: org.cryptoapi.bench.brokenhash.BrokenHashABICase5

	 in Method: void go(java.lang.String)
		ImpreciseValueExtractionError violating CrySL rule for java.security.MessageDigest
			Constraint VC:digestAlg - SHA-256,SHA-384,SHA-512, could not be evaluted due to insufficient information.
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)


Findings in Java Class: org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBECorrected

	 in Method: void key2()
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #208b83d97c4db7dd8df4d7b59a0d7e999ea66462f3a9ce6d2445ab7a627d834a)
			Second parameter (with value 1020)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer138)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase9

	 in Method: void go(java.lang.String)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #b9a86b5876c5bb1ae88033c32970c7c395882a7ea3df45d31419eb3d5631c3b3)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer14, r3)




Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5

	 in Method: void go()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #1f2117c5311d2a89a1fbe400ccc2cc5eb4fc932371453db2b83862481c39b474)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer53, r2)

Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1

	 in Method: void go(java.lang.String,java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #330ecd50e2614391a443b11a27dbcf63af24512bf9be60e4f1a4801ebaba2a1f)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer0, r4)


Findings in Java Class: org.cryptoapi.bench.brokenhash.CryptoHash1

	 in Method: void encrypt(java.lang.String,java.lang.String)
		ImpreciseValueExtractionError violating CrySL rule for java.security.MessageDigest
			Constraint VC:digestAlg - SHA-256,SHA-384,SHA-512, could not be evaluted due to insufficient information.
			at statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)




Findings in Java Class: org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoCorrected

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #66f729ec33abb30a3be8767d47649aa5d9ec27ac92c5a3a75bdf409647a7fc17)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer94, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase13

	 in Method: void method1(java.lang.String)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #165e5e74c3a780737221b2e5efad079f03d56e4586891fe960582ef8f8493c9e)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer4, r2)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1

	 in Method: void go(byte[])
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #19e213d2bde30eae87245c8a90267a083275a0d085c7c09a6e2369a6b9e3d0d0)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer270, r4, r2)


Findings in Java Class: org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase3

	 in Method: void method1(java.lang.String)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #82f3907da64978a5fee5bf105d91dfad596516d0502c88c05e3ca2a96553f0e8)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer82, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.Crypto4

	 in Method: byte[] encrypt(java.lang.String,java.lang.String)
		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.KeyGenerator
			Constraint VC:alg - AES,HmacSHA224,HmacSHA256,HmacSHA384,HmacSHA512, could not be evaluted due to insufficient information.
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #160c8faa35c01a055a0957c71a7cbe53267171d0e80f5bc12a3da34f49fbc85b)
			First parameter (with value "RC4") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256, RSA}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.Cipher
			Constraint VC:transformation( Split with / at index 0) - AES,PBEWithHmacSHA224AndAES_128,PBEWithHmacSHA256AndAES_128,PBEWithHmacSHA384AndAES_128,PBEWithHmacSHA512AndAES_128,PBEWithHmacSHA224AndAES_256,PBEWithHmacSHA256AndAES_256,PBEWithHmacSHA384AndAES_256,PBEWithHmacSHA512AndAES_256,RSA, could not be evaluted due to insufficient information.
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)

Findings in Java Class: org.cryptoapi.bench.pbeiteration.CryptoPBEIteration1

	 in Method: void method1(int)
		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.spec.PBEParameterSpec
			Constraint iterationCount + 0 >= 10000 + 0 could not be evaluted due to insufficient information.
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, i1)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8

	 in Method: void go()
		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.Cipher
			Constraint VC:transformation( Split with / at index 0) - AES,PBEWithHmacSHA224AndAES_128,PBEWithHmacSHA256AndAES_128,PBEWithHmacSHA384AndAES_128,PBEWithHmacSHA512AndAES_128,PBEWithHmacSHA224AndAES_256,PBEWithHmacSHA256AndAES_256,PBEWithHmacSHA384AndAES_256,PBEWithHmacSHA512AndAES_256,RSA, could not be evaluted due to insufficient information.
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #6fda858dba412ea871f0a4aa693b979c73781d759e8c70686816d9b14f786d78)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer13, r2)

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.KeyGenerator
			Constraint VC:alg - AES,HmacSHA224,HmacSHA256,HmacSHA384,HmacSHA512, could not be evaluted due to insufficient information.
			at statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r5)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7

	 in Method: void go()
		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.Cipher
			Constraint VC:transformation( Split with / at index 0) - AES,PBEWithHmacSHA224AndAES_128,PBEWithHmacSHA256AndAES_128,PBEWithHmacSHA384AndAES_128,PBEWithHmacSHA512AndAES_128,PBEWithHmacSHA224AndAES_256,PBEWithHmacSHA256AndAES_256,PBEWithHmacSHA384AndAES_256,PBEWithHmacSHA512AndAES_256,RSA, could not be evaluted due to insufficient information.
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.KeyGenerator
			Constraint VC:alg - AES,HmacSHA224,HmacSHA256,HmacSHA384,HmacSHA512, could not be evaluted due to insufficient information.
			at statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r5)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #1549bd2c079f16d79981ac7e559c5e5b4ad759c145bc12692bd7c47cf9811907)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer12, r2)


Findings in Java Class: org.cryptoapi.bench.brokenhash.BrokenHashABICase7

	 in Method: void go(java.lang.String)
		ImpreciseValueExtractionError violating CrySL rule for java.security.MessageDigest
			Constraint VC:digestAlg - SHA-256,SHA-384,SHA-512, could not be evaluted due to insufficient information.
			at statement: r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)


Findings in Java Class: org.cryptoapi.bench.predictablekeystorepassword.CryptoPredictableKeyStorePassword1

	 in Method: void method1(java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #2cb48526ac1735e89af5fd5b9e6ef6ffdba47d11f58949e308873bd29e5f7f9e)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r5, $r6)


Findings in Java Class: org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABMC1

	 in Method: void go(java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #db9e0cf32d4a6472fb5dbe079ef18c4c680d86f38814866a7e0f59cad751c140)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer85, r3)



Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2

	 in Method: void go()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #6029a2525c828d190cc8356aa08ffff6a2292165abe23d1eca869e92859276e7)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer264, r3, r1)




Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2

	 in Method: void go(java.lang.String)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #a5d67583084dce74794fa3b631aeb26f19d69f42c86dcbe517ee5faeae7c8bef)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer7, r3)


Findings in Java Class: org.cryptoapi.bench.staticsalts.CryptoStaticSalt1

	 in Method: void method1(byte[])
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #1798d1550bf5860a0d3be1062d2ec459f41e7c8161cce413fd44fd7173110b51)
			Second parameter (with value 1020)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r1.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r3, varReplacer292)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r1.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r3, varReplacer292)


Findings in Java Class: org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1

	 in Method: void go()

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #38973b3056d47597d19861032d1293e1b832c191dd905b29bbed193026127188)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer89, r2)


Findings in Java Class: org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMCCase1

	 in Method: void main(java.lang.String[])
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #a59dca38173f6ecc3111a544c67f05b6a36562f20de4be01a4220996a44fcb28)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: virtualinvoke r1.<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMC1: void key(java.lang.String)>(r2)



Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoCorrected

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3cc240c6906bf45feb3e1e3027b9c52f46a76069bdb120449ea117cbcddae190)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer56, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase14

	 in Method: void method1(java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #1a06fdae3c5e34581f287856170543a8f13bafb8fb4cc6880004bd801479294c)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer5, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC3

	 in Method: void go(java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #e3117455aec4a49150b5802ef37f1c629adab383eea1daa561c359776e97016e)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer17, r3)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC5

	 in Method: void go(java.lang.String)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #770cc402937a1c661c03c2dc91aa89e39c5e7b695bdc7c44885d227106ac56d0)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer19, r3)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10

	 in Method: void go()
		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.KeyGenerator
			Constraint VC:alg - AES,HmacSHA224,HmacSHA256,HmacSHA384,HmacSHA512, could not be evaluted due to insufficient information.
			at statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r5)

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.Cipher
			Constraint VC:transformation( Split with / at index 0) - AES,PBEWithHmacSHA224AndAES_128,PBEWithHmacSHA256AndAES_128,PBEWithHmacSHA384AndAES_128,PBEWithHmacSHA512AndAES_128,PBEWithHmacSHA224AndAES_256,PBEWithHmacSHA256AndAES_256,PBEWithHmacSHA384AndAES_256,PBEWithHmacSHA512AndAES_256,RSA, could not be evaluted due to insufficient information.
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #1f76c97b9668b9cf4f3ee4a8702ef748fbd8371e8f4fe5b936603d50724b7cfa)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1, r2)



Findings in Java Class: org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABSCase1

	 in Method: void <init>()
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #749f1e6e3954eaa6dea817670a969d170e4c0cec69fcc0129871d32cdcf6e2d8)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: virtualinvoke $r3.<org.cryptoapi.bench.predictablepbepassword.CryptoPredictablePBE: void method1(java.lang.String)>(varReplacer215)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase3

	 in Method: void go(java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #374fdfd8c775168c8300042599570bdb73b552b73ddfa9b3342544897c00a2be)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer8, r3)


Findings in Java Class: org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected

	 in Method: void go()
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #332861808220e666674768fe8bf48f1369490191f3e545840b2f96f94ba0a86e)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r9, $r10)



Findings in Java Class: org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3

	 in Method: void method1(int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #96bec4646674ffab51ae11a35dc2f986257e3862ec6e0ce58ce0978c1ed69dfd)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init, update, wrap, doFinal
			at statement: specialinvoke $r9.<javax.crypto.SealedObject: void <init>(java.io.Serializable,javax.crypto.Cipher)>(r3, r2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #9f6067a7eee098b8f4b0db0fface33111f6ca374a3ff3c03d4b31f8f99fb7a51)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init, update, wrap, doFinal
			at statement: $r11 = virtualinvoke r4.<javax.crypto.SealedObject: java.lang.Object getObject(javax.crypto.Cipher)>(r5)



Findings in Java Class: org.cryptoapi.bench.staticsalts.StaticSaltsCorrected

	 in Method: void key2()
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #709c90383729a5052d4c51dc6115453ce4994eb7b4e66c6cdc1611d5bf5ebe50)
			Second parameter (with value 1020)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer294)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.Crypto6

	 in Method: byte[] encrypt(java.lang.String,java.lang.String)
		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.KeyGenerator
			Constraint VC:alg - AES,HmacSHA224,HmacSHA256,HmacSHA384,HmacSHA512, could not be evaluted due to insufficient information.
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.Cipher
			Constraint VC:transformation( Split with / at index 0) - AES,PBEWithHmacSHA224AndAES_128,PBEWithHmacSHA256AndAES_128,PBEWithHmacSHA384AndAES_128,PBEWithHmacSHA512AndAES_128,PBEWithHmacSHA224AndAES_256,PBEWithHmacSHA256AndAES_256,PBEWithHmacSHA384AndAES_256,PBEWithHmacSHA512AndAES_256,RSA, could not be evaluted due to insufficient information.
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)


Findings in Java Class: org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABSCase1

	 in Method: void <init>()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #51384c72f0bac54a80f3f29c25ed17c1549cdc79ec5ce427651c67fd8ca9061d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke $r2.<org.cryptoapi.bench.predictablecryptographickey.Crypto: void <init>(java.lang.String)>(r1)

Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11

	 in Method: void method1(java.lang.String,java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #625497398a38bc4095b05517d85aae39d55853ef5b69c8dc58f8034796450e0a)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer2, r3)

Findings in Java Class: org.cryptoapi.bench.brokencrypto.Crypto5

	 in Method: byte[] encrypt(java.lang.String,java.lang.String)
		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.KeyGenerator
			Constraint VC:alg - AES,HmacSHA224,HmacSHA256,HmacSHA384,HmacSHA512, could not be evaluted due to insufficient information.
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.Cipher
			Constraint VC:transformation( Split with / at index 0) - AES,PBEWithHmacSHA224AndAES_128,PBEWithHmacSHA256AndAES_128,PBEWithHmacSHA384AndAES_128,PBEWithHmacSHA512AndAES_128,PBEWithHmacSHA224AndAES_256,PBEWithHmacSHA256AndAES_256,PBEWithHmacSHA384AndAES_256,PBEWithHmacSHA512AndAES_256,RSA, could not be evaluted due to insufficient information.
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)

Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #4d2087109551299ff886e741bd5f21b386f31a296e7929afaf6ec8a7029dcf05)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer42, r2)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3

	 in Method: void method2(byte[])
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #7b6b0ef8a2405d53a7d818c9a9e16de2ac6a4ea3762592063d36798a19332d8d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer266, r3, r1)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1

	 in Method: void go(byte[])

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #b51c651fa77c62212a57289448eadd1dfa5331af243a03a4693decb8fbb0f595)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer261, r4, r2)


Findings in Java Class: org.cryptoapi.bench.brokenhash.BrokenHashCorrected

	 in Method: void main(java.lang.String[])
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #86fe128afb9d0f123a8f3dbcf5caa2b1acbac76243b181f79964586dd77c2bde)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer74)

Findings in Java Class: org.cryptoapi.bench.brokencrypto.Crypto3

	 in Method: byte[] encrypt(java.lang.String,java.lang.String)
		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.KeyGenerator
			Constraint VC:alg - AES,HmacSHA224,HmacSHA256,HmacSHA384,HmacSHA512, could not be evaluted due to insufficient information.
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #5abc24a5dbf0d490d88af14b187b2398492270b81b33719462f3bb5a1fa65352)
			First parameter (with value "Blowfish") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256, RSA}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.Cipher
			Constraint VC:transformation( Split with / at index 0) - AES,PBEWithHmacSHA224AndAES_128,PBEWithHmacSHA256AndAES_128,PBEWithHmacSHA384AndAES_128,PBEWithHmacSHA512AndAES_128,PBEWithHmacSHA224AndAES_256,PBEWithHmacSHA256AndAES_256,PBEWithHmacSHA384AndAES_256,PBEWithHmacSHA512AndAES_256,RSA, could not be evaluted due to insufficient information.
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC4

	 in Method: void go(java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #c1b3e569e93a62744f9fc0394abe9b06b2838abe5d5f5edca51213180e42890e)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters), javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec), update, javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom), javax.crypto.Cipher: void init(int,java.security.cert.Certificate), javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom), wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer18, r3)


Findings in Java Class: org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected

	 in Method: void main(java.lang.String[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r15, varReplacer173)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer172, r4)


Findings in Java Class: org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #13337ec7a1f73ba96f1788bb6bf2ce97c5cf2fd9c79c441d5a21ad46211c8389)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init, update, wrap, doFinal
			at statement: $r12 = virtualinvoke r5.<javax.crypto.SealedObject: java.lang.Object getObject(javax.crypto.Cipher)>(r6)


		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #30ddb901b36fef11853edbfd066a45281a55d18e5259f9a9328ff2102eaa443)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init, update, wrap, doFinal
			at statement: specialinvoke $r10.<javax.crypto.SealedObject: void <init>(java.io.Serializable,javax.crypto.Cipher)>(r4, r3)



======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 38
	Number of Objects Analyzed: 351

	CogniCrypt found the following violations. For details see description above.
	NeverTypeOfError: 15
	RequiredPredicateError: 26
	ConstraintError: 84
	IncompleteOperationError: 63
	ImpreciseValueExtractionError: 31
=====================================================================
15+26+84+63 = 188 misuses across 121 classes
Analysis finished after 11 seconds
############################
