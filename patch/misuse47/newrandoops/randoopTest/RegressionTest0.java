package randoopTest;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        java.lang.Class<?> wildcardClass1 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        java.lang.Class<?> wildcardClass4 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        java.lang.Class<?> wildcardClass6 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        java.lang.Class<?> wildcardClass6 = byteArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        java.lang.Class<?> wildcardClass23 = byteArray18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        java.lang.Class<?> wildcardClass55 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        java.lang.Class<?> wildcardClass67 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        java.lang.Class<?> wildcardClass15 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_80.go(byteArray87);
        staticInitializationVectorABMC1_69.go(byteArray87);
        staticInitializationVectorABMC1_38.go(byteArray87);
        staticInitializationVectorABMC1_37.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_95 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray97 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_95.go(byteArray97);
        staticInitializationVectorABMC1_0.go(byteArray97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray97);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_1.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        java.lang.Class<?> wildcardClass57 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        java.lang.Class<?> wildcardClass11 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        java.lang.Class<?> wildcardClass37 = byteArray31.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_80.go(byteArray87);
        staticInitializationVectorABMC1_69.go(byteArray87);
        staticInitializationVectorABMC1_38.go(byteArray87);
        staticInitializationVectorABMC1_37.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass95 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        staticInitializationVectorABMC1_7.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        staticInitializationVectorABMC1_7.go(byteArray25);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        staticInitializationVectorABMC1_7.go(byteArray56);
        staticInitializationVectorABMC1_6.go(byteArray56);
        staticInitializationVectorABMC1_0.go(byteArray56);
        java.lang.Class<?> wildcardClass64 = byteArray56.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        java.lang.Class<?> wildcardClass58 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        java.lang.Class<?> wildcardClass44 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        staticInitializationVectorABMC1_7.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        staticInitializationVectorABMC1_7.go(byteArray25);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        staticInitializationVectorABMC1_7.go(byteArray56);
        staticInitializationVectorABMC1_6.go(byteArray56);
        staticInitializationVectorABMC1_0.go(byteArray56);
        java.lang.Class<?> wildcardClass64 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        java.lang.Class<?> wildcardClass37 = byteArray34.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        java.lang.Class<?> wildcardClass10 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        java.lang.Class<?> wildcardClass11 = byteArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        java.lang.Class<?> wildcardClass13 = byteArray11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_46.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        java.lang.Class<?> wildcardClass23 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        java.lang.Class<?> wildcardClass4 = byteArray2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        java.lang.Class<?> wildcardClass64 = byteArray61.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        java.lang.Class<?> wildcardClass8 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        java.lang.Class<?> wildcardClass32 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        java.lang.Class<?> wildcardClass37 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        java.lang.Class<?> wildcardClass69 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_68.go(byteArray86);
        staticInitializationVectorABMC1_60.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass93 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        java.lang.Class<?> wildcardClass58 = byteArray54.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        java.lang.Class<?> wildcardClass37 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        java.lang.Class<?> wildcardClass32 = byteArray26.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_80.go(byteArray87);
        staticInitializationVectorABMC1_69.go(byteArray87);
        staticInitializationVectorABMC1_38.go(byteArray87);
        staticInitializationVectorABMC1_37.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        java.lang.Class<?> wildcardClass31 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray49);
        staticInitializationVectorABMC1_6.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_75.go(byteArray81);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_75.go(byteArray87);
        staticInitializationVectorABMC1_52.go(byteArray87);
        staticInitializationVectorABMC1_6.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass92 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        java.lang.Class<?> wildcardClass46 = byteArray43.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        java.lang.Class<?> wildcardClass67 = byteArray60.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_68.go(byteArray86);
        staticInitializationVectorABMC1_55.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass93 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass75 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        java.lang.Class<?> wildcardClass55 = byteArray49.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        byte[] byteArray36 = null;
        staticInitializationVectorABMC1_23.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_38.go(byteArray81);
        staticInitializationVectorABMC1_23.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray54 = null;
        staticInitializationVectorABMC1_48.go(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_48.go(byteArray60);
        staticInitializationVectorABMC1_17.go(byteArray60);
        staticInitializationVectorABMC1_6.go(byteArray60);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_6.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray72 = null;
        staticInitializationVectorABMC1_66.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_90.go(byteArray92);
        staticInitializationVectorABMC1_89.go(byteArray92);
        staticInitializationVectorABMC1_85.go(byteArray92);
        staticInitializationVectorABMC1_74.go(byteArray92);
        staticInitializationVectorABMC1_66.go(byteArray92);
        staticInitializationVectorABMC1_6.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_46.go(byteArray52);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_46.go(byteArray58);
        staticInitializationVectorABMC1_15.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        java.lang.Class<?> wildcardClass62 = byteArray58.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_26.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_26.go(byteArray75);
        staticInitializationVectorABMC1_15.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_15.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray96 = new byte[] { (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray96);
        java.lang.Class<?> wildcardClass98 = byteArray96.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        java.lang.Class<?> wildcardClass44 = byteArray37.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        java.lang.Class<?> wildcardClass38 = byteArray35.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        java.lang.Class<?> wildcardClass14 = byteArray12.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray35);
        java.lang.Class<?> wildcardClass37 = byteArray35.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        java.lang.Class<?> wildcardClass51 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        java.lang.Class<?> wildcardClass42 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        java.lang.Class<?> wildcardClass79 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_23.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray62);
        staticInitializationVectorABMC1_23.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        staticInitializationVectorABMC1_23.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass78 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        java.lang.Class<?> wildcardClass51 = byteArray48.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        staticInitializationVectorABMC1_7.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        staticInitializationVectorABMC1_7.go(byteArray25);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        staticInitializationVectorABMC1_7.go(byteArray56);
        staticInitializationVectorABMC1_6.go(byteArray56);
        staticInitializationVectorABMC1_0.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_64.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass78 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_68.go(byteArray86);
        staticInitializationVectorABMC1_55.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_71.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_46.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        staticInitializationVectorABMC1_17.go(byteArray66);
        staticInitializationVectorABMC1_6.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_6.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass86 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        java.lang.Class<?> wildcardClass54 = byteArray49.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_37.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass84 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        java.lang.Class<?> wildcardClass64 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass75 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_81.go(byteArray92);
        staticInitializationVectorABMC1_58.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_71.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass85 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray60);
        java.lang.Class<?> wildcardClass62 = byteArray60.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_68.go(byteArray86);
        staticInitializationVectorABMC1_55.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_93 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray95 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_93.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass98 = byteArray95.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray49);
        staticInitializationVectorABMC1_6.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_75.go(byteArray81);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_75.go(byteArray87);
        staticInitializationVectorABMC1_52.go(byteArray87);
        staticInitializationVectorABMC1_6.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        java.lang.Class<?> wildcardClass66 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_56.go(byteArray74);
        staticInitializationVectorABMC1_43.go(byteArray74);
        staticInitializationVectorABMC1_37.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        java.lang.Class<?> wildcardClass82 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_68.go(byteArray86);
        staticInitializationVectorABMC1_55.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_93 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray95 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_93.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        java.lang.Class<?> wildcardClass36 = byteArray34.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_26.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_26.go(byteArray75);
        staticInitializationVectorABMC1_25.go(byteArray75);
        staticInitializationVectorABMC1_14.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_23.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray62);
        staticInitializationVectorABMC1_23.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_23.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass90 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_11.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        staticInitializationVectorABMC1_11.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass76 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass59 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray60);
        java.lang.Class<?> wildcardClass62 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_23.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray62);
        staticInitializationVectorABMC1_23.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_23.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_81.go(byteArray92);
        staticInitializationVectorABMC1_58.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass96 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        java.lang.Class<?> wildcardClass53 = byteArray49.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_6.go(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_6.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        staticInitializationVectorABMC1_63.go(byteArray81);
        staticInitializationVectorABMC1_32.go(byteArray81);
        staticInitializationVectorABMC1_31.go(byteArray81);
        staticInitializationVectorABMC1_20.go(byteArray81);
        staticInitializationVectorABMC1_6.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        java.lang.Class<?> wildcardClass66 = byteArray60.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_56.go(byteArray74);
        staticInitializationVectorABMC1_43.go(byteArray74);
        staticInitializationVectorABMC1_37.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        java.lang.Class<?> wildcardClass82 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        java.lang.Class<?> wildcardClass54 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray35);
        java.lang.Class<?> wildcardClass37 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_58.go(byteArray84);
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_58.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        java.lang.Class<?> wildcardClass36 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        java.lang.Class<?> wildcardClass38 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_23.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray62);
        staticInitializationVectorABMC1_23.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        staticInitializationVectorABMC1_23.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass78 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_58.go(byteArray84);
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_58.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass96 = byteArray93.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_44.go(byteArray50);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_44.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        staticInitializationVectorABMC1_54.go(byteArray72);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray83);
        staticInitializationVectorABMC1_44.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray93 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_91.go(byteArray93);
        staticInitializationVectorABMC1_90.go(byteArray93);
        staticInitializationVectorABMC1_86.go(byteArray93);
        staticInitializationVectorABMC1_44.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        java.lang.Class<?> wildcardClass60 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray39 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray39);
        java.lang.Class<?> wildcardClass41 = byteArray39.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray39 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray39);
        java.lang.Class<?> wildcardClass41 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        java.lang.Class<?> wildcardClass58 = byteArray53.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray84 = new byte[] { (byte) -1, (byte) 0, (byte) 1, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        java.lang.Class<?> wildcardClass56 = byteArray50.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_14.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass61 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        byte[] byteArray36 = null;
        staticInitializationVectorABMC1_23.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_38.go(byteArray81);
        staticInitializationVectorABMC1_23.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass86 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        staticInitializationVectorABMC1_1.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_38.go(byteArray81);
        staticInitializationVectorABMC1_1.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass86 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_38.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass71 = byteArray64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_62.go(byteArray80);
        staticInitializationVectorABMC1_31.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        staticInitializationVectorABMC1_11.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_79.go(byteArray85);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_79.go(byteArray91);
        staticInitializationVectorABMC1_48.go(byteArray91);
        staticInitializationVectorABMC1_11.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass96 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        java.lang.Class<?> wildcardClass56 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray20 = null;
        staticInitializationVectorABMC1_14.go(byteArray20);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_14.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray53);
        staticInitializationVectorABMC1_14.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_14.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass69 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_68.go(byteArray86);
        staticInitializationVectorABMC1_60.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        java.lang.Class<?> wildcardClass54 = byteArray51.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_38.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray77);
        staticInitializationVectorABMC1_38.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_38.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_53.go(byteArray59);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_53.go(byteArray65);
        staticInitializationVectorABMC1_22.go(byteArray65);
        staticInitializationVectorABMC1_11.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass70 = byteArray65.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_11.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        staticInitializationVectorABMC1_11.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass76 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        java.lang.Class<?> wildcardClass49 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        java.lang.Class<?> wildcardClass54 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        staticInitializationVectorABMC1_7.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        staticInitializationVectorABMC1_7.go(byteArray25);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        staticInitializationVectorABMC1_7.go(byteArray56);
        staticInitializationVectorABMC1_6.go(byteArray56);
        staticInitializationVectorABMC1_0.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_64.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass78 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray49);
        staticInitializationVectorABMC1_6.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_75.go(byteArray81);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_75.go(byteArray87);
        staticInitializationVectorABMC1_52.go(byteArray87);
        staticInitializationVectorABMC1_6.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray94 = new byte[] { (byte) 100, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass96 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_26.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_26.go(byteArray75);
        staticInitializationVectorABMC1_15.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_15.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_53.go(byteArray59);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_53.go(byteArray65);
        staticInitializationVectorABMC1_22.go(byteArray65);
        staticInitializationVectorABMC1_11.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass70 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        java.lang.Class<?> wildcardClass53 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        java.lang.Class<?> wildcardClass57 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        java.lang.Class<?> wildcardClass49 = byteArray45.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray54 = null;
        staticInitializationVectorABMC1_48.go(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_48.go(byteArray60);
        staticInitializationVectorABMC1_17.go(byteArray60);
        staticInitializationVectorABMC1_6.go(byteArray60);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray66);
        staticInitializationVectorABMC1_0.go(byteArray66);
        java.lang.Class<?> wildcardClass69 = byteArray66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        staticInitializationVectorABMC1_7.go(byteArray38);
        staticInitializationVectorABMC1_1.go(byteArray38);
        staticInitializationVectorABMC1_0.go(byteArray38);
        java.lang.Class<?> wildcardClass46 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_14.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass61 = byteArray57.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_56.go(byteArray67);
        staticInitializationVectorABMC1_33.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_33.go(byteArray81);
        staticInitializationVectorABMC1_32.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass86 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_37.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass89 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_12.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        staticInitializationVectorABMC1_12.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray73);
        staticInitializationVectorABMC1_12.go(byteArray73);
        staticInitializationVectorABMC1_1.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        java.lang.Class<?> wildcardClass78 = byteArray73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_26.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_26.go(byteArray75);
        staticInitializationVectorABMC1_15.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_15.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass95 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_56.go(byteArray67);
        staticInitializationVectorABMC1_33.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_33.go(byteArray81);
        staticInitializationVectorABMC1_32.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        java.lang.Class<?> wildcardClass24 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_63.go(byteArray75);
        staticInitializationVectorABMC1_32.go(byteArray75);
        staticInitializationVectorABMC1_21.go(byteArray75);
        staticInitializationVectorABMC1_10.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass81 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_0.go(byteArray53);
        java.lang.Class<?> wildcardClass55 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_63.go(byteArray75);
        staticInitializationVectorABMC1_32.go(byteArray75);
        staticInitializationVectorABMC1_21.go(byteArray75);
        staticInitializationVectorABMC1_10.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass81 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_37.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_38.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass71 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        java.lang.Class<?> wildcardClass42 = byteArray39.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_62.go(byteArray80);
        staticInitializationVectorABMC1_31.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass87 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        byte[] byteArray36 = null;
        staticInitializationVectorABMC1_23.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_38.go(byteArray81);
        staticInitializationVectorABMC1_23.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        byte[] byteArray97 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_86.go(byteArray97);
        staticInitializationVectorABMC1_0.go(byteArray97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray97);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        java.lang.Class<?> wildcardClass58 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        staticInitializationVectorABMC1_22.go(byteArray53);
        staticInitializationVectorABMC1_16.go(byteArray53);
        staticInitializationVectorABMC1_15.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        java.lang.Class<?> wildcardClass62 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        staticInitializationVectorABMC1_24.go(byteArray73);
        staticInitializationVectorABMC1_13.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_80.go(byteArray87);
        staticInitializationVectorABMC1_13.go(byteArray87);
        byte[] byteArray97 = new byte[] { (byte) -1, (byte) 0, (byte) 1, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray97);
        staticInitializationVectorABMC1_0.go(byteArray97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray97);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_12.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        staticInitializationVectorABMC1_12.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray73);
        staticInitializationVectorABMC1_12.go(byteArray73);
        staticInitializationVectorABMC1_1.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        java.lang.Class<?> wildcardClass78 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_26.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_26.go(byteArray75);
        staticInitializationVectorABMC1_15.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_15.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray96 = new byte[] { (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray96);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass59 = byteArray57.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        staticInitializationVectorABMC1_11.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_79.go(byteArray85);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_79.go(byteArray91);
        staticInitializationVectorABMC1_48.go(byteArray91);
        staticInitializationVectorABMC1_11.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_46.go(byteArray52);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_46.go(byteArray58);
        staticInitializationVectorABMC1_15.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        java.lang.Class<?> wildcardClass62 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_60.go(byteArray72);
        staticInitializationVectorABMC1_37.go(byteArray72);
        byte[] byteArray76 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_37.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass79 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        java.lang.Class<?> wildcardClass46 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray84 = new byte[] { (byte) -1, (byte) 0, (byte) 1, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass86 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray42);
        staticInitializationVectorABMC1_8.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray56);
        staticInitializationVectorABMC1_8.go(byteArray56);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass68 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_44.go(byteArray50);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_44.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        staticInitializationVectorABMC1_54.go(byteArray72);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray83);
        staticInitializationVectorABMC1_44.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray93 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_91.go(byteArray93);
        staticInitializationVectorABMC1_90.go(byteArray93);
        staticInitializationVectorABMC1_86.go(byteArray93);
        staticInitializationVectorABMC1_44.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass99 = byteArray93.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        java.lang.Class<?> wildcardClass51 = byteArray48.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        staticInitializationVectorABMC1_22.go(byteArray71);
        staticInitializationVectorABMC1_11.go(byteArray71);
        staticInitializationVectorABMC1_0.go(byteArray71);
        java.lang.Class<?> wildcardClass79 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        java.lang.Class<?> wildcardClass28 = byteArray25.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_58.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass91 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_0.go(byteArray31);
        java.lang.Class<?> wildcardClass33 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_6.go(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_6.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        staticInitializationVectorABMC1_63.go(byteArray81);
        staticInitializationVectorABMC1_32.go(byteArray81);
        staticInitializationVectorABMC1_31.go(byteArray81);
        staticInitializationVectorABMC1_20.go(byteArray81);
        staticInitializationVectorABMC1_6.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass91 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        java.lang.Class<?> wildcardClass25 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_61.go(byteArray72);
        staticInitializationVectorABMC1_38.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass76 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        java.lang.Class<?> wildcardClass14 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        java.lang.Class<?> wildcardClass31 = byteArray29.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        staticInitializationVectorABMC1_22.go(byteArray71);
        staticInitializationVectorABMC1_11.go(byteArray71);
        staticInitializationVectorABMC1_0.go(byteArray71);
        java.lang.Class<?> wildcardClass79 = byteArray71.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        java.lang.Class<?> wildcardClass58 = byteArray53.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass82 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_0.go(byteArray49);
        java.lang.Class<?> wildcardClass51 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        staticInitializationVectorABMC1_1.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_38.go(byteArray81);
        staticInitializationVectorABMC1_1.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        java.lang.Class<?> wildcardClass58 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        java.lang.Class<?> wildcardClass47 = byteArray44.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        java.lang.Class<?> wildcardClass47 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        staticInitializationVectorABMC1_7.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        staticInitializationVectorABMC1_7.go(byteArray25);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_38.go(byteArray50);
        staticInitializationVectorABMC1_7.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_76.go(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_76.go(byteArray88);
        staticInitializationVectorABMC1_53.go(byteArray88);
        staticInitializationVectorABMC1_7.go(byteArray88);
        staticInitializationVectorABMC1_1.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        java.lang.Class<?> wildcardClass27 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        java.lang.Class<?> wildcardClass79 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        staticInitializationVectorABMC1_40.go(byteArray58);
        staticInitializationVectorABMC1_32.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        staticInitializationVectorABMC1_64.go(byteArray82);
        staticInitializationVectorABMC1_32.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        staticInitializationVectorABMC1_17.go(byteArray66);
        staticInitializationVectorABMC1_6.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_6.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        java.lang.Class<?> wildcardClass28 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_51.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_61.go(byteArray72);
        staticInitializationVectorABMC1_51.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass76 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_15.go(byteArray64);
        staticInitializationVectorABMC1_4.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        staticInitializationVectorABMC1_4.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass84 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_37.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_61.go(byteArray72);
        staticInitializationVectorABMC1_38.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass76 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass60 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        java.lang.Class<?> wildcardClass53 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass81 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_0.go(byteArray44);
        java.lang.Class<?> wildcardClass46 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        staticInitializationVectorABMC1_27.go(byteArray53);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray62);
        staticInitializationVectorABMC1_0.go(byteArray62);
        java.lang.Class<?> wildcardClass65 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        java.lang.Class<?> wildcardClass13 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray40);
        staticInitializationVectorABMC1_6.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray54);
        staticInitializationVectorABMC1_6.go(byteArray54);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_6.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass66 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray40);
        staticInitializationVectorABMC1_6.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray54);
        staticInitializationVectorABMC1_6.go(byteArray54);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_6.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass66 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray20 = null;
        staticInitializationVectorABMC1_14.go(byteArray20);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_14.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray53);
        staticInitializationVectorABMC1_14.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_14.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass69 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        staticInitializationVectorABMC1_30.go(byteArray48);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_61.go(byteArray79);
        staticInitializationVectorABMC1_30.go(byteArray79);
        staticInitializationVectorABMC1_29.go(byteArray79);
        staticInitializationVectorABMC1_23.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass88 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        staticInitializationVectorABMC1_20.go(byteArray69);
        staticInitializationVectorABMC1_19.go(byteArray69);
        staticInitializationVectorABMC1_8.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_8.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_10.go(byteArray60);
        staticInitializationVectorABMC1_4.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_68.go(byteArray79);
        staticInitializationVectorABMC1_4.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass83 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass60 = byteArray57.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_39.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_70.go(byteArray76);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_70.go(byteArray82);
        staticInitializationVectorABMC1_39.go(byteArray82);
        staticInitializationVectorABMC1_28.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass87 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_20.go(byteArray51);
        staticInitializationVectorABMC1_14.go(byteArray51);
        staticInitializationVectorABMC1_13.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        java.lang.Class<?> wildcardClass60 = byteArray51.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_1.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        java.lang.Class<?> wildcardClass62 = byteArray59.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_28.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        staticInitializationVectorABMC1_28.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass76 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_1.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        java.lang.Class<?> wildcardClass61 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        java.lang.Class<?> wildcardClass16 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_47.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        java.lang.Class<?> wildcardClass71 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        byte[] byteArray27 = null;
        staticInitializationVectorABMC1_0.go(byteArray27);
        java.lang.Class<?> wildcardClass29 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray50);
        java.lang.Class<?> wildcardClass52 = byteArray50.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_37.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        java.lang.Class<?> wildcardClass53 = byteArray49.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_60.go(byteArray72);
        staticInitializationVectorABMC1_37.go(byteArray72);
        byte[] byteArray76 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_37.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass79 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_11.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        staticInitializationVectorABMC1_11.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass78 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        java.lang.Class<?> wildcardClass51 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        staticInitializationVectorABMC1_27.go(byteArray53);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray62);
        staticInitializationVectorABMC1_0.go(byteArray62);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass67 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_39.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_70.go(byteArray76);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_70.go(byteArray82);
        staticInitializationVectorABMC1_39.go(byteArray82);
        staticInitializationVectorABMC1_28.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        staticInitializationVectorABMC1_7.go(byteArray38);
        staticInitializationVectorABMC1_1.go(byteArray38);
        staticInitializationVectorABMC1_0.go(byteArray38);
        java.lang.Class<?> wildcardClass46 = byteArray38.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_26.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_26.go(byteArray75);
        staticInitializationVectorABMC1_25.go(byteArray75);
        staticInitializationVectorABMC1_14.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass84 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_20.go(byteArray51);
        staticInitializationVectorABMC1_14.go(byteArray51);
        staticInitializationVectorABMC1_13.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        java.lang.Class<?> wildcardClass60 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_38.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray77);
        staticInitializationVectorABMC1_38.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_38.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass88 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_10.go(byteArray60);
        staticInitializationVectorABMC1_4.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_68.go(byteArray79);
        staticInitializationVectorABMC1_4.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass85 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_60.go(byteArray72);
        staticInitializationVectorABMC1_37.go(byteArray72);
        byte[] byteArray76 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_37.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass79 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_0.go(byteArray59);
        java.lang.Class<?> wildcardClass61 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_37.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray81);
        staticInitializationVectorABMC1_37.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        staticInitializationVectorABMC1_7.go(byteArray38);
        staticInitializationVectorABMC1_1.go(byteArray38);
        staticInitializationVectorABMC1_0.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_46.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_33.go(byteArray45);
        staticInitializationVectorABMC1_10.go(byteArray45);
        byte[] byteArray49 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_10.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        java.lang.Class<?> wildcardClass52 = byteArray49.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_1.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        java.lang.Class<?> wildcardClass61 = byteArray58.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass82 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_0.go(byteArray66);
        java.lang.Class<?> wildcardClass68 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_51.go(byteArray63);
        staticInitializationVectorABMC1_28.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass67 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass59 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        staticInitializationVectorABMC1_22.go(byteArray71);
        staticInitializationVectorABMC1_11.go(byteArray71);
        staticInitializationVectorABMC1_0.go(byteArray71);
        byte[] byteArray79 = new byte[] {};
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass81 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        staticInitializationVectorABMC1_36.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_73.go(byteArray84);
        staticInitializationVectorABMC1_36.go(byteArray84);
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass96 = byteArray93.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        staticInitializationVectorABMC1_31.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass64 = byteArray57.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        staticInitializationVectorABMC1_36.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_73.go(byteArray84);
        staticInitializationVectorABMC1_36.go(byteArray84);
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_33.go(byteArray45);
        staticInitializationVectorABMC1_10.go(byteArray45);
        byte[] byteArray49 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_10.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        java.lang.Class<?> wildcardClass52 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        java.lang.Class<?> wildcardClass56 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_47.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_10.go(byteArray60);
        staticInitializationVectorABMC1_4.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_68.go(byteArray79);
        staticInitializationVectorABMC1_4.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass83 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_49.go(byteArray61);
        staticInitializationVectorABMC1_26.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_64.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_72.go(byteArray90);
        staticInitializationVectorABMC1_64.go(byteArray90);
        staticInitializationVectorABMC1_26.go(byteArray90);
        staticInitializationVectorABMC1_15.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_37.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        java.lang.Class<?> wildcardClass63 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_71.go(byteArray77);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_71.go(byteArray83);
        staticInitializationVectorABMC1_58.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass87 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        staticInitializationVectorABMC1_7.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        staticInitializationVectorABMC1_7.go(byteArray25);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_38.go(byteArray50);
        staticInitializationVectorABMC1_7.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_76.go(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_76.go(byteArray88);
        staticInitializationVectorABMC1_53.go(byteArray88);
        staticInitializationVectorABMC1_7.go(byteArray88);
        staticInitializationVectorABMC1_1.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass94 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_28.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        staticInitializationVectorABMC1_28.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass76 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_20.go(byteArray51);
        staticInitializationVectorABMC1_14.go(byteArray51);
        staticInitializationVectorABMC1_13.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_0.go(byteArray60);
        java.lang.Class<?> wildcardClass62 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        java.lang.Class<?> wildcardClass69 = byteArray61.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_82.go(byteArray88);
        byte[] byteArray94 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_82.go(byteArray94);
        staticInitializationVectorABMC1_59.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        staticInitializationVectorABMC1_20.go(byteArray69);
        staticInitializationVectorABMC1_19.go(byteArray69);
        staticInitializationVectorABMC1_8.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_8.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass90 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        staticInitializationVectorABMC1_30.go(byteArray48);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_61.go(byteArray79);
        staticInitializationVectorABMC1_30.go(byteArray79);
        staticInitializationVectorABMC1_29.go(byteArray79);
        staticInitializationVectorABMC1_23.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_0.go(byteArray51);
        java.lang.Class<?> wildcardClass53 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        java.lang.Class<?> wildcardClass24 = byteArray21.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_41.go(byteArray47);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_41.go(byteArray53);
        staticInitializationVectorABMC1_28.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        java.lang.Class<?> wildcardClass57 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_4.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_35.go(byteArray47);
        staticInitializationVectorABMC1_4.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_50.go(byteArray85);
        staticInitializationVectorABMC1_4.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass90 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray40);
        staticInitializationVectorABMC1_6.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray54);
        staticInitializationVectorABMC1_6.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_6.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_6.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass70 = byteArray65.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        staticInitializationVectorABMC1_63.go(byteArray81);
        staticInitializationVectorABMC1_32.go(byteArray81);
        staticInitializationVectorABMC1_31.go(byteArray81);
        staticInitializationVectorABMC1_25.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass81 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_29.go(byteArray41);
        staticInitializationVectorABMC1_6.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        java.lang.Class<?> wildcardClass45 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        byte[] byteArray27 = null;
        staticInitializationVectorABMC1_0.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        staticInitializationVectorABMC1_30.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray64);
        staticInitializationVectorABMC1_30.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_67.go(byteArray78);
        staticInitializationVectorABMC1_30.go(byteArray78);
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_30.go(byteArray87);
        staticInitializationVectorABMC1_29.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass91 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_20.go(byteArray51);
        staticInitializationVectorABMC1_14.go(byteArray51);
        staticInitializationVectorABMC1_13.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_60.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_60.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_28.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        staticInitializationVectorABMC1_28.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass78 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_1.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        java.lang.Class<?> wildcardClass62 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_41.go(byteArray47);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_41.go(byteArray53);
        staticInitializationVectorABMC1_10.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_56.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_79.go(byteArray85);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_79.go(byteArray91);
        staticInitializationVectorABMC1_56.go(byteArray91);
        staticInitializationVectorABMC1_10.go(byteArray91);
        staticInitializationVectorABMC1_4.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        byte[] byteArray27 = null;
        staticInitializationVectorABMC1_0.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        staticInitializationVectorABMC1_30.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray64);
        staticInitializationVectorABMC1_30.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_67.go(byteArray78);
        staticInitializationVectorABMC1_30.go(byteArray78);
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_30.go(byteArray87);
        staticInitializationVectorABMC1_29.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray54 = null;
        staticInitializationVectorABMC1_48.go(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_48.go(byteArray60);
        staticInitializationVectorABMC1_17.go(byteArray60);
        staticInitializationVectorABMC1_6.go(byteArray60);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray66);
        staticInitializationVectorABMC1_0.go(byteArray66);
        java.lang.Class<?> wildcardClass69 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_11.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        java.lang.Class<?> wildcardClass44 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_44.go(byteArray75);
        staticInitializationVectorABMC1_38.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass83 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray49);
        staticInitializationVectorABMC1_6.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_75.go(byteArray81);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_75.go(byteArray87);
        staticInitializationVectorABMC1_52.go(byteArray87);
        staticInitializationVectorABMC1_6.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray94 = new byte[] { (byte) 100, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_32.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass70 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_58.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_43.go(byteArray49);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_43.go(byteArray55);
        staticInitializationVectorABMC1_12.go(byteArray55);
        staticInitializationVectorABMC1_1.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_82.go(byteArray93);
        staticInitializationVectorABMC1_59.go(byteArray93);
        staticInitializationVectorABMC1_1.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray49);
        staticInitializationVectorABMC1_6.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_75.go(byteArray81);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_75.go(byteArray87);
        staticInitializationVectorABMC1_52.go(byteArray87);
        staticInitializationVectorABMC1_6.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray94 = new byte[] { (byte) 100, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray94);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_15.go(byteArray64);
        staticInitializationVectorABMC1_4.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        staticInitializationVectorABMC1_4.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_7.go(byteArray13);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_7.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        staticInitializationVectorABMC1_64.go(byteArray82);
        staticInitializationVectorABMC1_33.go(byteArray82);
        staticInitializationVectorABMC1_32.go(byteArray82);
        staticInitializationVectorABMC1_21.go(byteArray82);
        staticInitializationVectorABMC1_7.go(byteArray82);
        staticInitializationVectorABMC1_1.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass93 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_71.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        byte[] byteArray28 = null;
        staticInitializationVectorABMC1_22.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        staticInitializationVectorABMC1_30.go(byteArray48);
        staticInitializationVectorABMC1_22.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        staticInitializationVectorABMC1_54.go(byteArray72);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray83);
        staticInitializationVectorABMC1_22.go(byteArray83);
        staticInitializationVectorABMC1_11.go(byteArray83);
        staticInitializationVectorABMC1_10.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray42);
        staticInitializationVectorABMC1_8.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray56);
        staticInitializationVectorABMC1_8.go(byteArray56);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass68 = byteArray65.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        staticInitializationVectorABMC1_31.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass64 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_43.go(byteArray49);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_43.go(byteArray55);
        staticInitializationVectorABMC1_12.go(byteArray55);
        staticInitializationVectorABMC1_1.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_82.go(byteArray93);
        staticInitializationVectorABMC1_59.go(byteArray93);
        staticInitializationVectorABMC1_1.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass98 = byteArray93.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_71.go(byteArray77);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_71.go(byteArray83);
        staticInitializationVectorABMC1_58.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_1.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        java.lang.Class<?> wildcardClass57 = byteArray50.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass78 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_35.go(byteArray46);
        staticInitializationVectorABMC1_12.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray60);
        staticInitializationVectorABMC1_12.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_12.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_12.go(byteArray71);
        staticInitializationVectorABMC1_6.go(byteArray71);
        staticInitializationVectorABMC1_0.go(byteArray71);
        java.lang.Class<?> wildcardClass77 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_81.go(byteArray87);
        byte[] byteArray93 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_81.go(byteArray93);
        staticInitializationVectorABMC1_58.go(byteArray93);
        byte[] byteArray97 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_58.go(byteArray97);
        staticInitializationVectorABMC1_0.go(byteArray97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray97);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        byte[] byteArray28 = null;
        staticInitializationVectorABMC1_0.go(byteArray28);
        java.lang.Class<?> wildcardClass30 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray40);
        staticInitializationVectorABMC1_6.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray54);
        staticInitializationVectorABMC1_6.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_6.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_6.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass70 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray65);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass73 = byteArray70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_34.go(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_34.go(byteArray46);
        staticInitializationVectorABMC1_11.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_49.go(byteArray75);
        staticInitializationVectorABMC1_11.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass83 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray20 = null;
        staticInitializationVectorABMC1_14.go(byteArray20);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_14.go(byteArray26);
        staticInitializationVectorABMC1_1.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray40);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_29.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray73);
        staticInitializationVectorABMC1_29.go(byteArray73);
        staticInitializationVectorABMC1_1.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        java.lang.Class<?> wildcardClass78 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_41.go(byteArray47);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_41.go(byteArray53);
        staticInitializationVectorABMC1_28.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        java.lang.Class<?> wildcardClass57 = byteArray53.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_60.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_84.go(byteArray91);
        staticInitializationVectorABMC1_73.go(byteArray91);
        staticInitializationVectorABMC1_60.go(byteArray91);
        staticInitializationVectorABMC1_54.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass99 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_4.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_35.go(byteArray47);
        staticInitializationVectorABMC1_4.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_50.go(byteArray85);
        staticInitializationVectorABMC1_4.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_71.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_84.go(byteArray90);
        byte[] byteArray96 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_84.go(byteArray96);
        staticInitializationVectorABMC1_71.go(byteArray96);
        staticInitializationVectorABMC1_0.go(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray96);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_51.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_61.go(byteArray72);
        staticInitializationVectorABMC1_51.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass76 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_75.go(byteArray81);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_75.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_85.go(byteArray88);
        byte[] byteArray96 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_85.go(byteArray96);
        staticInitializationVectorABMC1_75.go(byteArray96);
        staticInitializationVectorABMC1_0.go(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray96);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_35.go(byteArray46);
        staticInitializationVectorABMC1_12.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray60);
        staticInitializationVectorABMC1_12.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_12.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_12.go(byteArray71);
        staticInitializationVectorABMC1_6.go(byteArray71);
        staticInitializationVectorABMC1_0.go(byteArray71);
        java.lang.Class<?> wildcardClass77 = byteArray71.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_41.go(byteArray47);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_41.go(byteArray53);
        staticInitializationVectorABMC1_28.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass69 = byteArray64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_1.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        byte[] byteArray57 = new byte[] {};
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_72.go(byteArray90);
        staticInitializationVectorABMC1_59.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass97 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        staticInitializationVectorABMC1_40.go(byteArray58);
        staticInitializationVectorABMC1_32.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        staticInitializationVectorABMC1_64.go(byteArray82);
        staticInitializationVectorABMC1_32.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass89 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        staticInitializationVectorABMC1_34.go(byteArray52);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_34.go(byteArray83);
        staticInitializationVectorABMC1_33.go(byteArray83);
        staticInitializationVectorABMC1_27.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass92 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        java.lang.Class<?> wildcardClass63 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_41.go(byteArray47);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_41.go(byteArray53);
        staticInitializationVectorABMC1_28.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass69 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        java.lang.Class<?> wildcardClass60 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_51.go(byteArray63);
        staticInitializationVectorABMC1_28.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass67 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        staticInitializationVectorABMC1_51.go(byteArray77);
        staticInitializationVectorABMC1_47.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        java.lang.Class<?> wildcardClass85 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        staticInitializationVectorABMC1_34.go(byteArray52);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_65.go(byteArray71);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_65.go(byteArray77);
        staticInitializationVectorABMC1_34.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_80.go(byteArray87);
        staticInitializationVectorABMC1_34.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass93 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_38.go(byteArray64);
        staticInitializationVectorABMC1_34.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_72.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_72.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_38.go(byteArray64);
        staticInitializationVectorABMC1_34.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_72.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_72.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass87 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        staticInitializationVectorABMC1_7.go(byteArray38);
        staticInitializationVectorABMC1_1.go(byteArray38);
        staticInitializationVectorABMC1_0.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_46.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray50);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_0.go(byteArray52);
        java.lang.Class<?> wildcardClass54 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_1.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        byte[] byteArray57 = new byte[] {};
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass59 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        staticInitializationVectorABMC1_27.go(byteArray53);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray62);
        staticInitializationVectorABMC1_0.go(byteArray62);
        java.lang.Class<?> wildcardClass65 = byteArray62.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_76.go(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_76.go(byteArray88);
        staticInitializationVectorABMC1_45.go(byteArray88);
        staticInitializationVectorABMC1_34.go(byteArray88);
        staticInitializationVectorABMC1_23.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass94 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_0.go(byteArray67);
        java.lang.Class<?> wildcardClass69 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_41.go(byteArray47);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_41.go(byteArray53);
        staticInitializationVectorABMC1_28.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass59 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_20.go(byteArray51);
        staticInitializationVectorABMC1_14.go(byteArray51);
        staticInitializationVectorABMC1_13.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_60.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_60.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        staticInitializationVectorABMC1_7.go(byteArray38);
        staticInitializationVectorABMC1_1.go(byteArray38);
        staticInitializationVectorABMC1_0.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        staticInitializationVectorABMC1_46.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_83.go(byteArray94);
        staticInitializationVectorABMC1_46.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_71.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray88 = new byte[] { (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass90 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_47.go(byteArray53);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_47.go(byteArray59);
        staticInitializationVectorABMC1_24.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        java.lang.Class<?> wildcardClass63 = byteArray59.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        java.lang.Class<?> wildcardClass37 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_76.go(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_76.go(byteArray88);
        staticInitializationVectorABMC1_45.go(byteArray88);
        staticInitializationVectorABMC1_34.go(byteArray88);
        staticInitializationVectorABMC1_23.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        java.lang.Class<?> wildcardClass37 = byteArray30.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_60.go(byteArray72);
        staticInitializationVectorABMC1_37.go(byteArray72);
        byte[] byteArray76 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_37.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass79 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_37.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_63.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass78 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_10.go(byteArray60);
        staticInitializationVectorABMC1_4.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_68.go(byteArray79);
        staticInitializationVectorABMC1_4.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_1.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray87);
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_58.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        java.lang.Class<?> wildcardClass63 = byteArray59.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        staticInitializationVectorABMC1_63.go(byteArray81);
        staticInitializationVectorABMC1_32.go(byteArray81);
        staticInitializationVectorABMC1_31.go(byteArray81);
        staticInitializationVectorABMC1_25.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass90 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_37.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass84 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass78 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_71.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray88 = new byte[] { (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        staticInitializationVectorABMC1_51.go(byteArray77);
        staticInitializationVectorABMC1_47.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        staticInitializationVectorABMC1_58.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_47.go(byteArray53);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_47.go(byteArray59);
        staticInitializationVectorABMC1_24.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass75 = byteArray70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray50);
        java.lang.Class<?> wildcardClass52 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        staticInitializationVectorABMC1_63.go(byteArray81);
        staticInitializationVectorABMC1_50.go(byteArray81);
        staticInitializationVectorABMC1_44.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass89 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_29.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_39.go(byteArray68);
        staticInitializationVectorABMC1_29.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        staticInitializationVectorABMC1_29.go(byteArray78);
        staticInitializationVectorABMC1_6.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_60.go(byteArray72);
        staticInitializationVectorABMC1_37.go(byteArray72);
        byte[] byteArray76 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_37.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass81 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_49.go(byteArray61);
        staticInitializationVectorABMC1_26.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_64.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_72.go(byteArray90);
        staticInitializationVectorABMC1_64.go(byteArray90);
        staticInitializationVectorABMC1_26.go(byteArray90);
        staticInitializationVectorABMC1_15.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass99 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_53.go(byteArray59);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_53.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass68 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_65.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_84.go(byteArray91);
        staticInitializationVectorABMC1_73.go(byteArray91);
        staticInitializationVectorABMC1_65.go(byteArray91);
        staticInitializationVectorABMC1_61.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        java.lang.Class<?> wildcardClass56 = byteArray53.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        staticInitializationVectorABMC1_7.go(byteArray38);
        staticInitializationVectorABMC1_1.go(byteArray38);
        staticInitializationVectorABMC1_0.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        staticInitializationVectorABMC1_46.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_83.go(byteArray94);
        staticInitializationVectorABMC1_46.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass98 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_65.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_84.go(byteArray91);
        staticInitializationVectorABMC1_73.go(byteArray91);
        staticInitializationVectorABMC1_65.go(byteArray91);
        staticInitializationVectorABMC1_61.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass99 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_46.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_4.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_72.go(byteArray90);
        staticInitializationVectorABMC1_59.go(byteArray90);
        staticInitializationVectorABMC1_4.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray45);
        staticInitializationVectorABMC1_11.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_11.go(byteArray59);
        staticInitializationVectorABMC1_10.go(byteArray59);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_10.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_10.go(byteArray67);
        staticInitializationVectorABMC1_0.go(byteArray67);
        java.lang.Class<?> wildcardClass71 = byteArray67.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        staticInitializationVectorABMC1_17.go(byteArray66);
        staticInitializationVectorABMC1_6.go(byteArray66);
        staticInitializationVectorABMC1_0.go(byteArray66);
        java.lang.Class<?> wildcardClass74 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_71.go(byteArray89);
        staticInitializationVectorABMC1_63.go(byteArray89);
        staticInitializationVectorABMC1_59.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass97 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_62.go(byteArray80);
        staticInitializationVectorABMC1_31.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_1.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        java.lang.Class<?> wildcardClass58 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_32.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass70 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_10.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        staticInitializationVectorABMC1_40.go(byteArray58);
        staticInitializationVectorABMC1_32.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        staticInitializationVectorABMC1_64.go(byteArray82);
        byte[] byteArray93 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_64.go(byteArray93);
        staticInitializationVectorABMC1_32.go(byteArray93);
        staticInitializationVectorABMC1_21.go(byteArray93);
        staticInitializationVectorABMC1_20.go(byteArray93);
        staticInitializationVectorABMC1_10.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray47);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_36.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_51.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_82.go(byteArray88);
        byte[] byteArray94 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_82.go(byteArray94);
        staticInitializationVectorABMC1_51.go(byteArray94);
        staticInitializationVectorABMC1_36.go(byteArray94);
        staticInitializationVectorABMC1_13.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        staticInitializationVectorABMC1_34.go(byteArray52);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_34.go(byteArray83);
        staticInitializationVectorABMC1_33.go(byteArray83);
        staticInitializationVectorABMC1_27.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_37.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray81);
        staticInitializationVectorABMC1_37.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray20 = null;
        staticInitializationVectorABMC1_14.go(byteArray20);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_14.go(byteArray26);
        staticInitializationVectorABMC1_1.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray40);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_29.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray73);
        staticInitializationVectorABMC1_29.go(byteArray73);
        staticInitializationVectorABMC1_1.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        java.lang.Class<?> wildcardClass78 = byteArray73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_0.go(byteArray67);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        java.lang.Class<?> wildcardClass71 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_43.go(byteArray49);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_43.go(byteArray55);
        staticInitializationVectorABMC1_12.go(byteArray55);
        staticInitializationVectorABMC1_1.go(byteArray55);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_1.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_61.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_80.go(byteArray87);
        staticInitializationVectorABMC1_69.go(byteArray87);
        staticInitializationVectorABMC1_61.go(byteArray87);
        staticInitializationVectorABMC1_1.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass95 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_51.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_61.go(byteArray72);
        staticInitializationVectorABMC1_51.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_92 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray94 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_92.go(byteArray94);
        staticInitializationVectorABMC1_91.go(byteArray94);
        staticInitializationVectorABMC1_87.go(byteArray94);
        staticInitializationVectorABMC1_76.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_61.go(byteArray72);
        staticInitializationVectorABMC1_38.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_75.go(byteArray86);
        staticInitializationVectorABMC1_38.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_38.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass95 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_0.go(byteArray55);
        java.lang.Class<?> wildcardClass58 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass79 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_41.go(byteArray47);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_41.go(byteArray53);
        staticInitializationVectorABMC1_10.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_56.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_79.go(byteArray85);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_79.go(byteArray91);
        staticInitializationVectorABMC1_56.go(byteArray91);
        staticInitializationVectorABMC1_10.go(byteArray91);
        staticInitializationVectorABMC1_4.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass97 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_7.go(byteArray13);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_7.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        staticInitializationVectorABMC1_64.go(byteArray82);
        staticInitializationVectorABMC1_33.go(byteArray82);
        staticInitializationVectorABMC1_32.go(byteArray82);
        staticInitializationVectorABMC1_21.go(byteArray82);
        staticInitializationVectorABMC1_7.go(byteArray82);
        staticInitializationVectorABMC1_1.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        staticInitializationVectorABMC1_30.go(byteArray48);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_61.go(byteArray79);
        staticInitializationVectorABMC1_30.go(byteArray79);
        staticInitializationVectorABMC1_19.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray93 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_91.go(byteArray93);
        staticInitializationVectorABMC1_90.go(byteArray93);
        staticInitializationVectorABMC1_86.go(byteArray93);
        staticInitializationVectorABMC1_19.go(byteArray93);
        staticInitializationVectorABMC1_15.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass79 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        staticInitializationVectorABMC1_34.go(byteArray52);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_65.go(byteArray71);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_65.go(byteArray77);
        staticInitializationVectorABMC1_34.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_80.go(byteArray87);
        staticInitializationVectorABMC1_34.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_11.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        java.lang.Class<?> wildcardClass44 = byteArray37.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_0.go(byteArray41);
        java.lang.Class<?> wildcardClass43 = byteArray41.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_37.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray81);
        staticInitializationVectorABMC1_37.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_29.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_39.go(byteArray68);
        staticInitializationVectorABMC1_29.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        staticInitializationVectorABMC1_29.go(byteArray78);
        staticInitializationVectorABMC1_6.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_23.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        staticInitializationVectorABMC1_23.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_80.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_0.go(byteArray34);
        java.lang.Class<?> wildcardClass36 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_47.go(byteArray53);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_47.go(byteArray59);
        staticInitializationVectorABMC1_24.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass75 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_53.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_61.go(byteArray79);
        staticInitializationVectorABMC1_53.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass86 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_37.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        java.lang.Class<?> wildcardClass63 = byteArray59.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_23.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        staticInitializationVectorABMC1_23.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        java.lang.Class<?> wildcardClass80 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        staticInitializationVectorABMC1_22.go(byteArray53);
        staticInitializationVectorABMC1_16.go(byteArray53);
        staticInitializationVectorABMC1_15.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        java.lang.Class<?> wildcardClass62 = byteArray53.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        staticInitializationVectorABMC1_22.go(byteArray71);
        staticInitializationVectorABMC1_11.go(byteArray71);
        staticInitializationVectorABMC1_0.go(byteArray71);
        byte[] byteArray79 = new byte[] {};
        staticInitializationVectorABMC1_0.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        staticInitializationVectorABMC1_63.go(byteArray81);
        staticInitializationVectorABMC1_50.go(byteArray81);
        staticInitializationVectorABMC1_44.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_44.go(byteArray75);
        staticInitializationVectorABMC1_38.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass83 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_13.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_57.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_85.go(byteArray88);
        staticInitializationVectorABMC1_81.go(byteArray88);
        staticInitializationVectorABMC1_70.go(byteArray88);
        staticInitializationVectorABMC1_57.go(byteArray88);
        staticInitializationVectorABMC1_51.go(byteArray88);
        staticInitializationVectorABMC1_13.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_0.go(byteArray55);
        java.lang.Class<?> wildcardClass58 = byteArray55.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray65);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        byte[] byteArray73 = null;
        staticInitializationVectorABMC1_0.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray93 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_91.go(byteArray93);
        staticInitializationVectorABMC1_90.go(byteArray93);
        staticInitializationVectorABMC1_86.go(byteArray93);
        staticInitializationVectorABMC1_75.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass99 = byteArray93.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        staticInitializationVectorABMC1_22.go(byteArray71);
        staticInitializationVectorABMC1_11.go(byteArray71);
        staticInitializationVectorABMC1_0.go(byteArray71);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass81 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        staticInitializationVectorABMC1_41.go(byteArray59);
        staticInitializationVectorABMC1_33.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_33.go(byteArray83);
        staticInitializationVectorABMC1_10.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        staticInitializationVectorABMC1_41.go(byteArray59);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_41.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_72.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_72.go(byteArray84);
        staticInitializationVectorABMC1_41.go(byteArray84);
        staticInitializationVectorABMC1_30.go(byteArray84);
        byte[] byteArray90 = new byte[] { (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray90);
        staticInitializationVectorABMC1_24.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_58.go(byteArray84);
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_58.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_62.go(byteArray80);
        staticInitializationVectorABMC1_31.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_43.go(byteArray49);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_43.go(byteArray55);
        staticInitializationVectorABMC1_12.go(byteArray55);
        staticInitializationVectorABMC1_1.go(byteArray55);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_1.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_61.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_80.go(byteArray87);
        staticInitializationVectorABMC1_69.go(byteArray87);
        staticInitializationVectorABMC1_61.go(byteArray87);
        staticInitializationVectorABMC1_1.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_14.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass66 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_4.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_17.go(byteArray23);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_17.go(byteArray29);
        staticInitializationVectorABMC1_4.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_32.go(byteArray57);
        staticInitializationVectorABMC1_4.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 0, (byte) 10, (byte) 10, (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray67);
        java.lang.Class<?> wildcardClass69 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray45);
        staticInitializationVectorABMC1_11.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_11.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_11.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass68 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        java.lang.Class<?> wildcardClass25 = byteArray22.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_37.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass91 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray45);
        staticInitializationVectorABMC1_11.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_11.go(byteArray59);
        staticInitializationVectorABMC1_10.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_10.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass69 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_80.go(byteArray87);
        staticInitializationVectorABMC1_69.go(byteArray87);
        staticInitializationVectorABMC1_38.go(byteArray87);
        staticInitializationVectorABMC1_37.go(byteArray87);
        staticInitializationVectorABMC1_31.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass96 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_71.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray88 = new byte[] { (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray88);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_90.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_67.go(byteArray85);
        staticInitializationVectorABMC1_54.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass92 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_46.go(byteArray52);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_46.go(byteArray58);
        staticInitializationVectorABMC1_15.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_62.go(byteArray68);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_62.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        java.lang.Class<?> wildcardClass77 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray45);
        staticInitializationVectorABMC1_11.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_11.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_11.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass68 = byteArray64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_38.go(byteArray64);
        staticInitializationVectorABMC1_34.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass72 = byteArray64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_80.go(byteArray87);
        staticInitializationVectorABMC1_69.go(byteArray87);
        staticInitializationVectorABMC1_38.go(byteArray87);
        staticInitializationVectorABMC1_37.go(byteArray87);
        staticInitializationVectorABMC1_31.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_13.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_13.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_40.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        staticInitializationVectorABMC1_40.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_72.go(byteArray90);
        staticInitializationVectorABMC1_40.go(byteArray90);
        staticInitializationVectorABMC1_13.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        staticInitializationVectorABMC1_10.go(byteArray36);
        staticInitializationVectorABMC1_0.go(byteArray36);
        java.lang.Class<?> wildcardClass43 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_20.go(byteArray51);
        staticInitializationVectorABMC1_14.go(byteArray51);
        staticInitializationVectorABMC1_13.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_0.go(byteArray60);
        byte[] byteArray62 = null;
        staticInitializationVectorABMC1_0.go(byteArray62);
        java.lang.Class<?> wildcardClass64 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        staticInitializationVectorABMC1_34.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_57.go(byteArray68);
        staticInitializationVectorABMC1_34.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_71.go(byteArray82);
        staticInitializationVectorABMC1_34.go(byteArray82);
        staticInitializationVectorABMC1_33.go(byteArray82);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_33.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_33.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass94 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_13.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_57.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_85.go(byteArray88);
        staticInitializationVectorABMC1_81.go(byteArray88);
        staticInitializationVectorABMC1_70.go(byteArray88);
        staticInitializationVectorABMC1_57.go(byteArray88);
        staticInitializationVectorABMC1_51.go(byteArray88);
        staticInitializationVectorABMC1_13.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass97 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_1.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray87);
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_58.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass95 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_37.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_76.go(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_76.go(byteArray88);
        staticInitializationVectorABMC1_63.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass92 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        staticInitializationVectorABMC1_34.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_57.go(byteArray68);
        staticInitializationVectorABMC1_34.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_71.go(byteArray82);
        staticInitializationVectorABMC1_34.go(byteArray82);
        staticInitializationVectorABMC1_33.go(byteArray82);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_33.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_33.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray39 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        staticInitializationVectorABMC1_41.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_64.go(byteArray75);
        staticInitializationVectorABMC1_41.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_78.go(byteArray89);
        staticInitializationVectorABMC1_41.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass93 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_14.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_0.go(byteArray61);
        java.lang.Class<?> wildcardClass63 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_13.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_13.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_40.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        staticInitializationVectorABMC1_40.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_72.go(byteArray90);
        staticInitializationVectorABMC1_40.go(byteArray90);
        staticInitializationVectorABMC1_13.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass98 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_53.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_61.go(byteArray79);
        staticInitializationVectorABMC1_53.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_66.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        java.lang.Class<?> wildcardClass80 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_60.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_84.go(byteArray91);
        staticInitializationVectorABMC1_73.go(byteArray91);
        staticInitializationVectorABMC1_60.go(byteArray91);
        staticInitializationVectorABMC1_54.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        staticInitializationVectorABMC1_22.go(byteArray71);
        staticInitializationVectorABMC1_11.go(byteArray71);
        staticInitializationVectorABMC1_0.go(byteArray71);
        byte[] byteArray79 = new byte[] {};
        staticInitializationVectorABMC1_0.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass88 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        staticInitializationVectorABMC1_41.go(byteArray59);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_41.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_72.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_72.go(byteArray84);
        staticInitializationVectorABMC1_41.go(byteArray84);
        staticInitializationVectorABMC1_30.go(byteArray84);
        byte[] byteArray90 = new byte[] { (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray90);
        staticInitializationVectorABMC1_24.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass94 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_51.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_82.go(byteArray88);
        byte[] byteArray94 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_82.go(byteArray94);
        staticInitializationVectorABMC1_51.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass98 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_0.go(byteArray41);
        java.lang.Class<?> wildcardClass43 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        java.lang.Class<?> wildcardClass34 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray65);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        byte[] byteArray73 = null;
        staticInitializationVectorABMC1_0.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray93 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_91.go(byteArray93);
        staticInitializationVectorABMC1_90.go(byteArray93);
        staticInitializationVectorABMC1_86.go(byteArray93);
        staticInitializationVectorABMC1_75.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_53.go(byteArray59);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_53.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass68 = byteArray65.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray30 = null;
        staticInitializationVectorABMC1_24.go(byteArray30);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_24.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        staticInitializationVectorABMC1_34.go(byteArray52);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray63);
        staticInitializationVectorABMC1_24.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_24.go(byteArray73);
        staticInitializationVectorABMC1_1.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        java.lang.Class<?> wildcardClass80 = byteArray73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        byte[] byteArray28 = null;
        staticInitializationVectorABMC1_22.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        staticInitializationVectorABMC1_30.go(byteArray48);
        staticInitializationVectorABMC1_22.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        staticInitializationVectorABMC1_54.go(byteArray72);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray83);
        staticInitializationVectorABMC1_22.go(byteArray83);
        staticInitializationVectorABMC1_11.go(byteArray83);
        staticInitializationVectorABMC1_10.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass89 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_68.go(byteArray86);
        staticInitializationVectorABMC1_55.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_93 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray95 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_93.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        byte[] byteArray98 = null;
        staticInitializationVectorABMC1_0.go(byteArray98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_29.go(byteArray41);
        staticInitializationVectorABMC1_6.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_76.go(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_76.go(byteArray88);
        staticInitializationVectorABMC1_45.go(byteArray88);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_92 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray94 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_92.go(byteArray94);
        staticInitializationVectorABMC1_91.go(byteArray94);
        staticInitializationVectorABMC1_45.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass99 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_67.go(byteArray85);
        staticInitializationVectorABMC1_54.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray35);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_6.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_6.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_6.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_59.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_67.go(byteArray85);
        staticInitializationVectorABMC1_59.go(byteArray85);
        staticInitializationVectorABMC1_6.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_11.go(byteArray37);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_11.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_49.go(byteArray75);
        staticInitializationVectorABMC1_45.go(byteArray75);
        staticInitializationVectorABMC1_11.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass84 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        byte[] byteArray28 = null;
        staticInitializationVectorABMC1_0.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray41);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_30.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_76.go(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_76.go(byteArray88);
        staticInitializationVectorABMC1_45.go(byteArray88);
        staticInitializationVectorABMC1_30.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass93 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        staticInitializationVectorABMC1_58.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass84 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray65);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass73 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        staticInitializationVectorABMC1_22.go(byteArray71);
        staticInitializationVectorABMC1_11.go(byteArray71);
        staticInitializationVectorABMC1_0.go(byteArray71);
        byte[] byteArray79 = new byte[] {};
        staticInitializationVectorABMC1_0.go(byteArray79);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass83 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        staticInitializationVectorABMC1_17.go(byteArray66);
        staticInitializationVectorABMC1_6.go(byteArray66);
        staticInitializationVectorABMC1_0.go(byteArray66);
        java.lang.Class<?> wildcardClass74 = byteArray66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray45);
        staticInitializationVectorABMC1_11.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_11.go(byteArray59);
        staticInitializationVectorABMC1_10.go(byteArray59);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_10.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_10.go(byteArray67);
        staticInitializationVectorABMC1_0.go(byteArray67);
        java.lang.Class<?> wildcardClass71 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        staticInitializationVectorABMC1_1.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_38.go(byteArray81);
        staticInitializationVectorABMC1_1.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray91 = new byte[] { (byte) -1, (byte) 1, (byte) 10 };
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_0.go(byteArray47);
        java.lang.Class<?> wildcardClass49 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_1.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        java.lang.Class<?> wildcardClass58 = byteArray54.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_11.go(byteArray37);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_11.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_49.go(byteArray75);
        staticInitializationVectorABMC1_45.go(byteArray75);
        staticInitializationVectorABMC1_11.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        staticInitializationVectorABMC1_31.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_64.go(byteArray70);
        byte[] byteArray72 = null;
        staticInitializationVectorABMC1_64.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_74.go(byteArray85);
        staticInitializationVectorABMC1_64.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_47.go(byteArray53);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_47.go(byteArray59);
        staticInitializationVectorABMC1_24.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        java.lang.Class<?> wildcardClass63 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        java.lang.Class<?> wildcardClass57 = byteArray54.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_4.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_17.go(byteArray23);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_17.go(byteArray29);
        staticInitializationVectorABMC1_4.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_32.go(byteArray57);
        staticInitializationVectorABMC1_4.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass62 = byteArray57.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_23.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray84);
        staticInitializationVectorABMC1_23.go(byteArray84);
        staticInitializationVectorABMC1_12.go(byteArray84);
        staticInitializationVectorABMC1_11.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        byte[] byteArray28 = null;
        staticInitializationVectorABMC1_0.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray41);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_30.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_76.go(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_76.go(byteArray88);
        staticInitializationVectorABMC1_45.go(byteArray88);
        staticInitializationVectorABMC1_30.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_63.go(byteArray75);
        staticInitializationVectorABMC1_32.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass79 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray35);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_6.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_6.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_6.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_59.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_67.go(byteArray85);
        staticInitializationVectorABMC1_59.go(byteArray85);
        staticInitializationVectorABMC1_6.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass93 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray50);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_0.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_54.go(byteArray60);
        byte[] byteArray62 = null;
        staticInitializationVectorABMC1_54.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_64.go(byteArray75);
        staticInitializationVectorABMC1_54.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass79 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_81.go(byteArray87);
        byte[] byteArray93 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_81.go(byteArray93);
        staticInitializationVectorABMC1_50.go(byteArray93);
        staticInitializationVectorABMC1_36.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass98 = byteArray93.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_29.go(byteArray41);
        staticInitializationVectorABMC1_6.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_45.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray84);
        staticInitializationVectorABMC1_45.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_45.go(byteArray90);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_94 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray96 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_94.go(byteArray96);
        staticInitializationVectorABMC1_45.go(byteArray96);
        staticInitializationVectorABMC1_0.go(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray96);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_61.go(byteArray72);
        staticInitializationVectorABMC1_38.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_75.go(byteArray86);
        staticInitializationVectorABMC1_38.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_38.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_25.go(byteArray36);
        staticInitializationVectorABMC1_14.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        staticInitializationVectorABMC1_40.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        staticInitializationVectorABMC1_40.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_77.go(byteArray88);
        staticInitializationVectorABMC1_40.go(byteArray88);
        staticInitializationVectorABMC1_39.go(byteArray88);
        staticInitializationVectorABMC1_14.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass94 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        staticInitializationVectorABMC1_36.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_73.go(byteArray84);
        staticInitializationVectorABMC1_36.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_36.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        staticInitializationVectorABMC1_1.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_38.go(byteArray81);
        staticInitializationVectorABMC1_1.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray91 = new byte[] { (byte) -1, (byte) 1, (byte) 10 };
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_61.go(byteArray72);
        staticInitializationVectorABMC1_38.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_75.go(byteArray86);
        staticInitializationVectorABMC1_38.go(byteArray86);
        byte[] byteArray95 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_38.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass98 = byteArray95.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray60);
        staticInitializationVectorABMC1_26.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        staticInitializationVectorABMC1_26.go(byteArray74);
        staticInitializationVectorABMC1_25.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        java.lang.Class<?> wildcardClass79 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_37.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_76.go(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_76.go(byteArray88);
        staticInitializationVectorABMC1_63.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_37.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray81);
        staticInitializationVectorABMC1_37.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_29.go(byteArray41);
        staticInitializationVectorABMC1_6.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_76.go(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_76.go(byteArray88);
        staticInitializationVectorABMC1_45.go(byteArray88);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_92 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray94 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_92.go(byteArray94);
        staticInitializationVectorABMC1_91.go(byteArray94);
        staticInitializationVectorABMC1_45.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_38.go(byteArray64);
        staticInitializationVectorABMC1_34.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_72.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_72.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        staticInitializationVectorABMC1_10.go(byteArray36);
        staticInitializationVectorABMC1_0.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        java.lang.Class<?> wildcardClass55 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass83 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_71.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray88 = new byte[] { (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray88);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_90.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass95 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray60);
        staticInitializationVectorABMC1_26.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        staticInitializationVectorABMC1_26.go(byteArray74);
        staticInitializationVectorABMC1_25.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_79.go(byteArray85);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_79.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass94 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        staticInitializationVectorABMC1_22.go(byteArray71);
        staticInitializationVectorABMC1_11.go(byteArray71);
        staticInitializationVectorABMC1_0.go(byteArray71);
        byte[] byteArray79 = new byte[] {};
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass81 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_44.go(byteArray75);
        staticInitializationVectorABMC1_38.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_83.go(byteArray89);
        byte[] byteArray95 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_83.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass98 = byteArray95.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_4.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_17.go(byteArray23);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_17.go(byteArray29);
        staticInitializationVectorABMC1_4.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_32.go(byteArray57);
        staticInitializationVectorABMC1_4.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 0, (byte) 10, (byte) 10, (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray67);
        java.lang.Class<?> wildcardClass69 = byteArray67.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        staticInitializationVectorABMC1_10.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        staticInitializationVectorABMC1_42.go(byteArray73);
        staticInitializationVectorABMC1_10.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        java.lang.Class<?> wildcardClass81 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_29.go(byteArray41);
        staticInitializationVectorABMC1_6.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        java.lang.Class<?> wildcardClass45 = byteArray41.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_7.go(byteArray13);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_7.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        staticInitializationVectorABMC1_64.go(byteArray82);
        staticInitializationVectorABMC1_33.go(byteArray82);
        staticInitializationVectorABMC1_32.go(byteArray82);
        staticInitializationVectorABMC1_21.go(byteArray82);
        staticInitializationVectorABMC1_7.go(byteArray82);
        staticInitializationVectorABMC1_1.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray93 = null;
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_37.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_1.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        java.lang.Class<?> wildcardClass60 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_46.go(byteArray52);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_46.go(byteArray58);
        staticInitializationVectorABMC1_15.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_62.go(byteArray68);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_62.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        java.lang.Class<?> wildcardClass77 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_23.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray84);
        staticInitializationVectorABMC1_23.go(byteArray84);
        staticInitializationVectorABMC1_12.go(byteArray84);
        staticInitializationVectorABMC1_11.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass90 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        staticInitializationVectorABMC1_9.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        staticInitializationVectorABMC1_9.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        staticInitializationVectorABMC1_9.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray57);
        staticInitializationVectorABMC1_9.go(byteArray57);
        staticInitializationVectorABMC1_8.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_8.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass67 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_6.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_6.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_16.go(byteArray27);
        staticInitializationVectorABMC1_6.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        staticInitializationVectorABMC1_30.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_53.go(byteArray59);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_53.go(byteArray65);
        staticInitializationVectorABMC1_30.go(byteArray65);
        staticInitializationVectorABMC1_6.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_6.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass82 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_23.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        staticInitializationVectorABMC1_23.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        java.lang.Class<?> wildcardClass80 = byteArray73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray20 = null;
        staticInitializationVectorABMC1_14.go(byteArray20);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_14.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray53);
        staticInitializationVectorABMC1_14.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_14.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass81 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_35.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_35.go(byteArray84);
        staticInitializationVectorABMC1_24.go(byteArray84);
        staticInitializationVectorABMC1_13.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass93 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_64.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_72.go(byteArray90);
        staticInitializationVectorABMC1_64.go(byteArray90);
        staticInitializationVectorABMC1_60.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass98 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_47.go(byteArray53);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_47.go(byteArray59);
        staticInitializationVectorABMC1_24.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_63.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_73.go(byteArray84);
        staticInitializationVectorABMC1_63.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass88 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_38.go(byteArray64);
        staticInitializationVectorABMC1_34.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_83.go(byteArray94);
        staticInitializationVectorABMC1_72.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        staticInitializationVectorABMC1_1.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_38.go(byteArray81);
        staticInitializationVectorABMC1_1.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray91 = new byte[] { (byte) -1, (byte) 1, (byte) 10 };
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray93 = null;
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_35.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_35.go(byteArray84);
        staticInitializationVectorABMC1_24.go(byteArray84);
        staticInitializationVectorABMC1_13.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_23.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray62);
        staticInitializationVectorABMC1_23.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_23.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_7.go(byteArray13);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_7.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        staticInitializationVectorABMC1_64.go(byteArray82);
        staticInitializationVectorABMC1_33.go(byteArray82);
        staticInitializationVectorABMC1_32.go(byteArray82);
        staticInitializationVectorABMC1_21.go(byteArray82);
        staticInitializationVectorABMC1_7.go(byteArray82);
        staticInitializationVectorABMC1_1.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray93 = null;
        staticInitializationVectorABMC1_0.go(byteArray93);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_38.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray77);
        staticInitializationVectorABMC1_38.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_38.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray49);
        staticInitializationVectorABMC1_24.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_65.go(byteArray71);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_65.go(byteArray77);
        staticInitializationVectorABMC1_52.go(byteArray77);
        staticInitializationVectorABMC1_24.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_85.go(byteArray88);
        staticInitializationVectorABMC1_81.go(byteArray88);
        staticInitializationVectorABMC1_24.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass94 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_63.go(byteArray75);
        staticInitializationVectorABMC1_32.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass79 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_23.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        staticInitializationVectorABMC1_23.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_80.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass94 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        staticInitializationVectorABMC1_9.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        staticInitializationVectorABMC1_9.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        staticInitializationVectorABMC1_9.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray57);
        staticInitializationVectorABMC1_9.go(byteArray57);
        staticInitializationVectorABMC1_8.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_8.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass67 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_44.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        staticInitializationVectorABMC1_44.go(byteArray70);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_44.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass82 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray40);
        staticInitializationVectorABMC1_6.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray54);
        staticInitializationVectorABMC1_6.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_6.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_6.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass72 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_11.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_21.go(byteArray32);
        staticInitializationVectorABMC1_11.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_58.go(byteArray70);
        staticInitializationVectorABMC1_35.go(byteArray70);
        staticInitializationVectorABMC1_11.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass75 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_61.go(byteArray72);
        staticInitializationVectorABMC1_38.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_75.go(byteArray86);
        staticInitializationVectorABMC1_38.go(byteArray86);
        byte[] byteArray95 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_38.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        java.lang.Class<?> wildcardClass3 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_71.go(byteArray89);
        staticInitializationVectorABMC1_63.go(byteArray89);
        staticInitializationVectorABMC1_59.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_66.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        java.lang.Class<?> wildcardClass80 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        staticInitializationVectorABMC1_7.go(byteArray38);
        staticInitializationVectorABMC1_1.go(byteArray38);
        staticInitializationVectorABMC1_0.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_46.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_90.go(byteArray92);
        staticInitializationVectorABMC1_89.go(byteArray92);
        staticInitializationVectorABMC1_85.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray20 = null;
        staticInitializationVectorABMC1_14.go(byteArray20);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_14.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray53);
        staticInitializationVectorABMC1_14.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_14.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass81 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        staticInitializationVectorABMC1_21.go(byteArray39);
        staticInitializationVectorABMC1_13.go(byteArray39);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_50.go(byteArray85);
        byte[] byteArray89 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_50.go(byteArray89);
        staticInitializationVectorABMC1_13.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray60);
        staticInitializationVectorABMC1_26.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        staticInitializationVectorABMC1_26.go(byteArray74);
        staticInitializationVectorABMC1_25.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        java.lang.Class<?> wildcardClass79 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass81 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray60);
        staticInitializationVectorABMC1_26.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        staticInitializationVectorABMC1_26.go(byteArray74);
        staticInitializationVectorABMC1_25.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_79.go(byteArray85);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_79.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }
}

