package randoopTest;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_4.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_35.go(byteArray47);
        staticInitializationVectorABMC1_4.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_50.go(byteArray85);
        staticInitializationVectorABMC1_4.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_92 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray94 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_92.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass97 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_15.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_25.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_25.go(byteArray51);
        staticInitializationVectorABMC1_15.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass73 = byteArray70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_15.go(byteArray64);
        staticInitializationVectorABMC1_14.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass72 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_15.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_25.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_25.go(byteArray51);
        staticInitializationVectorABMC1_15.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_59.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_67.go(byteArray85);
        staticInitializationVectorABMC1_59.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_44.go(byteArray75);
        staticInitializationVectorABMC1_38.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass90 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_46.go(byteArray52);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_46.go(byteArray58);
        staticInitializationVectorABMC1_15.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_0.go(byteArray69);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass78 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_51.go(byteArray63);
        staticInitializationVectorABMC1_28.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_0.go(byteArray67);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        java.lang.Class<?> wildcardClass71 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_1.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_57.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_57.go(byteArray83);
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_57.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_8.go(byteArray14);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_8.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_18.go(byteArray29);
        staticInitializationVectorABMC1_8.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_55.go(byteArray61);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_55.go(byteArray67);
        staticInitializationVectorABMC1_32.go(byteArray67);
        staticInitializationVectorABMC1_8.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_71.go(byteArray77);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_71.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_81.go(byteArray92);
        staticInitializationVectorABMC1_71.go(byteArray92);
        staticInitializationVectorABMC1_8.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass97 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_14.go(byteArray63);
        staticInitializationVectorABMC1_13.go(byteArray63);
        byte[] byteArray70 = new byte[] {};
        staticInitializationVectorABMC1_13.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass73 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_37.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray94 = new byte[] { (byte) 0, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray94);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        staticInitializationVectorABMC1_28.go(byteArray77);
        staticInitializationVectorABMC1_27.go(byteArray77);
        staticInitializationVectorABMC1_16.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        staticInitializationVectorABMC1_2.go(byteArray5);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_2.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        staticInitializationVectorABMC1_2.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_39.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_70.go(byteArray76);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_70.go(byteArray82);
        staticInitializationVectorABMC1_39.go(byteArray82);
        staticInitializationVectorABMC1_2.go(byteArray82);
        staticInitializationVectorABMC1_1.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_10.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_0.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_56.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_80.go(byteArray87);
        staticInitializationVectorABMC1_69.go(byteArray87);
        staticInitializationVectorABMC1_56.go(byteArray87);
        staticInitializationVectorABMC1_50.go(byteArray87);
        staticInitializationVectorABMC1_49.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_20.go(byteArray51);
        staticInitializationVectorABMC1_14.go(byteArray51);
        staticInitializationVectorABMC1_13.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_13.go(byteArray62);
        staticInitializationVectorABMC1_0.go(byteArray62);
        java.lang.Class<?> wildcardClass67 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_15.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray60);
        staticInitializationVectorABMC1_26.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        staticInitializationVectorABMC1_26.go(byteArray74);
        staticInitializationVectorABMC1_25.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_25.go(byteArray80);
        staticInitializationVectorABMC1_15.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass85 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_15.go(byteArray64);
        staticInitializationVectorABMC1_14.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass72 = byteArray64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        staticInitializationVectorABMC1_1.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_38.go(byteArray81);
        staticInitializationVectorABMC1_1.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray91 = new byte[] { (byte) -1, (byte) 1, (byte) 10 };
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray93 = null;
        staticInitializationVectorABMC1_0.go(byteArray93);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        byte[] byteArray97 = null;
        staticInitializationVectorABMC1_0.go(byteArray97);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_38.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_38.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass92 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_4.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_35.go(byteArray47);
        staticInitializationVectorABMC1_4.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_50.go(byteArray85);
        staticInitializationVectorABMC1_4.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_92 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray94 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_92.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_10.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_0.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_56.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_80.go(byteArray87);
        staticInitializationVectorABMC1_69.go(byteArray87);
        staticInitializationVectorABMC1_56.go(byteArray87);
        staticInitializationVectorABMC1_50.go(byteArray87);
        staticInitializationVectorABMC1_49.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass96 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_60.go(byteArray71);
        staticInitializationVectorABMC1_37.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_74.go(byteArray85);
        staticInitializationVectorABMC1_37.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_37.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_44.go(byteArray75);
        staticInitializationVectorABMC1_38.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        staticInitializationVectorABMC1_7.go(byteArray38);
        staticInitializationVectorABMC1_1.go(byteArray38);
        staticInitializationVectorABMC1_0.go(byteArray38);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_0.go(byteArray46);
        java.lang.Class<?> wildcardClass48 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_0.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray61);
        staticInitializationVectorABMC1_39.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        java.lang.Class<?> wildcardClass65 = byteArray61.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray9 = null;
        staticInitializationVectorABMC1_3.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_11.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_25.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        staticInitializationVectorABMC1_45.go(byteArray76);
        staticInitializationVectorABMC1_39.go(byteArray76);
        staticInitializationVectorABMC1_38.go(byteArray76);
        staticInitializationVectorABMC1_25.go(byteArray76);
        staticInitializationVectorABMC1_11.go(byteArray76);
        staticInitializationVectorABMC1_3.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass88 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        staticInitializationVectorABMC1_23.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray57);
        staticInitializationVectorABMC1_23.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_60.go(byteArray71);
        staticInitializationVectorABMC1_23.go(byteArray71);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray80);
        staticInitializationVectorABMC1_22.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass84 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        byte[] byteArray28 = null;
        staticInitializationVectorABMC1_0.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray55);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_44.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray88);
        staticInitializationVectorABMC1_44.go(byteArray88);
        staticInitializationVectorABMC1_43.go(byteArray88);
        staticInitializationVectorABMC1_30.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        staticInitializationVectorABMC1_22.go(byteArray71);
        staticInitializationVectorABMC1_11.go(byteArray71);
        staticInitializationVectorABMC1_0.go(byteArray71);
        byte[] byteArray79 = new byte[] {};
        staticInitializationVectorABMC1_0.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_13.go(byteArray48);
        byte[] byteArray52 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_13.go(byteArray52);
        byte[] byteArray54 = null;
        staticInitializationVectorABMC1_13.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        byte[] byteArray62 = null;
        staticInitializationVectorABMC1_56.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        staticInitializationVectorABMC1_64.go(byteArray82);
        staticInitializationVectorABMC1_56.go(byteArray82);
        staticInitializationVectorABMC1_13.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass90 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_46.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        staticInitializationVectorABMC1_54.go(byteArray72);
        staticInitializationVectorABMC1_46.go(byteArray72);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_46.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        java.lang.Class<?> wildcardClass43 = byteArray39.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_6.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        staticInitializationVectorABMC1_6.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        staticInitializationVectorABMC1_38.go(byteArray69);
        staticInitializationVectorABMC1_6.go(byteArray69);
        staticInitializationVectorABMC1_0.go(byteArray69);
        java.lang.Class<?> wildcardClass77 = byteArray69.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_25.go(byteArray36);
        staticInitializationVectorABMC1_14.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        staticInitializationVectorABMC1_40.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        staticInitializationVectorABMC1_40.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_77.go(byteArray88);
        staticInitializationVectorABMC1_40.go(byteArray88);
        staticInitializationVectorABMC1_39.go(byteArray88);
        staticInitializationVectorABMC1_14.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray47);
        staticInitializationVectorABMC1_13.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray61);
        staticInitializationVectorABMC1_13.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        java.lang.Class<?> wildcardClass65 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        staticInitializationVectorABMC1_2.go(byteArray5);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_2.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        staticInitializationVectorABMC1_2.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_39.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_70.go(byteArray76);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_70.go(byteArray82);
        staticInitializationVectorABMC1_39.go(byteArray82);
        staticInitializationVectorABMC1_2.go(byteArray82);
        staticInitializationVectorABMC1_1.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass88 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        staticInitializationVectorABMC1_22.go(byteArray71);
        staticInitializationVectorABMC1_21.go(byteArray71);
        staticInitializationVectorABMC1_10.go(byteArray71);
        staticInitializationVectorABMC1_0.go(byteArray71);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass82 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        staticInitializationVectorABMC1_36.go(byteArray62);
        staticInitializationVectorABMC1_32.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_80.go(byteArray91);
        staticInitializationVectorABMC1_69.go(byteArray91);
        staticInitializationVectorABMC1_32.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        java.lang.Class<?> wildcardClass22 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_15.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_25.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_25.go(byteArray51);
        staticInitializationVectorABMC1_15.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_59.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_67.go(byteArray85);
        staticInitializationVectorABMC1_59.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass92 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        byte[] byteArray28 = null;
        staticInitializationVectorABMC1_0.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray55);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_44.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray88);
        staticInitializationVectorABMC1_44.go(byteArray88);
        staticInitializationVectorABMC1_43.go(byteArray88);
        staticInitializationVectorABMC1_30.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass94 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_0.go(byteArray43);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_0.go(byteArray45);
        java.lang.Class<?> wildcardClass47 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_16.go(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_16.go(byteArray28);
        staticInitializationVectorABMC1_3.go(byteArray28);
        staticInitializationVectorABMC1_0.go(byteArray28);
        java.lang.Class<?> wildcardClass32 = byteArray28.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray45);
        staticInitializationVectorABMC1_11.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_11.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_11.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_0.go(byteArray68);
        java.lang.Class<?> wildcardClass70 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_40.go(byteArray46);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_40.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray79);
        staticInitializationVectorABMC1_40.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_40.go(byteArray89);
        staticInitializationVectorABMC1_17.go(byteArray89);
        staticInitializationVectorABMC1_16.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_56.go(byteArray74);
        staticInitializationVectorABMC1_43.go(byteArray74);
        staticInitializationVectorABMC1_37.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass87 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_16.go(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_16.go(byteArray28);
        staticInitializationVectorABMC1_3.go(byteArray28);
        staticInitializationVectorABMC1_0.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_32.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_47.go(byteArray53);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_47.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_57.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_57.go(byteArray83);
        staticInitializationVectorABMC1_47.go(byteArray83);
        staticInitializationVectorABMC1_32.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        staticInitializationVectorABMC1_58.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray84 = new byte[] {};
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_15.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_25.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_25.go(byteArray51);
        staticInitializationVectorABMC1_15.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass73 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_14.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_0.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass73 = byteArray70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_44.go(byteArray75);
        staticInitializationVectorABMC1_38.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        staticInitializationVectorABMC1_63.go(byteArray81);
        staticInitializationVectorABMC1_50.go(byteArray81);
        staticInitializationVectorABMC1_44.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_42.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray81);
        staticInitializationVectorABMC1_42.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_42.go(byteArray87);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray93 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_91.go(byteArray93);
        staticInitializationVectorABMC1_42.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass97 = byteArray93.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_38.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray74 = new byte[] { (byte) -1, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_92 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray94 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_92.go(byteArray94);
        staticInitializationVectorABMC1_91.go(byteArray94);
        staticInitializationVectorABMC1_87.go(byteArray94);
        staticInitializationVectorABMC1_76.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        staticInitializationVectorABMC1_30.go(byteArray48);
        staticInitializationVectorABMC1_17.go(byteArray48);
        staticInitializationVectorABMC1_16.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        java.lang.Class<?> wildcardClass56 = byteArray48.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray25);
        byte[] byteArray27 = null;
        staticInitializationVectorABMC1_14.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        staticInitializationVectorABMC1_29.go(byteArray47);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray58);
        staticInitializationVectorABMC1_14.go(byteArray58);
        staticInitializationVectorABMC1_13.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 100, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray68);
        java.lang.Class<?> wildcardClass70 = byteArray68.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        staticInitializationVectorABMC1_63.go(byteArray81);
        staticInitializationVectorABMC1_50.go(byteArray81);
        staticInitializationVectorABMC1_44.go(byteArray81);
        staticInitializationVectorABMC1_43.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_33.go(byteArray45);
        staticInitializationVectorABMC1_10.go(byteArray45);
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_10.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        java.lang.Class<?> wildcardClass54 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_16.go(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_16.go(byteArray28);
        staticInitializationVectorABMC1_3.go(byteArray28);
        staticInitializationVectorABMC1_0.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_32.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_47.go(byteArray53);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_47.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_57.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_57.go(byteArray83);
        staticInitializationVectorABMC1_47.go(byteArray83);
        staticInitializationVectorABMC1_32.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass92 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_8.go(byteArray19);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_8.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        staticInitializationVectorABMC1_23.go(byteArray41);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray52);
        staticInitializationVectorABMC1_8.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray84);
        staticInitializationVectorABMC1_8.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_4.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray25);
        staticInitializationVectorABMC1_4.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_51.go(byteArray63);
        staticInitializationVectorABMC1_28.go(byteArray63);
        staticInitializationVectorABMC1_4.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_4.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_0.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_18.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        staticInitializationVectorABMC1_60.go(byteArray67);
        staticInitializationVectorABMC1_49.go(byteArray67);
        staticInitializationVectorABMC1_18.go(byteArray67);
        staticInitializationVectorABMC1_17.go(byteArray67);
        byte[] byteArray74 = new byte[] {};
        staticInitializationVectorABMC1_17.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        java.lang.Class<?> wildcardClass77 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        staticInitializationVectorABMC1_7.go(byteArray38);
        staticInitializationVectorABMC1_1.go(byteArray38);
        staticInitializationVectorABMC1_0.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        java.lang.Class<?> wildcardClass65 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_33.go(byteArray45);
        staticInitializationVectorABMC1_10.go(byteArray45);
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_10.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        java.lang.Class<?> wildcardClass54 = byteArray51.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_66.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass82 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_4.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray25);
        staticInitializationVectorABMC1_4.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_51.go(byteArray63);
        staticInitializationVectorABMC1_28.go(byteArray63);
        staticInitializationVectorABMC1_4.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_4.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_0.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass94 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        staticInitializationVectorABMC1_17.go(byteArray66);
        staticInitializationVectorABMC1_16.go(byteArray66);
        staticInitializationVectorABMC1_10.go(byteArray66);
        staticInitializationVectorABMC1_0.go(byteArray66);
        java.lang.Class<?> wildcardClass75 = byteArray66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_63.go(byteArray75);
        staticInitializationVectorABMC1_32.go(byteArray75);
        staticInitializationVectorABMC1_21.go(byteArray75);
        staticInitializationVectorABMC1_10.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass83 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_49.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass82 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        byte[] byteArray97 = null;
        staticInitializationVectorABMC1_0.go(byteArray97);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        staticInitializationVectorABMC1_0.go(byteArray14);
        java.lang.Class<?> wildcardClass17 = byteArray14.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_8.go(byteArray14);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        byte[] byteArray28 = null;
        staticInitializationVectorABMC1_22.go(byteArray28);
        byte[] byteArray30 = null;
        staticInitializationVectorABMC1_22.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_56.go(byteArray67);
        staticInitializationVectorABMC1_33.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_33.go(byteArray81);
        staticInitializationVectorABMC1_32.go(byteArray81);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_32.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_32.go(byteArray89);
        staticInitializationVectorABMC1_22.go(byteArray89);
        staticInitializationVectorABMC1_8.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_0.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_18.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        staticInitializationVectorABMC1_60.go(byteArray67);
        staticInitializationVectorABMC1_49.go(byteArray67);
        staticInitializationVectorABMC1_18.go(byteArray67);
        staticInitializationVectorABMC1_17.go(byteArray67);
        byte[] byteArray74 = new byte[] {};
        staticInitializationVectorABMC1_17.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        java.lang.Class<?> wildcardClass77 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_71.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray88 = new byte[] { (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray88);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_90.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        staticInitializationVectorABMC1_17.go(byteArray66);
        staticInitializationVectorABMC1_16.go(byteArray66);
        staticInitializationVectorABMC1_10.go(byteArray66);
        staticInitializationVectorABMC1_0.go(byteArray66);
        java.lang.Class<?> wildcardClass75 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_16.go(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_16.go(byteArray28);
        staticInitializationVectorABMC1_3.go(byteArray28);
        staticInitializationVectorABMC1_0.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_32.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_47.go(byteArray53);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_47.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_57.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_57.go(byteArray83);
        staticInitializationVectorABMC1_47.go(byteArray83);
        staticInitializationVectorABMC1_32.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        staticInitializationVectorABMC1_31.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_64.go(byteArray70);
        byte[] byteArray72 = null;
        staticInitializationVectorABMC1_64.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_74.go(byteArray85);
        staticInitializationVectorABMC1_64.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray95 = new byte[] { (byte) -1, (byte) 0, (byte) 100, (byte) 0, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass97 = byteArray95.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        byte[] byteArray27 = null;
        staticInitializationVectorABMC1_0.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray40);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_29.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray73);
        staticInitializationVectorABMC1_29.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_77.go(byteArray88);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_77.go(byteArray90);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_92 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_93 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray95 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_93.go(byteArray95);
        staticInitializationVectorABMC1_92.go(byteArray95);
        staticInitializationVectorABMC1_77.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        staticInitializationVectorABMC1_31.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_64.go(byteArray70);
        byte[] byteArray72 = null;
        staticInitializationVectorABMC1_64.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_74.go(byteArray85);
        staticInitializationVectorABMC1_64.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray95 = new byte[] { (byte) -1, (byte) 0, (byte) 100, (byte) 0, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_10.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_70.go(byteArray76);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_70.go(byteArray82);
        staticInitializationVectorABMC1_47.go(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_47.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray60);
        staticInitializationVectorABMC1_26.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        staticInitializationVectorABMC1_26.go(byteArray74);
        staticInitializationVectorABMC1_25.go(byteArray74);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_25.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_25.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass86 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_0.go(byteArray71);
        java.lang.Class<?> wildcardClass73 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_0.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_80.go(byteArray91);
        staticInitializationVectorABMC1_69.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        staticInitializationVectorABMC1_41.go(byteArray59);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_41.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_72.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_72.go(byteArray84);
        staticInitializationVectorABMC1_41.go(byteArray84);
        staticInitializationVectorABMC1_27.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_27.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        staticInitializationVectorABMC1_23.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray57);
        staticInitializationVectorABMC1_23.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_60.go(byteArray71);
        staticInitializationVectorABMC1_23.go(byteArray71);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray80);
        staticInitializationVectorABMC1_22.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        staticInitializationVectorABMC1_7.go(byteArray38);
        staticInitializationVectorABMC1_1.go(byteArray38);
        staticInitializationVectorABMC1_0.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        java.lang.Class<?> wildcardClass65 = byteArray60.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_3.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_18.go(byteArray47);
        staticInitializationVectorABMC1_3.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_73.go(byteArray84);
        staticInitializationVectorABMC1_50.go(byteArray84);
        staticInitializationVectorABMC1_3.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass89 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_32.go(byteArray63);
        staticInitializationVectorABMC1_26.go(byteArray63);
        staticInitializationVectorABMC1_25.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass72 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_43.go(byteArray49);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_43.go(byteArray55);
        staticInitializationVectorABMC1_12.go(byteArray55);
        staticInitializationVectorABMC1_1.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_82.go(byteArray93);
        staticInitializationVectorABMC1_59.go(byteArray93);
        staticInitializationVectorABMC1_1.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        byte[] byteArray98 = null;
        staticInitializationVectorABMC1_0.go(byteArray98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        java.lang.Class<?> wildcardClass22 = byteArray18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_72.go(byteArray90);
        staticInitializationVectorABMC1_59.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_8.go(byteArray14);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_8.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_18.go(byteArray29);
        staticInitializationVectorABMC1_8.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_55.go(byteArray61);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_55.go(byteArray67);
        staticInitializationVectorABMC1_32.go(byteArray67);
        staticInitializationVectorABMC1_8.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_71.go(byteArray77);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_71.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_81.go(byteArray92);
        staticInitializationVectorABMC1_71.go(byteArray92);
        staticInitializationVectorABMC1_8.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_46.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        staticInitializationVectorABMC1_54.go(byteArray72);
        staticInitializationVectorABMC1_46.go(byteArray72);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_46.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass84 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_0.go(byteArray66);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_0.go(byteArray68);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass72 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_0.go(byteArray56);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_0.go(byteArray60);
        byte[] byteArray62 = null;
        staticInitializationVectorABMC1_0.go(byteArray62);
        java.lang.Class<?> wildcardClass64 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_6.go(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_6.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_51.go(byteArray63);
        staticInitializationVectorABMC1_20.go(byteArray63);
        staticInitializationVectorABMC1_6.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass80 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_60.go(byteArray72);
        staticInitializationVectorABMC1_37.go(byteArray72);
        byte[] byteArray76 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_37.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_0.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass86 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray24);
        byte[] byteArray26 = null;
        staticInitializationVectorABMC1_13.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray57);
        staticInitializationVectorABMC1_13.go(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_66.go(byteArray77);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_66.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass89 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        staticInitializationVectorABMC1_30.go(byteArray48);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_61.go(byteArray79);
        staticInitializationVectorABMC1_30.go(byteArray79);
        staticInitializationVectorABMC1_29.go(byteArray79);
        staticInitializationVectorABMC1_23.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray58);
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_47.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_62.go(byteArray80);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_62.go(byteArray91);
        staticInitializationVectorABMC1_47.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        staticInitializationVectorABMC1_13.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_50.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        staticInitializationVectorABMC1_50.go(byteArray76);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_50.go(byteArray85);
        staticInitializationVectorABMC1_13.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_13.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass96 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_0.go(byteArray56);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_0.go(byteArray60);
        java.lang.Class<?> wildcardClass62 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_46.go(byteArray52);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_46.go(byteArray58);
        staticInitializationVectorABMC1_15.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_62.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        byte[] byteArray94 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_65.go(byteArray94);
        staticInitializationVectorABMC1_62.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        staticInitializationVectorABMC1_31.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        staticInitializationVectorABMC1_63.go(byteArray81);
        staticInitializationVectorABMC1_31.go(byteArray81);
        staticInitializationVectorABMC1_8.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        staticInitializationVectorABMC1_13.go(byteArray44);
        staticInitializationVectorABMC1_7.go(byteArray44);
        staticInitializationVectorABMC1_6.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_6.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_6.go(byteArray66);
        staticInitializationVectorABMC1_0.go(byteArray66);
        java.lang.Class<?> wildcardClass72 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_0.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_17.go(byteArray23);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_17.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_62.go(byteArray68);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_62.go(byteArray74);
        staticInitializationVectorABMC1_31.go(byteArray74);
        staticInitializationVectorABMC1_17.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        java.lang.Class<?> wildcardClass79 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_0.go(byteArray43);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_0.go(byteArray45);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_0.go(byteArray47);
        java.lang.Class<?> wildcardClass49 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_0.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_57.go(byteArray68);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_57.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass80 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_4.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_41.go(byteArray47);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_41.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_74.go(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_74.go(byteArray86);
        staticInitializationVectorABMC1_51.go(byteArray86);
        byte[] byteArray90 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_51.go(byteArray90);
        staticInitializationVectorABMC1_41.go(byteArray90);
        staticInitializationVectorABMC1_4.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_32.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass72 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_9.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        staticInitializationVectorABMC1_9.go(byteArray40);
        staticInitializationVectorABMC1_3.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_47.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        staticInitializationVectorABMC1_47.go(byteArray73);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_47.go(byteArray82);
        staticInitializationVectorABMC1_3.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_0.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_17.go(byteArray23);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_17.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_62.go(byteArray68);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_62.go(byteArray74);
        staticInitializationVectorABMC1_31.go(byteArray74);
        staticInitializationVectorABMC1_17.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass81 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        staticInitializationVectorABMC1_23.go(byteArray41);
        staticInitializationVectorABMC1_10.go(byteArray41);
        staticInitializationVectorABMC1_4.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_67.go(byteArray85);
        staticInitializationVectorABMC1_54.go(byteArray85);
        staticInitializationVectorABMC1_48.go(byteArray85);
        staticInitializationVectorABMC1_4.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray49);
        staticInitializationVectorABMC1_6.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_75.go(byteArray81);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_75.go(byteArray87);
        staticInitializationVectorABMC1_52.go(byteArray87);
        staticInitializationVectorABMC1_6.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray94 = new byte[] { (byte) 100, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray94);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        byte[] byteArray98 = null;
        staticInitializationVectorABMC1_0.go(byteArray98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_43.go(byteArray49);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_43.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray82);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_53.go(byteArray87);
        staticInitializationVectorABMC1_43.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass91 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        staticInitializationVectorABMC1_0.go(byteArray14);
        java.lang.Class<?> wildcardClass17 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        staticInitializationVectorABMC1_3.go(byteArray21);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray32);
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_35.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        staticInitializationVectorABMC1_45.go(byteArray71);
        staticInitializationVectorABMC1_35.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_35.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        staticInitializationVectorABMC1_45.go(byteArray76);
        staticInitializationVectorABMC1_39.go(byteArray76);
        staticInitializationVectorABMC1_38.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_38.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        staticInitializationVectorABMC1_21.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray55);
        staticInitializationVectorABMC1_21.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        staticInitializationVectorABMC1_21.go(byteArray69);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_21.go(byteArray78);
        staticInitializationVectorABMC1_13.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass82 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        staticInitializationVectorABMC1_42.go(byteArray73);
        staticInitializationVectorABMC1_36.go(byteArray73);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_36.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_82.go(byteArray88);
        byte[] byteArray94 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_82.go(byteArray94);
        staticInitializationVectorABMC1_36.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass98 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        staticInitializationVectorABMC1_22.go(byteArray71);
        staticInitializationVectorABMC1_21.go(byteArray71);
        staticInitializationVectorABMC1_10.go(byteArray71);
        staticInitializationVectorABMC1_0.go(byteArray71);
        java.lang.Class<?> wildcardClass80 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray54 = null;
        staticInitializationVectorABMC1_48.go(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_48.go(byteArray60);
        staticInitializationVectorABMC1_17.go(byteArray60);
        staticInitializationVectorABMC1_6.go(byteArray60);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray66);
        staticInitializationVectorABMC1_0.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        java.lang.Class<?> wildcardClass71 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        staticInitializationVectorABMC1_40.go(byteArray58);
        staticInitializationVectorABMC1_32.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        staticInitializationVectorABMC1_64.go(byteArray82);
        staticInitializationVectorABMC1_32.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 100, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass94 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray25);
        byte[] byteArray27 = null;
        staticInitializationVectorABMC1_14.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        staticInitializationVectorABMC1_29.go(byteArray47);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray58);
        staticInitializationVectorABMC1_14.go(byteArray58);
        staticInitializationVectorABMC1_13.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        java.lang.Class<?> wildcardClass63 = byteArray58.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray9 = null;
        staticInitializationVectorABMC1_3.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_11.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_25.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        staticInitializationVectorABMC1_45.go(byteArray76);
        staticInitializationVectorABMC1_39.go(byteArray76);
        staticInitializationVectorABMC1_38.go(byteArray76);
        staticInitializationVectorABMC1_25.go(byteArray76);
        staticInitializationVectorABMC1_11.go(byteArray76);
        staticInitializationVectorABMC1_3.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_17.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_33.go(byteArray45);
        staticInitializationVectorABMC1_20.go(byteArray45);
        staticInitializationVectorABMC1_17.go(byteArray45);
        staticInitializationVectorABMC1_16.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        java.lang.Class<?> wildcardClass51 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        java.lang.Class<?> wildcardClass67 = byteArray61.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        java.lang.Class<?> wildcardClass76 = byteArray73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_53.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_11.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_21.go(byteArray32);
        staticInitializationVectorABMC1_11.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_58.go(byteArray70);
        staticInitializationVectorABMC1_35.go(byteArray70);
        staticInitializationVectorABMC1_11.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_0.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass91 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        staticInitializationVectorABMC1_40.go(byteArray58);
        staticInitializationVectorABMC1_32.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        staticInitializationVectorABMC1_64.go(byteArray82);
        staticInitializationVectorABMC1_32.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 100, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        staticInitializationVectorABMC1_10.go(byteArray36);
        staticInitializationVectorABMC1_0.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray72 = null;
        staticInitializationVectorABMC1_66.go(byteArray72);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_66.go(byteArray78);
        staticInitializationVectorABMC1_43.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_43.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_14.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_0.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass73 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_4.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_41.go(byteArray47);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_41.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_74.go(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_74.go(byteArray86);
        staticInitializationVectorABMC1_51.go(byteArray86);
        byte[] byteArray90 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_51.go(byteArray90);
        staticInitializationVectorABMC1_41.go(byteArray90);
        staticInitializationVectorABMC1_4.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass95 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray65);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_6.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        staticInitializationVectorABMC1_6.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        staticInitializationVectorABMC1_38.go(byteArray69);
        staticInitializationVectorABMC1_6.go(byteArray69);
        staticInitializationVectorABMC1_0.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_0.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_78.go(byteArray84);
        byte[] byteArray90 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_78.go(byteArray90);
        staticInitializationVectorABMC1_55.go(byteArray90);
        staticInitializationVectorABMC1_49.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_58.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_0.go(byteArray63);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass67 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_37.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_60.go(byteArray72);
        staticInitializationVectorABMC1_37.go(byteArray72);
        byte[] byteArray76 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_37.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_0.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_32.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray71);
        staticInitializationVectorABMC1_32.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_74.go(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_74.go(byteArray86);
        staticInitializationVectorABMC1_32.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray93 = new byte[] { (byte) 0, (byte) 100, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_6.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        staticInitializationVectorABMC1_6.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        staticInitializationVectorABMC1_38.go(byteArray69);
        staticInitializationVectorABMC1_6.go(byteArray69);
        staticInitializationVectorABMC1_0.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass84 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        java.lang.Class<?> wildcardClass67 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_72.go(byteArray90);
        staticInitializationVectorABMC1_59.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass97 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_49.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass82 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_29.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_39.go(byteArray68);
        staticInitializationVectorABMC1_29.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        staticInitializationVectorABMC1_29.go(byteArray78);
        staticInitializationVectorABMC1_6.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_50.go(byteArray56);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_50.go(byteArray62);
        staticInitializationVectorABMC1_37.go(byteArray62);
        staticInitializationVectorABMC1_0.go(byteArray62);
        java.lang.Class<?> wildcardClass66 = byteArray62.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_8.go(byteArray14);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        byte[] byteArray28 = null;
        staticInitializationVectorABMC1_22.go(byteArray28);
        byte[] byteArray30 = null;
        staticInitializationVectorABMC1_22.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_56.go(byteArray67);
        staticInitializationVectorABMC1_33.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_33.go(byteArray81);
        staticInitializationVectorABMC1_32.go(byteArray81);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_32.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_32.go(byteArray89);
        staticInitializationVectorABMC1_22.go(byteArray89);
        staticInitializationVectorABMC1_8.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass95 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_61.go(byteArray72);
        staticInitializationVectorABMC1_38.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass78 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_10.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_70.go(byteArray76);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_70.go(byteArray82);
        staticInitializationVectorABMC1_47.go(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_47.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass91 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray42);
        staticInitializationVectorABMC1_8.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray56);
        staticInitializationVectorABMC1_8.go(byteArray56);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_68.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_28.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        staticInitializationVectorABMC1_28.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_0.go(byteArray78);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_0.go(byteArray56);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_60.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_76.go(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_76.go(byteArray88);
        staticInitializationVectorABMC1_63.go(byteArray88);
        staticInitializationVectorABMC1_60.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass93 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray20 = null;
        staticInitializationVectorABMC1_14.go(byteArray20);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_14.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray53);
        staticInitializationVectorABMC1_14.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_14.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_41.go(byteArray47);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_41.go(byteArray53);
        staticInitializationVectorABMC1_28.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        java.lang.Class<?> wildcardClass71 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        staticInitializationVectorABMC1_31.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_64.go(byteArray70);
        byte[] byteArray72 = null;
        staticInitializationVectorABMC1_64.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_74.go(byteArray85);
        staticInitializationVectorABMC1_64.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_11.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_25.go(byteArray31);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_25.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_35.go(byteArray64);
        staticInitializationVectorABMC1_25.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_25.go(byteArray74);
        staticInitializationVectorABMC1_11.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass83 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_13.go(byteArray48);
        byte[] byteArray52 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_13.go(byteArray52);
        byte[] byteArray54 = null;
        staticInitializationVectorABMC1_13.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        byte[] byteArray62 = null;
        staticInitializationVectorABMC1_56.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        staticInitializationVectorABMC1_64.go(byteArray82);
        staticInitializationVectorABMC1_56.go(byteArray82);
        staticInitializationVectorABMC1_13.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_53.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_61.go(byteArray79);
        staticInitializationVectorABMC1_53.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_60.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_60.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_11.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_21.go(byteArray32);
        staticInitializationVectorABMC1_11.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_58.go(byteArray70);
        staticInitializationVectorABMC1_35.go(byteArray70);
        staticInitializationVectorABMC1_11.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_0.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_17.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_33.go(byteArray45);
        staticInitializationVectorABMC1_20.go(byteArray45);
        staticInitializationVectorABMC1_17.go(byteArray45);
        staticInitializationVectorABMC1_16.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        java.lang.Class<?> wildcardClass51 = byteArray45.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_53.go(byteArray84);
        staticInitializationVectorABMC1_47.go(byteArray84);
        staticInitializationVectorABMC1_46.go(byteArray84);
        staticInitializationVectorABMC1_33.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass94 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        byte[] byteArray95 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_66.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        byte[] byteArray98 = null;
        staticInitializationVectorABMC1_0.go(byteArray98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_19.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_32.go(byteArray44);
        staticInitializationVectorABMC1_19.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_60.go(byteArray72);
        staticInitializationVectorABMC1_47.go(byteArray72);
        staticInitializationVectorABMC1_19.go(byteArray72);
        staticInitializationVectorABMC1_15.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass90 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray44);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_33.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray77);
        staticInitializationVectorABMC1_33.go(byteArray77);
        byte[] byteArray83 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass86 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_71.go(byteArray89);
        staticInitializationVectorABMC1_58.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass96 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_43.go(byteArray49);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_43.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray82);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_53.go(byteArray87);
        staticInitializationVectorABMC1_43.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_46.go(byteArray52);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_46.go(byteArray58);
        staticInitializationVectorABMC1_15.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_62.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        byte[] byteArray94 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_65.go(byteArray94);
        staticInitializationVectorABMC1_62.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass98 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_13.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_74.go(byteArray85);
        staticInitializationVectorABMC1_51.go(byteArray85);
        staticInitializationVectorABMC1_13.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass89 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_56.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_79.go(byteArray85);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_79.go(byteArray91);
        staticInitializationVectorABMC1_56.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass95 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_4.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray25);
        staticInitializationVectorABMC1_4.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_51.go(byteArray63);
        staticInitializationVectorABMC1_28.go(byteArray63);
        staticInitializationVectorABMC1_4.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_4.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_0.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_53.go(byteArray84);
        staticInitializationVectorABMC1_47.go(byteArray84);
        staticInitializationVectorABMC1_46.go(byteArray84);
        staticInitializationVectorABMC1_33.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_49.go(byteArray61);
        staticInitializationVectorABMC1_36.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        java.lang.Class<?> wildcardClass65 = byteArray61.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        staticInitializationVectorABMC1_40.go(byteArray58);
        staticInitializationVectorABMC1_32.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        staticInitializationVectorABMC1_64.go(byteArray82);
        staticInitializationVectorABMC1_32.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_56.go(byteArray74);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_56.go(byteArray85);
        byte[] byteArray90 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_56.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray65);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_73.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_83.go(byteArray94);
        staticInitializationVectorABMC1_73.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass98 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_34.go(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_34.go(byteArray46);
        staticInitializationVectorABMC1_11.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_49.go(byteArray75);
        staticInitializationVectorABMC1_11.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray45);
        staticInitializationVectorABMC1_11.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_11.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_11.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_0.go(byteArray68);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass72 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_50.go(byteArray56);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_50.go(byteArray62);
        staticInitializationVectorABMC1_37.go(byteArray62);
        staticInitializationVectorABMC1_0.go(byteArray62);
        java.lang.Class<?> wildcardClass66 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_15.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_25.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_25.go(byteArray51);
        staticInitializationVectorABMC1_15.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_0.go(byteArray59);
        java.lang.Class<?> wildcardClass61 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        staticInitializationVectorABMC1_31.go(byteArray57);
        staticInitializationVectorABMC1_27.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_75.go(byteArray86);
        staticInitializationVectorABMC1_64.go(byteArray86);
        staticInitializationVectorABMC1_27.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_20.go(byteArray51);
        staticInitializationVectorABMC1_14.go(byteArray51);
        staticInitializationVectorABMC1_13.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_13.go(byteArray62);
        staticInitializationVectorABMC1_0.go(byteArray62);
        java.lang.Class<?> wildcardClass67 = byteArray62.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_15.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray60);
        staticInitializationVectorABMC1_26.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        staticInitializationVectorABMC1_26.go(byteArray74);
        staticInitializationVectorABMC1_25.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_25.go(byteArray80);
        staticInitializationVectorABMC1_15.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_71.go(byteArray89);
        staticInitializationVectorABMC1_63.go(byteArray89);
        staticInitializationVectorABMC1_59.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray97 = null;
        staticInitializationVectorABMC1_0.go(byteArray97);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        staticInitializationVectorABMC1_11.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_79.go(byteArray85);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_79.go(byteArray91);
        staticInitializationVectorABMC1_48.go(byteArray91);
        staticInitializationVectorABMC1_11.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        staticInitializationVectorABMC1_13.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_50.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        staticInitializationVectorABMC1_50.go(byteArray76);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_50.go(byteArray85);
        staticInitializationVectorABMC1_13.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_13.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_56.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_72.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_72.go(byteArray84);
        staticInitializationVectorABMC1_59.go(byteArray84);
        staticInitializationVectorABMC1_56.go(byteArray84);
        staticInitializationVectorABMC1_55.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        staticInitializationVectorABMC1_63.go(byteArray81);
        staticInitializationVectorABMC1_50.go(byteArray81);
        staticInitializationVectorABMC1_44.go(byteArray81);
        staticInitializationVectorABMC1_43.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass90 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_16.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_29.go(byteArray41);
        staticInitializationVectorABMC1_16.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        java.lang.Class<?> wildcardClass45 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_4.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_17.go(byteArray23);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_17.go(byteArray29);
        staticInitializationVectorABMC1_4.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_32.go(byteArray57);
        staticInitializationVectorABMC1_4.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray62 = null;
        staticInitializationVectorABMC1_0.go(byteArray62);
        java.lang.Class<?> wildcardClass64 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_0.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_40.go(byteArray46);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_40.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray79);
        staticInitializationVectorABMC1_40.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_40.go(byteArray89);
        staticInitializationVectorABMC1_17.go(byteArray89);
        staticInitializationVectorABMC1_16.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray97 = null;
        staticInitializationVectorABMC1_0.go(byteArray97);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_42.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray81);
        staticInitializationVectorABMC1_42.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_42.go(byteArray87);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray93 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_91.go(byteArray93);
        staticInitializationVectorABMC1_42.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        staticInitializationVectorABMC1_58.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray84 = new byte[] {};
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        byte[] byteArray95 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_66.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_49.go(byteArray61);
        staticInitializationVectorABMC1_36.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        java.lang.Class<?> wildcardClass65 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_51.go(byteArray62);
        staticInitializationVectorABMC1_28.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_65.go(byteArray76);
        staticInitializationVectorABMC1_28.go(byteArray76);
        staticInitializationVectorABMC1_27.go(byteArray76);
        staticInitializationVectorABMC1_23.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass82 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_0.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_57.go(byteArray68);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_57.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass80 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_0.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_25.go(byteArray31);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_25.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_58.go(byteArray70);
        staticInitializationVectorABMC1_35.go(byteArray70);
        byte[] byteArray74 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_35.go(byteArray74);
        staticInitializationVectorABMC1_25.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass80 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray60);
        staticInitializationVectorABMC1_26.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        staticInitializationVectorABMC1_26.go(byteArray74);
        staticInitializationVectorABMC1_25.go(byteArray74);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_25.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_25.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_28.go(byteArray34);
        byte[] byteArray36 = null;
        staticInitializationVectorABMC1_28.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        staticInitializationVectorABMC1_28.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_85.go(byteArray88);
        staticInitializationVectorABMC1_81.go(byteArray88);
        staticInitializationVectorABMC1_70.go(byteArray88);
        staticInitializationVectorABMC1_28.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass95 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray65);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_73.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_83.go(byteArray94);
        staticInitializationVectorABMC1_73.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_1.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_57.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_57.go(byteArray83);
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_57.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass95 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        staticInitializationVectorABMC1_23.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray57);
        staticInitializationVectorABMC1_23.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_60.go(byteArray71);
        staticInitializationVectorABMC1_23.go(byteArray71);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray80);
        staticInitializationVectorABMC1_22.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        byte[] byteArray54 = null;
        staticInitializationVectorABMC1_0.go(byteArray54);
        java.lang.Class<?> wildcardClass56 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_0.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_78.go(byteArray84);
        byte[] byteArray90 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_78.go(byteArray90);
        staticInitializationVectorABMC1_55.go(byteArray90);
        staticInitializationVectorABMC1_49.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass95 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_38.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_38.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass92 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_29.go(byteArray41);
        staticInitializationVectorABMC1_6.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_47.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_63.go(byteArray75);
        staticInitializationVectorABMC1_50.go(byteArray75);
        staticInitializationVectorABMC1_47.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass80 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_16.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_29.go(byteArray41);
        staticInitializationVectorABMC1_16.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        java.lang.Class<?> wildcardClass45 = byteArray41.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_53.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass91 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_10.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray26 = null;
        staticInitializationVectorABMC1_20.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        staticInitializationVectorABMC1_20.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_52.go(byteArray83);
        staticInitializationVectorABMC1_20.go(byteArray83);
        staticInitializationVectorABMC1_10.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_50.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        staticInitializationVectorABMC1_50.go(byteArray76);
        staticInitializationVectorABMC1_46.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        staticInitializationVectorABMC1_3.go(byteArray21);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray32);
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_90.go(byteArray92);
        staticInitializationVectorABMC1_89.go(byteArray92);
        staticInitializationVectorABMC1_85.go(byteArray92);
        staticInitializationVectorABMC1_74.go(byteArray92);
        staticInitializationVectorABMC1_43.go(byteArray92);
        staticInitializationVectorABMC1_35.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_40.go(byteArray46);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_40.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray79);
        staticInitializationVectorABMC1_40.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_40.go(byteArray89);
        staticInitializationVectorABMC1_17.go(byteArray89);
        staticInitializationVectorABMC1_16.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass97 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray60);
        staticInitializationVectorABMC1_26.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        staticInitializationVectorABMC1_26.go(byteArray74);
        staticInitializationVectorABMC1_25.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_79.go(byteArray85);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_79.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray24);
        byte[] byteArray26 = null;
        staticInitializationVectorABMC1_13.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray57);
        staticInitializationVectorABMC1_13.go(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_66.go(byteArray77);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_66.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_54.go(byteArray65);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_54.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_54.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass77 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray60);
        staticInitializationVectorABMC1_26.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        staticInitializationVectorABMC1_26.go(byteArray74);
        staticInitializationVectorABMC1_25.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_79.go(byteArray85);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_79.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        byte[] byteArray98 = null;
        staticInitializationVectorABMC1_0.go(byteArray98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_0.go(byteArray56);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        staticInitializationVectorABMC1_60.go(byteArray67);
        staticInitializationVectorABMC1_0.go(byteArray67);
        java.lang.Class<?> wildcardClass72 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_8.go(byteArray19);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_8.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_23.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        staticInitializationVectorABMC1_41.go(byteArray59);
        staticInitializationVectorABMC1_33.go(byteArray59);
        staticInitializationVectorABMC1_23.go(byteArray59);
        staticInitializationVectorABMC1_8.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_67.go(byteArray78);
        staticInitializationVectorABMC1_8.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass82 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        staticInitializationVectorABMC1_31.go(byteArray57);
        staticInitializationVectorABMC1_27.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_75.go(byteArray86);
        staticInitializationVectorABMC1_64.go(byteArray86);
        staticInitializationVectorABMC1_27.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass91 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_74.go(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_74.go(byteArray86);
        staticInitializationVectorABMC1_43.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_90.go(byteArray92);
        staticInitializationVectorABMC1_89.go(byteArray92);
        staticInitializationVectorABMC1_43.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        byte[] byteArray97 = null;
        staticInitializationVectorABMC1_0.go(byteArray97);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        byte[] byteArray27 = null;
        staticInitializationVectorABMC1_0.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        staticInitializationVectorABMC1_30.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray64);
        staticInitializationVectorABMC1_30.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_67.go(byteArray78);
        staticInitializationVectorABMC1_30.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_30.go(byteArray83);
        staticInitializationVectorABMC1_29.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass88 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_3.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_18.go(byteArray47);
        staticInitializationVectorABMC1_3.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_73.go(byteArray84);
        staticInitializationVectorABMC1_50.go(byteArray84);
        staticInitializationVectorABMC1_3.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_64.go(byteArray70);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_64.go(byteArray76);
        staticInitializationVectorABMC1_33.go(byteArray76);
        staticInitializationVectorABMC1_22.go(byteArray76);
        staticInitializationVectorABMC1_11.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray65);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray25);
        staticInitializationVectorABMC1_3.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_28.go(byteArray34);
        byte[] byteArray36 = null;
        staticInitializationVectorABMC1_28.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        staticInitializationVectorABMC1_28.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_28.go(byteArray77);
        staticInitializationVectorABMC1_3.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray30 = null;
        staticInitializationVectorABMC1_24.go(byteArray30);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_24.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        staticInitializationVectorABMC1_34.go(byteArray52);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray63);
        staticInitializationVectorABMC1_24.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_24.go(byteArray73);
        staticInitializationVectorABMC1_1.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        staticInitializationVectorABMC1_3.go(byteArray21);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray32);
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_35.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        staticInitializationVectorABMC1_45.go(byteArray71);
        staticInitializationVectorABMC1_35.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_35.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass91 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_0.go(byteArray53);
        java.lang.Class<?> wildcardClass55 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_0.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_44.go(byteArray50);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_44.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        staticInitializationVectorABMC1_54.go(byteArray72);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray83);
        staticInitializationVectorABMC1_44.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_44.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        byte[] byteArray27 = null;
        staticInitializationVectorABMC1_0.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        staticInitializationVectorABMC1_30.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray64);
        staticInitializationVectorABMC1_30.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_67.go(byteArray78);
        staticInitializationVectorABMC1_30.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_30.go(byteArray83);
        staticInitializationVectorABMC1_29.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_6.go(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_6.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_51.go(byteArray63);
        staticInitializationVectorABMC1_20.go(byteArray63);
        staticInitializationVectorABMC1_6.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass80 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_0.go(byteArray55);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_59.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_62.go(byteArray80);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_62.go(byteArray91);
        staticInitializationVectorABMC1_59.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_71.go(byteArray89);
        staticInitializationVectorABMC1_58.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray24);
        byte[] byteArray26 = null;
        staticInitializationVectorABMC1_13.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray57);
        staticInitializationVectorABMC1_13.go(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_66.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_82.go(byteArray88);
        byte[] byteArray94 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_82.go(byteArray94);
        staticInitializationVectorABMC1_69.go(byteArray94);
        staticInitializationVectorABMC1_66.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray51);
        staticInitializationVectorABMC1_17.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        staticInitializationVectorABMC1_17.go(byteArray65);
        staticInitializationVectorABMC1_16.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass75 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        staticInitializationVectorABMC1_36.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_73.go(byteArray84);
        staticInitializationVectorABMC1_36.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_36.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray93 = null;
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray24);
        byte[] byteArray26 = null;
        staticInitializationVectorABMC1_13.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray57);
        staticInitializationVectorABMC1_13.go(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_66.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_82.go(byteArray88);
        byte[] byteArray94 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_82.go(byteArray94);
        staticInitializationVectorABMC1_69.go(byteArray94);
        staticInitializationVectorABMC1_66.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass99 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_49.go(byteArray61);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_49.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_65.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_78.go(byteArray84);
        byte[] byteArray90 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_78.go(byteArray90);
        staticInitializationVectorABMC1_65.go(byteArray90);
        staticInitializationVectorABMC1_49.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass95 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        staticInitializationVectorABMC1_31.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_64.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_72.go(byteArray90);
        staticInitializationVectorABMC1_64.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        staticInitializationVectorABMC1_42.go(byteArray73);
        staticInitializationVectorABMC1_36.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass83 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_8.go(byteArray37);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray73);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_44.go(byteArray78);
        staticInitializationVectorABMC1_8.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_85.go(byteArray88);
        staticInitializationVectorABMC1_81.go(byteArray88);
        staticInitializationVectorABMC1_8.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        byte[] byteArray98 = null;
        staticInitializationVectorABMC1_0.go(byteArray98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray9 = null;
        staticInitializationVectorABMC1_3.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        staticInitializationVectorABMC1_3.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        staticInitializationVectorABMC1_3.go(byteArray53);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_3.go(byteArray59);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_3.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_63.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_66.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_79.go(byteArray85);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_79.go(byteArray91);
        staticInitializationVectorABMC1_66.go(byteArray91);
        staticInitializationVectorABMC1_63.go(byteArray91);
        staticInitializationVectorABMC1_3.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        staticInitializationVectorABMC1_41.go(byteArray59);
        staticInitializationVectorABMC1_33.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        byte[] byteArray94 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_65.go(byteArray94);
        staticInitializationVectorABMC1_33.go(byteArray94);
        staticInitializationVectorABMC1_22.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        staticInitializationVectorABMC1_7.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        staticInitializationVectorABMC1_7.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray41);
        staticInitializationVectorABMC1_7.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray55);
        staticInitializationVectorABMC1_7.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_7.go(byteArray60);
        staticInitializationVectorABMC1_6.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        java.lang.Class<?> wildcardClass65 = byteArray60.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_16.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_29.go(byteArray41);
        staticInitializationVectorABMC1_16.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_0.go(byteArray45);
        java.lang.Class<?> wildcardClass47 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_0.go(byteArray63);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_0.go(byteArray65);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_0.go(byteArray67);
        java.lang.Class<?> wildcardClass69 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        staticInitializationVectorABMC1_30.go(byteArray48);
        staticInitializationVectorABMC1_17.go(byteArray48);
        staticInitializationVectorABMC1_16.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        java.lang.Class<?> wildcardClass56 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_8.go(byteArray14);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_8.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_18.go(byteArray47);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_18.go(byteArray52);
        staticInitializationVectorABMC1_8.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_78.go(byteArray84);
        byte[] byteArray90 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_78.go(byteArray90);
        staticInitializationVectorABMC1_55.go(byteArray90);
        byte[] byteArray96 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_55.go(byteArray96);
        staticInitializationVectorABMC1_8.go(byteArray96);
        staticInitializationVectorABMC1_0.go(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray96);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_17.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        staticInitializationVectorABMC1_25.go(byteArray43);
        staticInitializationVectorABMC1_17.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        staticInitializationVectorABMC1_60.go(byteArray67);
        staticInitializationVectorABMC1_49.go(byteArray67);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray78);
        staticInitializationVectorABMC1_17.go(byteArray78);
        staticInitializationVectorABMC1_6.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass83 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        byte[] byteArray95 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_66.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass98 = byteArray95.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_67.go(byteArray85);
        staticInitializationVectorABMC1_54.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray28);
        byte[] byteArray30 = null;
        staticInitializationVectorABMC1_17.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        staticInitializationVectorABMC1_36.go(byteArray62);
        staticInitializationVectorABMC1_32.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_80.go(byteArray91);
        staticInitializationVectorABMC1_69.go(byteArray91);
        staticInitializationVectorABMC1_32.go(byteArray91);
        staticInitializationVectorABMC1_17.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass97 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_34.go(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_34.go(byteArray46);
        staticInitializationVectorABMC1_11.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_49.go(byteArray75);
        staticInitializationVectorABMC1_11.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        staticInitializationVectorABMC1_10.go(byteArray36);
        staticInitializationVectorABMC1_0.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray72 = null;
        staticInitializationVectorABMC1_66.go(byteArray72);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_66.go(byteArray78);
        staticInitializationVectorABMC1_43.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_43.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_29.go(byteArray41);
        staticInitializationVectorABMC1_6.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_47.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_63.go(byteArray75);
        staticInitializationVectorABMC1_50.go(byteArray75);
        staticInitializationVectorABMC1_47.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass80 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_14.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray46);
        staticInitializationVectorABMC1_14.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_49.go(byteArray75);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_49.go(byteArray84);
        staticInitializationVectorABMC1_14.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 100, (byte) 10, (byte) 1, (byte) -1, (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass66 = byteArray64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray39 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_41.go(byteArray47);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_41.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        staticInitializationVectorABMC1_51.go(byteArray77);
        staticInitializationVectorABMC1_41.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        java.lang.Class<?> wildcardClass85 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        staticInitializationVectorABMC1_10.go(byteArray36);
        staticInitializationVectorABMC1_0.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_66.go(byteArray77);
        staticInitializationVectorABMC1_43.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_80.go(byteArray91);
        staticInitializationVectorABMC1_43.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        byte[] byteArray97 = null;
        staticInitializationVectorABMC1_0.go(byteArray97);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_15.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_25.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_25.go(byteArray51);
        staticInitializationVectorABMC1_15.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        byte[] byteArray73 = null;
        staticInitializationVectorABMC1_0.go(byteArray73);
        java.lang.Class<?> wildcardClass75 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_19.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_32.go(byteArray44);
        staticInitializationVectorABMC1_19.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_60.go(byteArray72);
        staticInitializationVectorABMC1_47.go(byteArray72);
        staticInitializationVectorABMC1_19.go(byteArray72);
        staticInitializationVectorABMC1_15.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_78.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_81.go(byteArray92);
        staticInitializationVectorABMC1_78.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass96 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_30.go(byteArray61);
        staticInitializationVectorABMC1_24.go(byteArray61);
        staticInitializationVectorABMC1_23.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        java.lang.Class<?> wildcardClass70 = byteArray61.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_53.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_61.go(byteArray79);
        staticInitializationVectorABMC1_53.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass91 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_4.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_17.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_42.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_75.go(byteArray81);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_75.go(byteArray87);
        staticInitializationVectorABMC1_52.go(byteArray87);
        byte[] byteArray91 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_52.go(byteArray91);
        staticInitializationVectorABMC1_42.go(byteArray91);
        staticInitializationVectorABMC1_17.go(byteArray91);
        staticInitializationVectorABMC1_4.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass97 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_33.go(byteArray45);
        staticInitializationVectorABMC1_10.go(byteArray45);
        byte[] byteArray49 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_10.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_71.go(byteArray89);
        staticInitializationVectorABMC1_63.go(byteArray89);
        staticInitializationVectorABMC1_52.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        staticInitializationVectorABMC1_31.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_64.go(byteArray70);
        byte[] byteArray72 = null;
        staticInitializationVectorABMC1_64.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_74.go(byteArray85);
        staticInitializationVectorABMC1_64.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray95 = new byte[] { (byte) -1, (byte) 0, (byte) 100, (byte) 0, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray95);
        byte[] byteArray97 = null;
        staticInitializationVectorABMC1_0.go(byteArray97);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_25.go(byteArray31);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_25.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_35.go(byteArray64);
        staticInitializationVectorABMC1_25.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_25.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass82 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_0.go(byteArray56);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_60.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_76.go(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_76.go(byteArray88);
        staticInitializationVectorABMC1_63.go(byteArray88);
        staticInitializationVectorABMC1_60.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_35.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_35.go(byteArray84);
        staticInitializationVectorABMC1_24.go(byteArray84);
        staticInitializationVectorABMC1_13.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_93 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray95 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_93.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_67.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_67.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_49.go(byteArray61);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_49.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_65.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_78.go(byteArray84);
        byte[] byteArray90 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_78.go(byteArray90);
        staticInitializationVectorABMC1_65.go(byteArray90);
        staticInitializationVectorABMC1_49.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        staticInitializationVectorABMC1_10.go(byteArray36);
        staticInitializationVectorABMC1_0.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_66.go(byteArray77);
        staticInitializationVectorABMC1_43.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_80.go(byteArray91);
        staticInitializationVectorABMC1_43.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_23.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray84);
        staticInitializationVectorABMC1_23.go(byteArray84);
        staticInitializationVectorABMC1_12.go(byteArray84);
        staticInitializationVectorABMC1_11.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_0.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_17.go(byteArray23);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_17.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_62.go(byteArray68);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_62.go(byteArray74);
        staticInitializationVectorABMC1_31.go(byteArray74);
        staticInitializationVectorABMC1_17.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        java.lang.Class<?> wildcardClass79 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_0.go(byteArray56);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        staticInitializationVectorABMC1_60.go(byteArray67);
        staticInitializationVectorABMC1_0.go(byteArray67);
        java.lang.Class<?> wildcardClass72 = byteArray67.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        staticInitializationVectorABMC1_45.go(byteArray76);
        staticInitializationVectorABMC1_39.go(byteArray76);
        staticInitializationVectorABMC1_38.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_38.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray9 = null;
        staticInitializationVectorABMC1_3.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        staticInitializationVectorABMC1_3.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        staticInitializationVectorABMC1_3.go(byteArray53);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_3.go(byteArray59);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_3.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_63.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_66.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_79.go(byteArray85);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_79.go(byteArray91);
        staticInitializationVectorABMC1_66.go(byteArray91);
        staticInitializationVectorABMC1_63.go(byteArray91);
        staticInitializationVectorABMC1_3.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass97 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_35.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_35.go(byteArray84);
        staticInitializationVectorABMC1_24.go(byteArray84);
        staticInitializationVectorABMC1_13.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_93 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray95 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_93.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass98 = byteArray95.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_56.go(byteArray74);
        staticInitializationVectorABMC1_43.go(byteArray74);
        staticInitializationVectorABMC1_37.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_28.go(byteArray34);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_28.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_42.go(byteArray85);
        staticInitializationVectorABMC1_28.go(byteArray85);
        staticInitializationVectorABMC1_22.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass91 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_0.go(byteArray43);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_47.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        byte[] byteArray95 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_84.go(byteArray95);
        staticInitializationVectorABMC1_47.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        staticInitializationVectorABMC1_3.go(byteArray21);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray32);
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_35.go(byteArray61);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_35.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass73 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        staticInitializationVectorABMC1_34.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_57.go(byteArray68);
        staticInitializationVectorABMC1_34.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_71.go(byteArray82);
        staticInitializationVectorABMC1_34.go(byteArray82);
        staticInitializationVectorABMC1_33.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_33.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        staticInitializationVectorABMC1_13.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_50.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        staticInitializationVectorABMC1_50.go(byteArray76);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_50.go(byteArray85);
        staticInitializationVectorABMC1_13.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_13.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_0.go(byteArray42);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_0.go(byteArray44);
        java.lang.Class<?> wildcardClass46 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_4.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_41.go(byteArray47);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_41.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_74.go(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_74.go(byteArray86);
        staticInitializationVectorABMC1_51.go(byteArray86);
        byte[] byteArray90 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_51.go(byteArray90);
        staticInitializationVectorABMC1_41.go(byteArray90);
        staticInitializationVectorABMC1_4.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_28.go(byteArray34);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_28.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_42.go(byteArray85);
        staticInitializationVectorABMC1_28.go(byteArray85);
        staticInitializationVectorABMC1_22.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        staticInitializationVectorABMC1_60.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        staticInitializationVectorABMC1_60.go(byteArray78);
        staticInitializationVectorABMC1_47.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass85 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_10.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        staticInitializationVectorABMC1_25.go(byteArray43);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_25.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        byte[] byteArray62 = null;
        staticInitializationVectorABMC1_56.go(byteArray62);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_56.go(byteArray68);
        staticInitializationVectorABMC1_25.go(byteArray68);
        staticInitializationVectorABMC1_10.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_10.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass85 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray28);
        byte[] byteArray30 = null;
        staticInitializationVectorABMC1_17.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        staticInitializationVectorABMC1_36.go(byteArray62);
        staticInitializationVectorABMC1_32.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_80.go(byteArray91);
        staticInitializationVectorABMC1_69.go(byteArray91);
        staticInitializationVectorABMC1_32.go(byteArray91);
        staticInitializationVectorABMC1_17.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = null;
        staticInitializationVectorABMC1_8.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_8.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        java.lang.Class<?> wildcardClass26 = byteArray22.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_5.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        byte[] byteArray24 = null;
        staticInitializationVectorABMC1_18.go(byteArray24);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_18.go(byteArray30);
        staticInitializationVectorABMC1_5.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_46.go(byteArray52);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_46.go(byteArray58);
        staticInitializationVectorABMC1_33.go(byteArray58);
        staticInitializationVectorABMC1_5.go(byteArray58);
        staticInitializationVectorABMC1_1.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        java.lang.Class<?> wildcardClass64 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        staticInitializationVectorABMC1_3.go(byteArray21);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray32);
        staticInitializationVectorABMC1_0.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_38.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray82);
        staticInitializationVectorABMC1_38.go(byteArray82);
        staticInitializationVectorABMC1_37.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        staticInitializationVectorABMC1_34.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_57.go(byteArray68);
        staticInitializationVectorABMC1_34.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_71.go(byteArray82);
        staticInitializationVectorABMC1_34.go(byteArray82);
        staticInitializationVectorABMC1_33.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_33.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass92 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_80.go(byteArray86);
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_80.go(byteArray92);
        staticInitializationVectorABMC1_57.go(byteArray92);
        staticInitializationVectorABMC1_53.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_0.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        staticInitializationVectorABMC1_0.go(byteArray69);
        java.lang.Class<?> wildcardClass72 = byteArray69.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_32.go(byteArray63);
        staticInitializationVectorABMC1_26.go(byteArray63);
        staticInitializationVectorABMC1_25.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        byte[] byteArray72 = null;
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass74 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_15.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray63);
        staticInitializationVectorABMC1_15.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass67 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = null;
        staticInitializationVectorABMC1_1.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_4.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_17.go(byteArray23);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_17.go(byteArray29);
        staticInitializationVectorABMC1_4.go(byteArray29);
        staticInitializationVectorABMC1_1.go(byteArray29);
        staticInitializationVectorABMC1_0.go(byteArray29);
        java.lang.Class<?> wildcardClass34 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        staticInitializationVectorABMC1_31.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_64.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_72.go(byteArray90);
        staticInitializationVectorABMC1_64.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass97 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_15.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_25.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_25.go(byteArray51);
        staticInitializationVectorABMC1_15.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_59.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_26.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_26.go(byteArray75);
        staticInitializationVectorABMC1_15.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_15.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        byte[] byteArray97 = null;
        staticInitializationVectorABMC1_0.go(byteArray97);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_54.go(byteArray65);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_54.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_54.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass77 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_56.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_79.go(byteArray85);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_79.go(byteArray91);
        staticInitializationVectorABMC1_56.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_32.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray71);
        staticInitializationVectorABMC1_32.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_74.go(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_74.go(byteArray86);
        staticInitializationVectorABMC1_32.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray93 = new byte[] { (byte) 0, (byte) 100, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass95 = byteArray93.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_0.go(byteArray41);
        java.lang.Class<?> wildcardClass43 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_0.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        java.lang.Class<?> wildcardClass41 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        staticInitializationVectorABMC1_7.go(byteArray38);
        staticInitializationVectorABMC1_1.go(byteArray38);
        staticInitializationVectorABMC1_0.go(byteArray38);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_0.go(byteArray46);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_0.go(byteArray48);
        java.lang.Class<?> wildcardClass50 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_4.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_17.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_42.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_75.go(byteArray81);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_75.go(byteArray87);
        staticInitializationVectorABMC1_52.go(byteArray87);
        byte[] byteArray91 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_52.go(byteArray91);
        staticInitializationVectorABMC1_42.go(byteArray91);
        staticInitializationVectorABMC1_17.go(byteArray91);
        staticInitializationVectorABMC1_4.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        byte[] byteArray27 = null;
        staticInitializationVectorABMC1_21.go(byteArray27);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_21.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray42);
        staticInitializationVectorABMC1_21.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_45.go(byteArray80);
        staticInitializationVectorABMC1_21.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_84.go(byteArray91);
        staticInitializationVectorABMC1_21.go(byteArray91);
        staticInitializationVectorABMC1_15.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass98 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        staticInitializationVectorABMC1_21.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray55);
        staticInitializationVectorABMC1_21.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        staticInitializationVectorABMC1_21.go(byteArray69);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_21.go(byteArray78);
        staticInitializationVectorABMC1_13.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        byte[] byteArray88 = new byte[] { (byte) -1, (byte) -1, (byte) -1, (byte) 0, (byte) 100, (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_0.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_44.go(byteArray50);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_44.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        staticInitializationVectorABMC1_54.go(byteArray72);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray83);
        staticInitializationVectorABMC1_44.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_44.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass94 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_27.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        staticInitializationVectorABMC1_60.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        staticInitializationVectorABMC1_60.go(byteArray78);
        staticInitializationVectorABMC1_47.go(byteArray78);
        staticInitializationVectorABMC1_41.go(byteArray78);
        staticInitializationVectorABMC1_40.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_40.go(byteArray89);
        staticInitializationVectorABMC1_27.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_71.go(byteArray89);
        staticInitializationVectorABMC1_58.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_17.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        staticInitializationVectorABMC1_25.go(byteArray43);
        staticInitializationVectorABMC1_17.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        staticInitializationVectorABMC1_60.go(byteArray67);
        staticInitializationVectorABMC1_49.go(byteArray67);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray78);
        staticInitializationVectorABMC1_17.go(byteArray78);
        staticInitializationVectorABMC1_6.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass83 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_0.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass85 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass67 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_60.go(byteArray71);
        staticInitializationVectorABMC1_37.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_74.go(byteArray85);
        staticInitializationVectorABMC1_37.go(byteArray85);
        staticInitializationVectorABMC1_36.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_8.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        staticInitializationVectorABMC1_8.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass64 = byteArray57.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        staticInitializationVectorABMC1_41.go(byteArray59);
        staticInitializationVectorABMC1_33.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        byte[] byteArray94 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_65.go(byteArray94);
        staticInitializationVectorABMC1_33.go(byteArray94);
        staticInitializationVectorABMC1_22.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass99 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        staticInitializationVectorABMC1_13.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_50.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        staticInitializationVectorABMC1_50.go(byteArray76);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_50.go(byteArray85);
        staticInitializationVectorABMC1_13.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_13.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        byte[] byteArray98 = null;
        staticInitializationVectorABMC1_0.go(byteArray98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_29.go(byteArray60);
        staticInitializationVectorABMC1_23.go(byteArray60);
        staticInitializationVectorABMC1_22.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_22.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        staticInitializationVectorABMC1_22.go(byteArray82);
        staticInitializationVectorABMC1_16.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass89 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_19.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_32.go(byteArray44);
        staticInitializationVectorABMC1_19.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_60.go(byteArray72);
        staticInitializationVectorABMC1_47.go(byteArray72);
        staticInitializationVectorABMC1_19.go(byteArray72);
        staticInitializationVectorABMC1_15.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_78.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_81.go(byteArray92);
        staticInitializationVectorABMC1_78.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_33.go(byteArray45);
        staticInitializationVectorABMC1_10.go(byteArray45);
        byte[] byteArray49 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_10.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_0.go(byteArray52);
        java.lang.Class<?> wildcardClass54 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass74 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_27.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        staticInitializationVectorABMC1_60.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        staticInitializationVectorABMC1_60.go(byteArray78);
        staticInitializationVectorABMC1_47.go(byteArray78);
        staticInitializationVectorABMC1_41.go(byteArray78);
        staticInitializationVectorABMC1_40.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_40.go(byteArray89);
        staticInitializationVectorABMC1_27.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_38.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_38.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray45);
        staticInitializationVectorABMC1_11.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_11.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_11.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_0.go(byteArray68);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass84 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_56.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_72.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_72.go(byteArray84);
        staticInitializationVectorABMC1_59.go(byteArray84);
        staticInitializationVectorABMC1_56.go(byteArray84);
        staticInitializationVectorABMC1_55.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass90 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_0.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_57.go(byteArray68);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_57.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass82 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_37.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray76);
        staticInitializationVectorABMC1_37.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_37.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_37.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_70.go(byteArray76);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_70.go(byteArray82);
        staticInitializationVectorABMC1_47.go(byteArray82);
        staticInitializationVectorABMC1_43.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass87 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_15.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray63);
        staticInitializationVectorABMC1_15.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass67 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_5.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        byte[] byteArray24 = null;
        staticInitializationVectorABMC1_18.go(byteArray24);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_18.go(byteArray30);
        staticInitializationVectorABMC1_5.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_46.go(byteArray52);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_46.go(byteArray58);
        staticInitializationVectorABMC1_33.go(byteArray58);
        staticInitializationVectorABMC1_5.go(byteArray58);
        staticInitializationVectorABMC1_1.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        java.lang.Class<?> wildcardClass64 = byteArray58.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_15.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_25.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_25.go(byteArray51);
        staticInitializationVectorABMC1_15.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_59.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_15.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_25.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_25.go(byteArray51);
        staticInitializationVectorABMC1_15.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_84.go(byteArray91);
        staticInitializationVectorABMC1_73.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_0.go(byteArray10);
        java.lang.Class<?> wildcardClass12 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_28.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        staticInitializationVectorABMC1_28.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_0.go(byteArray78);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        java.lang.Class<?> wildcardClass63 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_8.go(byteArray14);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        byte[] byteArray28 = null;
        staticInitializationVectorABMC1_22.go(byteArray28);
        byte[] byteArray30 = null;
        staticInitializationVectorABMC1_22.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_56.go(byteArray67);
        staticInitializationVectorABMC1_33.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_33.go(byteArray81);
        staticInitializationVectorABMC1_32.go(byteArray81);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_32.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_32.go(byteArray89);
        staticInitializationVectorABMC1_22.go(byteArray89);
        staticInitializationVectorABMC1_8.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        byte[] byteArray97 = null;
        staticInitializationVectorABMC1_0.go(byteArray97);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray51);
        staticInitializationVectorABMC1_17.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        staticInitializationVectorABMC1_17.go(byteArray65);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_17.go(byteArray74);
        staticInitializationVectorABMC1_11.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass80 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        staticInitializationVectorABMC1_31.go(byteArray62);
        staticInitializationVectorABMC1_25.go(byteArray62);
        staticInitializationVectorABMC1_24.go(byteArray62);
        staticInitializationVectorABMC1_11.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_71.go(byteArray77);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_71.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_81.go(byteArray92);
        staticInitializationVectorABMC1_71.go(byteArray92);
        staticInitializationVectorABMC1_11.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass97 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass75 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_33.go(byteArray45);
        staticInitializationVectorABMC1_10.go(byteArray45);
        byte[] byteArray49 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_10.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_71.go(byteArray89);
        staticInitializationVectorABMC1_63.go(byteArray89);
        staticInitializationVectorABMC1_52.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass97 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 100, (byte) 10, (byte) 1, (byte) -1, (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass66 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        byte[] byteArray28 = null;
        staticInitializationVectorABMC1_22.go(byteArray28);
        byte[] byteArray30 = null;
        staticInitializationVectorABMC1_22.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_55.go(byteArray61);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_55.go(byteArray67);
        staticInitializationVectorABMC1_32.go(byteArray67);
        byte[] byteArray71 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_32.go(byteArray71);
        staticInitializationVectorABMC1_22.go(byteArray71);
        staticInitializationVectorABMC1_0.go(byteArray71);
        java.lang.Class<?> wildcardClass75 = byteArray71.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_64.go(byteArray75);
        staticInitializationVectorABMC1_53.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass79 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_46.go(byteArray52);
        byte[] byteArray54 = null;
        staticInitializationVectorABMC1_46.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_56.go(byteArray74);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_56.go(byteArray85);
        staticInitializationVectorABMC1_46.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_58.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray93 = null;
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_19.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_32.go(byteArray44);
        staticInitializationVectorABMC1_19.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_60.go(byteArray72);
        staticInitializationVectorABMC1_47.go(byteArray72);
        staticInitializationVectorABMC1_19.go(byteArray72);
        staticInitializationVectorABMC1_15.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray51);
        staticInitializationVectorABMC1_17.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        staticInitializationVectorABMC1_17.go(byteArray65);
        staticInitializationVectorABMC1_16.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass75 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_37.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray76);
        staticInitializationVectorABMC1_37.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_37.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_37.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_0.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        byte[] byteArray73 = null;
        staticInitializationVectorABMC1_67.go(byteArray73);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_67.go(byteArray79);
        staticInitializationVectorABMC1_44.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass83 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_0.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray61);
        staticInitializationVectorABMC1_39.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_65.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass79 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_0.go(byteArray56);
        java.lang.Class<?> wildcardClass58 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        staticInitializationVectorABMC1_41.go(byteArray59);
        staticInitializationVectorABMC1_33.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_33.go(byteArray83);
        staticInitializationVectorABMC1_10.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray54 = null;
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_0.go(byteArray56);
        java.lang.Class<?> wildcardClass58 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        staticInitializationVectorABMC1_27.go(byteArray53);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray62);
        staticInitializationVectorABMC1_0.go(byteArray62);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_0.go(byteArray65);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_0.go(byteArray67);
        java.lang.Class<?> wildcardClass69 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_0.go(byteArray67);
        java.lang.Class<?> wildcardClass69 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_20.go(byteArray51);
        staticInitializationVectorABMC1_14.go(byteArray51);
        staticInitializationVectorABMC1_13.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_13.go(byteArray62);
        staticInitializationVectorABMC1_0.go(byteArray62);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_0.go(byteArray67);
        java.lang.Class<?> wildcardClass69 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_38.go(byteArray64);
        staticInitializationVectorABMC1_34.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_72.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_72.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        staticInitializationVectorABMC1_34.go(byteArray65);
        staticInitializationVectorABMC1_28.go(byteArray65);
        staticInitializationVectorABMC1_27.go(byteArray65);
        staticInitializationVectorABMC1_14.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_33.go(byteArray45);
        staticInitializationVectorABMC1_10.go(byteArray45);
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_10.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        byte[] byteArray54 = null;
        staticInitializationVectorABMC1_0.go(byteArray54);
        java.lang.Class<?> wildcardClass56 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_46.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        staticInitializationVectorABMC1_54.go(byteArray72);
        staticInitializationVectorABMC1_46.go(byteArray72);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_46.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_74.go(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_74.go(byteArray86);
        staticInitializationVectorABMC1_43.go(byteArray86);
        staticInitializationVectorABMC1_32.go(byteArray86);
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass95 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_29.go(byteArray41);
        staticInitializationVectorABMC1_6.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_45.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray84);
        staticInitializationVectorABMC1_45.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_45.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        byte[] byteArray97 = null;
        staticInitializationVectorABMC1_0.go(byteArray97);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_0.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray61);
        staticInitializationVectorABMC1_39.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_65.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass79 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_66.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        staticInitializationVectorABMC1_66.go(byteArray80);
        staticInitializationVectorABMC1_58.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_11.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        staticInitializationVectorABMC1_11.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_0.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_32.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray71);
        staticInitializationVectorABMC1_32.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_74.go(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_74.go(byteArray86);
        staticInitializationVectorABMC1_32.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_10.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_32.go(byteArray63);
        staticInitializationVectorABMC1_26.go(byteArray63);
        staticInitializationVectorABMC1_25.go(byteArray63);
        staticInitializationVectorABMC1_10.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass73 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_60.go(byteArray71);
        staticInitializationVectorABMC1_37.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_74.go(byteArray85);
        staticInitializationVectorABMC1_37.go(byteArray85);
        staticInitializationVectorABMC1_36.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass90 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_10.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_32.go(byteArray63);
        staticInitializationVectorABMC1_26.go(byteArray63);
        staticInitializationVectorABMC1_25.go(byteArray63);
        staticInitializationVectorABMC1_10.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass73 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_1.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        byte[] byteArray57 = new byte[] {};
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_72.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_72.go(byteArray84);
        staticInitializationVectorABMC1_59.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass65 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray60);
        byte[] byteArray62 = null;
        staticInitializationVectorABMC1_0.go(byteArray62);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_0.go(byteArray66);
        java.lang.Class<?> wildcardClass68 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_53.go(byteArray59);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_53.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_0.go(byteArray68);
        java.lang.Class<?> wildcardClass70 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_14.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray46);
        staticInitializationVectorABMC1_14.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_49.go(byteArray75);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_49.go(byteArray84);
        staticInitializationVectorABMC1_14.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass88 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_38.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray74 = new byte[] { (byte) -1, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass78 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_38.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_71.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_79.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_82.go(byteArray93);
        staticInitializationVectorABMC1_79.go(byteArray93);
        staticInitializationVectorABMC1_71.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass98 = byteArray93.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_0.go(byteArray53);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_0.go(byteArray55);
        java.lang.Class<?> wildcardClass57 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray45);
        staticInitializationVectorABMC1_11.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_11.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_11.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_0.go(byteArray68);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_83.go(byteArray94);
        staticInitializationVectorABMC1_72.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        byte[] byteArray98 = null;
        staticInitializationVectorABMC1_0.go(byteArray98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        java.lang.Class<?> wildcardClass63 = byteArray58.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray25);
        staticInitializationVectorABMC1_3.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_28.go(byteArray34);
        byte[] byteArray36 = null;
        staticInitializationVectorABMC1_28.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        staticInitializationVectorABMC1_28.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_28.go(byteArray77);
        staticInitializationVectorABMC1_3.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_38.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray74 = new byte[] { (byte) -1, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass80 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_0.go(byteArray55);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        java.lang.Class<?> wildcardClass60 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_74.go(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_74.go(byteArray86);
        staticInitializationVectorABMC1_43.go(byteArray86);
        staticInitializationVectorABMC1_32.go(byteArray86);
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_95 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray97 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_95.go(byteArray97);
        staticInitializationVectorABMC1_0.go(byteArray97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray97);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_23.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_39.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_52.go(byteArray58);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_52.go(byteArray64);
        staticInitializationVectorABMC1_39.go(byteArray64);
        staticInitializationVectorABMC1_23.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass69 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_42.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray81);
        staticInitializationVectorABMC1_42.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_42.go(byteArray87);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray93 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_91.go(byteArray93);
        staticInitializationVectorABMC1_42.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        byte[] byteArray97 = null;
        staticInitializationVectorABMC1_0.go(byteArray97);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_0.go(byteArray44);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_0.go(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        staticInitializationVectorABMC1_7.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        staticInitializationVectorABMC1_7.go(byteArray25);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        staticInitializationVectorABMC1_7.go(byteArray56);
        staticInitializationVectorABMC1_6.go(byteArray56);
        staticInitializationVectorABMC1_0.go(byteArray56);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_0.go(byteArray66);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_0.go(byteArray68);
        java.lang.Class<?> wildcardClass70 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_68.go(byteArray79);
        staticInitializationVectorABMC1_45.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_82.go(byteArray93);
        staticInitializationVectorABMC1_45.go(byteArray93);
        staticInitializationVectorABMC1_44.go(byteArray93);
        staticInitializationVectorABMC1_40.go(byteArray93);
        staticInitializationVectorABMC1_17.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_34.go(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_34.go(byteArray46);
        staticInitializationVectorABMC1_11.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_49.go(byteArray75);
        staticInitializationVectorABMC1_11.go(byteArray75);
        byte[] byteArray85 = new byte[] { (byte) -1, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass88 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_0.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        java.lang.Class<?> wildcardClass41 = byteArray35.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_0.go(byteArray59);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_0.go(byteArray61);
        java.lang.Class<?> wildcardClass63 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        staticInitializationVectorABMC1_13.go(byteArray44);
        staticInitializationVectorABMC1_7.go(byteArray44);
        staticInitializationVectorABMC1_6.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_6.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_6.go(byteArray66);
        staticInitializationVectorABMC1_0.go(byteArray66);
        java.lang.Class<?> wildcardClass72 = byteArray66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_0.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        byte[] byteArray73 = null;
        staticInitializationVectorABMC1_67.go(byteArray73);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_67.go(byteArray79);
        staticInitializationVectorABMC1_44.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass83 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_92 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_93 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray95 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_93.go(byteArray95);
        staticInitializationVectorABMC1_92.go(byteArray95);
        staticInitializationVectorABMC1_88.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        byte[] byteArray7 = null;
        staticInitializationVectorABMC1_1.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        staticInitializationVectorABMC1_9.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        staticInitializationVectorABMC1_9.go(byteArray27);
        staticInitializationVectorABMC1_1.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        staticInitializationVectorABMC1_41.go(byteArray59);
        staticInitializationVectorABMC1_33.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_33.go(byteArray83);
        staticInitializationVectorABMC1_1.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_10.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray26 = null;
        staticInitializationVectorABMC1_20.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        staticInitializationVectorABMC1_20.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_52.go(byteArray83);
        staticInitializationVectorABMC1_20.go(byteArray83);
        staticInitializationVectorABMC1_10.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass92 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_8.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        staticInitializationVectorABMC1_16.go(byteArray34);
        staticInitializationVectorABMC1_8.go(byteArray34);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        java.lang.Class<?> wildcardClass46 = byteArray43.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        staticInitializationVectorABMC1_24.go(byteArray73);
        staticInitializationVectorABMC1_13.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_80.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_83.go(byteArray94);
        staticInitializationVectorABMC1_80.go(byteArray94);
        staticInitializationVectorABMC1_13.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_0.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_80.go(byteArray91);
        staticInitializationVectorABMC1_69.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass95 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_8.go(byteArray19);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_8.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        staticInitializationVectorABMC1_23.go(byteArray41);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray52);
        staticInitializationVectorABMC1_8.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray84);
        staticInitializationVectorABMC1_8.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_0.go(byteArray88);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_8.go(byteArray37);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_44.go(byteArray50);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_44.go(byteArray56);
        staticInitializationVectorABMC1_8.go(byteArray56);
        staticInitializationVectorABMC1_0.go(byteArray56);
        java.lang.Class<?> wildcardClass60 = byteArray56.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        staticInitializationVectorABMC1_42.go(byteArray73);
        staticInitializationVectorABMC1_36.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_81.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        byte[] byteArray95 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_84.go(byteArray95);
        staticInitializationVectorABMC1_81.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass99 = byteArray95.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_0.go(byteArray59);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_0.go(byteArray61);
        java.lang.Class<?> wildcardClass63 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_8.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        staticInitializationVectorABMC1_16.go(byteArray34);
        staticInitializationVectorABMC1_8.go(byteArray34);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_8.go(byteArray40);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_8.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_75.go(byteArray81);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_75.go(byteArray87);
        staticInitializationVectorABMC1_44.go(byteArray87);
        staticInitializationVectorABMC1_8.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_30.go(byteArray61);
        staticInitializationVectorABMC1_24.go(byteArray61);
        staticInitializationVectorABMC1_23.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        java.lang.Class<?> wildcardClass70 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        staticInitializationVectorABMC1_3.go(byteArray21);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray32);
        staticInitializationVectorABMC1_0.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_38.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray82);
        staticInitializationVectorABMC1_38.go(byteArray82);
        staticInitializationVectorABMC1_37.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass87 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        staticInitializationVectorABMC1_24.go(byteArray73);
        staticInitializationVectorABMC1_13.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_80.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_83.go(byteArray94);
        staticInitializationVectorABMC1_80.go(byteArray94);
        staticInitializationVectorABMC1_13.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass99 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray30 = null;
        staticInitializationVectorABMC1_24.go(byteArray30);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_24.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        staticInitializationVectorABMC1_34.go(byteArray52);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray63);
        staticInitializationVectorABMC1_24.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_24.go(byteArray73);
        staticInitializationVectorABMC1_1.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray45);
        staticInitializationVectorABMC1_11.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_11.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_11.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_0.go(byteArray68);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_1.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        byte[] byteArray57 = new byte[] {};
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_72.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_72.go(byteArray84);
        staticInitializationVectorABMC1_59.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass88 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray45);
        staticInitializationVectorABMC1_11.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_11.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_11.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_0.go(byteArray68);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_83.go(byteArray94);
        staticInitializationVectorABMC1_72.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass98 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_17.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_33.go(byteArray45);
        staticInitializationVectorABMC1_20.go(byteArray45);
        staticInitializationVectorABMC1_17.go(byteArray45);
        staticInitializationVectorABMC1_16.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_51.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        staticInitializationVectorABMC1_51.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass69 = byteArray65.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_4.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_40.go(byteArray46);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_40.go(byteArray52);
        staticInitializationVectorABMC1_17.go(byteArray52);
        byte[] byteArray56 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_17.go(byteArray56);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_17.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_68.go(byteArray86);
        staticInitializationVectorABMC1_60.go(byteArray86);
        staticInitializationVectorABMC1_17.go(byteArray86);
        staticInitializationVectorABMC1_4.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_34.go(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_34.go(byteArray46);
        staticInitializationVectorABMC1_11.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_49.go(byteArray75);
        staticInitializationVectorABMC1_11.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        staticInitializationVectorABMC1_28.go(byteArray77);
        staticInitializationVectorABMC1_27.go(byteArray77);
        staticInitializationVectorABMC1_16.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_8.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        staticInitializationVectorABMC1_16.go(byteArray34);
        staticInitializationVectorABMC1_8.go(byteArray34);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass60 = byteArray57.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_47.go(byteArray53);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_47.go(byteArray59);
        staticInitializationVectorABMC1_24.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        java.lang.Class<?> wildcardClass80 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_0.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_25.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        staticInitializationVectorABMC1_25.go(byteArray56);
        staticInitializationVectorABMC1_19.go(byteArray56);
        staticInitializationVectorABMC1_18.go(byteArray56);
        staticInitializationVectorABMC1_0.go(byteArray56);
        java.lang.Class<?> wildcardClass65 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_0.go(byteArray43);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_47.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        byte[] byteArray95 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_84.go(byteArray95);
        staticInitializationVectorABMC1_47.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass99 = byteArray95.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_0.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        staticInitializationVectorABMC1_23.go(byteArray54);
        staticInitializationVectorABMC1_17.go(byteArray54);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_17.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_63.go(byteArray75);
        staticInitializationVectorABMC1_17.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass79 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_16.go(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_16.go(byteArray28);
        staticInitializationVectorABMC1_3.go(byteArray28);
        staticInitializationVectorABMC1_0.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        staticInitializationVectorABMC1_38.go(byteArray69);
        staticInitializationVectorABMC1_32.go(byteArray69);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_32.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_78.go(byteArray84);
        byte[] byteArray90 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_78.go(byteArray90);
        staticInitializationVectorABMC1_32.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        staticInitializationVectorABMC1_31.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_68.go(byteArray79);
        staticInitializationVectorABMC1_31.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_31.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_26.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_26.go(byteArray75);
        staticInitializationVectorABMC1_25.go(byteArray75);
        staticInitializationVectorABMC1_14.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_0.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        java.lang.Class<?> wildcardClass44 = byteArray41.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray39 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_41.go(byteArray47);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_41.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        staticInitializationVectorABMC1_51.go(byteArray77);
        staticInitializationVectorABMC1_41.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_0.go(byteArray16);
        java.lang.Class<?> wildcardClass18 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_37.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray81);
        staticInitializationVectorABMC1_37.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_68.go(byteArray86);
        staticInitializationVectorABMC1_60.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray93 = null;
        staticInitializationVectorABMC1_0.go(byteArray93);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_14.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass65 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_64.go(byteArray75);
        staticInitializationVectorABMC1_53.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass79 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_66.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        staticInitializationVectorABMC1_66.go(byteArray80);
        staticInitializationVectorABMC1_58.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass85 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        staticInitializationVectorABMC1_0.go(byteArray16);
        java.lang.Class<?> wildcardClass20 = byteArray16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_0.go(byteArray71);
        byte[] byteArray73 = null;
        staticInitializationVectorABMC1_0.go(byteArray73);
        java.lang.Class<?> wildcardClass75 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_72.go(byteArray90);
        staticInitializationVectorABMC1_59.go(byteArray90);
        staticInitializationVectorABMC1_58.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_0.go(byteArray55);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_59.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_62.go(byteArray80);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_62.go(byteArray91);
        staticInitializationVectorABMC1_59.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass95 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_0.go(byteArray56);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_60.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_60.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_78.go(byteArray89);
        staticInitializationVectorABMC1_55.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        byte[] byteArray27 = null;
        staticInitializationVectorABMC1_21.go(byteArray27);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_21.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray42);
        staticInitializationVectorABMC1_21.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_45.go(byteArray80);
        staticInitializationVectorABMC1_21.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_84.go(byteArray91);
        staticInitializationVectorABMC1_21.go(byteArray91);
        staticInitializationVectorABMC1_15.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_32.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_60.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_60.go(byteArray85);
        staticInitializationVectorABMC1_32.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass90 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray25);
        byte[] byteArray27 = null;
        staticInitializationVectorABMC1_14.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        staticInitializationVectorABMC1_29.go(byteArray47);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray58);
        staticInitializationVectorABMC1_14.go(byteArray58);
        staticInitializationVectorABMC1_13.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass65 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_4.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_35.go(byteArray47);
        staticInitializationVectorABMC1_4.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_50.go(byteArray85);
        staticInitializationVectorABMC1_4.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        staticInitializationVectorABMC1_25.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_25.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass75 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_29.go(byteArray60);
        staticInitializationVectorABMC1_23.go(byteArray60);
        staticInitializationVectorABMC1_22.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_22.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        staticInitializationVectorABMC1_22.go(byteArray82);
        staticInitializationVectorABMC1_16.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_44.go(byteArray75);
        staticInitializationVectorABMC1_38.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_83.go(byteArray89);
        byte[] byteArray95 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_83.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        byte[] byteArray98 = null;
        staticInitializationVectorABMC1_0.go(byteArray98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_0.go(byteArray56);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_60.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_60.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_63.go(byteArray75);
        staticInitializationVectorABMC1_32.go(byteArray75);
        staticInitializationVectorABMC1_21.go(byteArray75);
        staticInitializationVectorABMC1_10.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        staticInitializationVectorABMC1_45.go(byteArray76);
        staticInitializationVectorABMC1_39.go(byteArray76);
        staticInitializationVectorABMC1_38.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_38.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_70.go(byteArray76);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_70.go(byteArray82);
        staticInitializationVectorABMC1_47.go(byteArray82);
        staticInitializationVectorABMC1_43.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray51);
        staticInitializationVectorABMC1_17.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        staticInitializationVectorABMC1_17.go(byteArray65);
        staticInitializationVectorABMC1_16.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass72 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_23.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        staticInitializationVectorABMC1_23.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_80.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_17.go(byteArray23);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_17.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_27.go(byteArray38);
        staticInitializationVectorABMC1_17.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        staticInitializationVectorABMC1_41.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_64.go(byteArray70);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_64.go(byteArray76);
        staticInitializationVectorABMC1_41.go(byteArray76);
        staticInitializationVectorABMC1_17.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_80.go(byteArray87);
        staticInitializationVectorABMC1_17.go(byteArray87);
        staticInitializationVectorABMC1_11.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass94 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_0.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_19.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_19.go(byteArray50);
        staticInitializationVectorABMC1_13.go(byteArray50);
        staticInitializationVectorABMC1_12.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        staticInitializationVectorABMC1_12.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass78 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        staticInitializationVectorABMC1_31.go(byteArray62);
        staticInitializationVectorABMC1_25.go(byteArray62);
        staticInitializationVectorABMC1_24.go(byteArray62);
        staticInitializationVectorABMC1_11.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_71.go(byteArray77);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_71.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_81.go(byteArray92);
        staticInitializationVectorABMC1_71.go(byteArray92);
        staticInitializationVectorABMC1_11.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_67.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_67.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        staticInitializationVectorABMC1_25.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_25.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        java.lang.Class<?> wildcardClass63 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_82.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_85.go(byteArray88);
        byte[] byteArray96 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_85.go(byteArray96);
        staticInitializationVectorABMC1_82.go(byteArray96);
        staticInitializationVectorABMC1_0.go(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray96);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_22.go(byteArray57);
        byte[] byteArray61 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_22.go(byteArray61);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_22.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_65.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_84.go(byteArray91);
        staticInitializationVectorABMC1_73.go(byteArray91);
        staticInitializationVectorABMC1_65.go(byteArray91);
        staticInitializationVectorABMC1_22.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass99 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_0.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray23);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_12.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        staticInitializationVectorABMC1_27.go(byteArray45);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_27.go(byteArray56);
        staticInitializationVectorABMC1_12.go(byteArray56);
        staticInitializationVectorABMC1_0.go(byteArray56);
        java.lang.Class<?> wildcardClass60 = byteArray56.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_11.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        staticInitializationVectorABMC1_11.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_0.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass90 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray20 = null;
        staticInitializationVectorABMC1_14.go(byteArray20);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_14.go(byteArray26);
        staticInitializationVectorABMC1_1.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray40);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_29.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray73);
        staticInitializationVectorABMC1_29.go(byteArray73);
        staticInitializationVectorABMC1_1.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass83 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_8.go(byteArray37);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray73);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_44.go(byteArray78);
        staticInitializationVectorABMC1_8.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_85.go(byteArray88);
        staticInitializationVectorABMC1_81.go(byteArray88);
        staticInitializationVectorABMC1_8.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray9 = null;
        staticInitializationVectorABMC1_3.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        staticInitializationVectorABMC1_3.go(byteArray29);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_3.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_40.go(byteArray46);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_40.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_50.go(byteArray85);
        byte[] byteArray89 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_50.go(byteArray89);
        staticInitializationVectorABMC1_40.go(byteArray89);
        staticInitializationVectorABMC1_3.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass94 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_20.go(byteArray51);
        staticInitializationVectorABMC1_14.go(byteArray51);
        staticInitializationVectorABMC1_13.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_13.go(byteArray62);
        staticInitializationVectorABMC1_0.go(byteArray62);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_0.go(byteArray67);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        java.lang.Class<?> wildcardClass71 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_67.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_67.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray44);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_33.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray77);
        staticInitializationVectorABMC1_33.go(byteArray77);
        byte[] byteArray83 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass67 = byteArray64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        staticInitializationVectorABMC1_42.go(byteArray73);
        staticInitializationVectorABMC1_36.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_81.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        byte[] byteArray95 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_84.go(byteArray95);
        staticInitializationVectorABMC1_81.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_0.go(byteArray53);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_0.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_57.go(byteArray63);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_57.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_67.go(byteArray85);
        byte[] byteArray96 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_67.go(byteArray96);
        staticInitializationVectorABMC1_57.go(byteArray96);
        staticInitializationVectorABMC1_0.go(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray96);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_0.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_19.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_19.go(byteArray50);
        staticInitializationVectorABMC1_13.go(byteArray50);
        staticInitializationVectorABMC1_12.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        staticInitializationVectorABMC1_12.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass78 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_0.go(byteArray77);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass81 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_37.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass65 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_8.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        staticInitializationVectorABMC1_16.go(byteArray34);
        staticInitializationVectorABMC1_8.go(byteArray34);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_8.go(byteArray40);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_8.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_75.go(byteArray81);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_75.go(byteArray87);
        staticInitializationVectorABMC1_44.go(byteArray87);
        staticInitializationVectorABMC1_8.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass92 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_0.go(byteArray38);
        java.lang.Class<?> wildcardClass40 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_0.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        staticInitializationVectorABMC1_0.go(byteArray69);
        java.lang.Class<?> wildcardClass72 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = null;
        staticInitializationVectorABMC1_8.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_8.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_26.go(byteArray32);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_26.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray47);
        staticInitializationVectorABMC1_26.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_50.go(byteArray85);
        staticInitializationVectorABMC1_26.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass90 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_17.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_33.go(byteArray45);
        staticInitializationVectorABMC1_20.go(byteArray45);
        staticInitializationVectorABMC1_17.go(byteArray45);
        staticInitializationVectorABMC1_16.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_51.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        staticInitializationVectorABMC1_51.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass69 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        staticInitializationVectorABMC1_25.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_25.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass65 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_37.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_37.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_0.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_12.go(byteArray18);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_12.go(byteArray24);
        byte[] byteArray26 = null;
        staticInitializationVectorABMC1_12.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        staticInitializationVectorABMC1_40.go(byteArray58);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_71.go(byteArray89);
        staticInitializationVectorABMC1_40.go(byteArray89);
        staticInitializationVectorABMC1_39.go(byteArray89);
        staticInitializationVectorABMC1_28.go(byteArray89);
        staticInitializationVectorABMC1_12.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass99 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_0.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_18.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_18.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray62);
        staticInitializationVectorABMC1_18.go(byteArray62);
        staticInitializationVectorABMC1_0.go(byteArray62);
        java.lang.Class<?> wildcardClass66 = byteArray62.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }
}

